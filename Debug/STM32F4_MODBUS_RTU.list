
STM32F4_MODBUS_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  20000000  080045bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
  8 .bss          00003fb0  200000f4  200000f4  000200f4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200040a4  200040a4  000200f4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000249aa  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000051c4  00000000  00000000  00044ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a774  00000000  00000000  00049c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00054408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  00055360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009828  00000000  00000000  00056518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005faa  00000000  00000000  0005fd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00065cea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000033c0  00000000  00000000  00065d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         000000cc  00000000  00000000  00069128  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  000691f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004128 	.word	0x08004128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	08004128 	.word	0x08004128

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x30>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800058a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000592:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f81b 	bl	80005d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f002 fcfe 	bl	8002fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f002 fc7c 	bl	8002ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005ac:	2000      	movs	r0, #0
 80005ae:	bd08      	pop	{r3, pc}
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005b4:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <HAL_IncTick+0x10>)
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_IncTick+0x14>)
 80005b8:	6811      	ldr	r1, [r2, #0]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	440b      	add	r3, r1
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20003ecc 	.word	0x20003ecc
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTick+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20003ecc 	.word	0x20003ecc

080005d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	0c1b      	lsrs	r3, r3, #16
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e8:	0200      	lsls	r0, r0, #8
 80005ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f4:	60d3      	str	r3, [r2, #12]
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	68dc      	ldr	r4, [r3, #12]
 8000602:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000606:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060c:	2b04      	cmp	r3, #4
 800060e:	bf28      	it	cs
 8000610:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f04f 0501 	mov.w	r5, #1
 8000618:	fa05 f303 	lsl.w	r3, r5, r3
 800061c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000620:	bf8c      	ite	hi
 8000622:	3c03      	subhi	r4, #3
 8000624:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000626:	4019      	ands	r1, r3
 8000628:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062a:	fa05 f404 	lsl.w	r4, r5, r4
 800062e:	3c01      	subs	r4, #1
 8000630:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000632:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	ea42 0201 	orr.w	r2, r2, r1
 8000638:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	bfaf      	iteee	ge
 800063e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	f000 000f 	andlt.w	r0, r0, #15
 8000646:	4b06      	ldrlt	r3, [pc, #24]	; (8000660 <HAL_NVIC_SetPriority+0x64>)
 8000648:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	bfa5      	ittet	ge
 800064c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000650:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00
 8000660:	e000ed14 	.word	0xe000ed14

08000664 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000664:	0942      	lsrs	r2, r0, #5
 8000666:	2301      	movs	r3, #1
 8000668:	f000 001f 	and.w	r0, r0, #31
 800066c:	fa03 f000 	lsl.w	r0, r3, r0
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_NVIC_EnableIRQ+0x14>)
 8000672:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100

0800067c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800067c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000680:	2b02      	cmp	r3, #2
 8000682:	d003      	beq.n	800068c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000688:	2001      	movs	r0, #1
 800068a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800068c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800068e:	2305      	movs	r3, #5
 8000690:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800069c:	2000      	movs	r0, #0
}
 800069e:	4770      	bx	lr

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000858 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4a68      	ldr	r2, [pc, #416]	; (8000850 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ae:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800085c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006b6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ba:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006bc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006c4:	45b6      	cmp	lr, r6
 80006c6:	f040 80ae 	bne.w	8000826 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ca:	684c      	ldr	r4, [r1, #4]
 80006cc:	f024 0710 	bic.w	r7, r4, #16
 80006d0:	2f02      	cmp	r7, #2
 80006d2:	d116      	bne.n	8000702 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006dc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006e0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006e8:	f04f 0c0f 	mov.w	ip, #15
 80006ec:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006f0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006f4:	690d      	ldr	r5, [r1, #16]
 80006f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006fa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006fe:	f8ca 5020 	str.w	r5, [sl, #32]
 8000702:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000706:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000708:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800070c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000710:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000712:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000716:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000720:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000726:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072a:	d811      	bhi.n	8000750 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800072c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800072e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000732:	68cf      	ldr	r7, [r1, #12]
 8000734:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000738:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800073c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800073e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000740:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000744:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000748:	409f      	lsls	r7, r3
 800074a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800074e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000750:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000752:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000754:	688f      	ldr	r7, [r1, #8]
 8000756:	fa07 f70a 	lsl.w	r7, r7, sl
 800075a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800075c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075e:	00e5      	lsls	r5, r4, #3
 8000760:	d561      	bpl.n	8000826 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	f04f 0b00 	mov.w	fp, #0
 8000766:	f8cd b00c 	str.w	fp, [sp, #12]
 800076a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	4d39      	ldr	r5, [pc, #228]	; (8000854 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000774:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000778:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800077c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000780:	9703      	str	r7, [sp, #12]
 8000782:	9f03      	ldr	r7, [sp, #12]
 8000784:	f023 0703 	bic.w	r7, r3, #3
 8000788:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800078c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000790:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000794:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000798:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800079c:	f04f 0e0f 	mov.w	lr, #15
 80007a0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007aa:	d043      	beq.n	8000834 <HAL_GPIO_Init+0x194>
 80007ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d041      	beq.n	8000838 <HAL_GPIO_Init+0x198>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d03f      	beq.n	800083c <HAL_GPIO_Init+0x19c>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d03d      	beq.n	8000840 <HAL_GPIO_Init+0x1a0>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d03b      	beq.n	8000844 <HAL_GPIO_Init+0x1a4>
 80007cc:	4548      	cmp	r0, r9
 80007ce:	d03b      	beq.n	8000848 <HAL_GPIO_Init+0x1a8>
 80007d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d039      	beq.n	800084c <HAL_GPIO_Init+0x1ac>
 80007d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007dc:	42a8      	cmp	r0, r5
 80007de:	bf14      	ite	ne
 80007e0:	2508      	movne	r5, #8
 80007e2:	2507      	moveq	r5, #7
 80007e4:	fa05 f50c 	lsl.w	r5, r5, ip
 80007e8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ec:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007ee:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007f0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007f6:	bf0c      	ite	eq
 80007f8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007fc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007fe:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000800:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000804:	bf0c      	ite	eq
 8000806:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000808:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800080a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800080c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800080e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000812:	bf0c      	ite	eq
 8000814:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000816:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000818:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800081a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800081c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf54      	ite	pl
 8000820:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000822:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000824:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	3301      	adds	r3, #1
 8000828:	2b10      	cmp	r3, #16
 800082a:	f47f af44 	bne.w	80006b6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800082e:	b005      	add	sp, #20
 8000830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000834:	465d      	mov	r5, fp
 8000836:	e7d5      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 8000838:	2501      	movs	r5, #1
 800083a:	e7d3      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 800083c:	2502      	movs	r5, #2
 800083e:	e7d1      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 8000840:	2503      	movs	r5, #3
 8000842:	e7cf      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 8000844:	2504      	movs	r5, #4
 8000846:	e7cd      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 8000848:	2505      	movs	r5, #5
 800084a:	e7cb      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 800084c:	2506      	movs	r5, #6
 800084e:	e7c9      	b.n	80007e4 <HAL_GPIO_Init+0x144>
 8000850:	40013c00 	.word	0x40013c00
 8000854:	40020000 	.word	0x40020000
 8000858:	40023800 	.word	0x40023800
 800085c:	40021400 	.word	0x40021400

08000860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000860:	b10a      	cbz	r2, 8000866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000862:	6181      	str	r1, [r0, #24]
 8000864:	4770      	bx	lr
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	e7fb      	b.n	8000862 <HAL_GPIO_WritePin+0x2>

0800086a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800086a:	6943      	ldr	r3, [r0, #20]
 800086c:	4059      	eors	r1, r3
 800086e:	6141      	str	r1, [r0, #20]
 8000870:	4770      	bx	lr
	...

08000874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000878:	4604      	mov	r4, r0
 800087a:	b918      	cbnz	r0, 8000884 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800087c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800087e:	b002      	add	sp, #8
 8000880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000884:	6803      	ldr	r3, [r0, #0]
 8000886:	07dd      	lsls	r5, r3, #31
 8000888:	d410      	bmi.n	80008ac <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800088a:	6823      	ldr	r3, [r4, #0]
 800088c:	0798      	lsls	r0, r3, #30
 800088e:	d458      	bmi.n	8000942 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	071a      	lsls	r2, r3, #28
 8000894:	f100 809a 	bmi.w	80009cc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	075b      	lsls	r3, r3, #29
 800089c:	f100 80b8 	bmi.w	8000a10 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a0:	69a2      	ldr	r2, [r4, #24]
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	f040 8119 	bne.w	8000ada <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008a8:	2000      	movs	r0, #0
 80008aa:	e7e8      	b.n	800087e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ac:	4ba6      	ldr	r3, [pc, #664]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	f002 020c 	and.w	r2, r2, #12
 80008b4:	2a04      	cmp	r2, #4
 80008b6:	d007      	beq.n	80008c8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008be:	2a08      	cmp	r2, #8
 80008c0:	d10a      	bne.n	80008d8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	0259      	lsls	r1, r3, #9
 80008c6:	d507      	bpl.n	80008d8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c8:	4b9f      	ldr	r3, [pc, #636]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	039a      	lsls	r2, r3, #14
 80008ce:	d5dc      	bpl.n	800088a <HAL_RCC_OscConfig+0x16>
 80008d0:	6863      	ldr	r3, [r4, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1d9      	bne.n	800088a <HAL_RCC_OscConfig+0x16>
 80008d6:	e7d1      	b.n	800087c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d8:	6863      	ldr	r3, [r4, #4]
 80008da:	4d9b      	ldr	r5, [pc, #620]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 80008dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e0:	d111      	bne.n	8000906 <HAL_RCC_OscConfig+0x92>
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ea:	f7ff fe6f 	bl	80005cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ee:	4d96      	ldr	r5, [pc, #600]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	039b      	lsls	r3, r3, #14
 80008f6:	d4c8      	bmi.n	800088a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f8:	f7ff fe68 	bl	80005cc <HAL_GetTick>
 80008fc:	1b80      	subs	r0, r0, r6
 80008fe:	2864      	cmp	r0, #100	; 0x64
 8000900:	d9f7      	bls.n	80008f2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000902:	2003      	movs	r0, #3
 8000904:	e7bb      	b.n	800087e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800090a:	d104      	bne.n	8000916 <HAL_RCC_OscConfig+0xa2>
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	e7e5      	b.n	80008e2 <HAL_RCC_OscConfig+0x6e>
 8000916:	682a      	ldr	r2, [r5, #0]
 8000918:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800091c:	602a      	str	r2, [r5, #0]
 800091e:	682a      	ldr	r2, [r5, #0]
 8000920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000924:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1df      	bne.n	80008ea <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800092a:	f7ff fe4f 	bl	80005cc <HAL_GetTick>
 800092e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	039f      	lsls	r7, r3, #14
 8000934:	d5a9      	bpl.n	800088a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000936:	f7ff fe49 	bl	80005cc <HAL_GetTick>
 800093a:	1b80      	subs	r0, r0, r6
 800093c:	2864      	cmp	r0, #100	; 0x64
 800093e:	d9f7      	bls.n	8000930 <HAL_RCC_OscConfig+0xbc>
 8000940:	e7df      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000942:	4b81      	ldr	r3, [pc, #516]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	f012 0f0c 	tst.w	r2, #12
 800094a:	d007      	beq.n	800095c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000952:	2a08      	cmp	r2, #8
 8000954:	d111      	bne.n	800097a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	025e      	lsls	r6, r3, #9
 800095a:	d40e      	bmi.n	800097a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095c:	4b7a      	ldr	r3, [pc, #488]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	0795      	lsls	r5, r2, #30
 8000962:	d502      	bpl.n	800096a <HAL_RCC_OscConfig+0xf6>
 8000964:	68e2      	ldr	r2, [r4, #12]
 8000966:	2a01      	cmp	r2, #1
 8000968:	d188      	bne.n	800087c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	6921      	ldr	r1, [r4, #16]
 800096e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000972:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000976:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000978:	e78a      	b.n	8000890 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800097a:	68e2      	ldr	r2, [r4, #12]
 800097c:	4b73      	ldr	r3, [pc, #460]	; (8000b4c <HAL_RCC_OscConfig+0x2d8>)
 800097e:	b1b2      	cbz	r2, 80009ae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000984:	f7ff fe22 	bl	80005cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000988:	4d6f      	ldr	r5, [pc, #444]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800098a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	0798      	lsls	r0, r3, #30
 8000990:	d507      	bpl.n	80009a2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	6922      	ldr	r2, [r4, #16]
 8000996:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800099a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	e776      	b.n	8000890 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a2:	f7ff fe13 	bl	80005cc <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9ef      	bls.n	800098c <HAL_RCC_OscConfig+0x118>
 80009ac:	e7a9      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fe0c 	bl	80005cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b4:	4d64      	ldr	r5, [pc, #400]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	0799      	lsls	r1, r3, #30
 80009bc:	f57f af68 	bpl.w	8000890 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c0:	f7ff fe04 	bl	80005cc <HAL_GetTick>
 80009c4:	1b80      	subs	r0, r0, r6
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9f6      	bls.n	80009b8 <HAL_RCC_OscConfig+0x144>
 80009ca:	e79a      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009cc:	6962      	ldr	r2, [r4, #20]
 80009ce:	4b60      	ldr	r3, [pc, #384]	; (8000b50 <HAL_RCC_OscConfig+0x2dc>)
 80009d0:	b17a      	cbz	r2, 80009f2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d6:	f7ff fdf9 	bl	80005cc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009da:	4d5b      	ldr	r5, [pc, #364]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e0:	079f      	lsls	r7, r3, #30
 80009e2:	f53f af59 	bmi.w	8000898 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e6:	f7ff fdf1 	bl	80005cc <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2802      	cmp	r0, #2
 80009ee:	d9f6      	bls.n	80009de <HAL_RCC_OscConfig+0x16a>
 80009f0:	e787      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009f4:	f7ff fdea 	bl	80005cc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f8:	4d53      	ldr	r5, [pc, #332]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009fe:	0798      	lsls	r0, r3, #30
 8000a00:	f57f af4a 	bpl.w	8000898 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a04:	f7ff fde2 	bl	80005cc <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f6      	bls.n	80009fc <HAL_RCC_OscConfig+0x188>
 8000a0e:	e778      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a10:	4b4d      	ldr	r3, [pc, #308]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 8000a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a14:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a18:	d128      	bne.n	8000a6c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	9201      	str	r2, [sp, #4]
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a2e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	4d48      	ldr	r5, [pc, #288]	; (8000b54 <HAL_RCC_OscConfig+0x2e0>)
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	05d9      	lsls	r1, r3, #23
 8000a36:	d51b      	bpl.n	8000a70 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a38:	68a3      	ldr	r3, [r4, #8]
 8000a3a:	4d43      	ldr	r5, [pc, #268]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d127      	bne.n	8000a90 <HAL_RCC_OscConfig+0x21c>
 8000a40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a48:	f7ff fdc0 	bl	80005cc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a4c:	4d3e      	ldr	r5, [pc, #248]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a4e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a56:	079b      	lsls	r3, r3, #30
 8000a58:	d539      	bpl.n	8000ace <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	f43f af20 	beq.w	80008a0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a60:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 8000a62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	e719      	b.n	80008a0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	e7df      	b.n	8000a30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a78:	f7ff fda8 	bl	80005cc <HAL_GetTick>
 8000a7c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	05da      	lsls	r2, r3, #23
 8000a82:	d4d9      	bmi.n	8000a38 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a84:	f7ff fda2 	bl	80005cc <HAL_GetTick>
 8000a88:	1bc0      	subs	r0, r0, r7
 8000a8a:	2802      	cmp	r0, #2
 8000a8c:	d9f7      	bls.n	8000a7e <HAL_RCC_OscConfig+0x20a>
 8000a8e:	e738      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d104      	bne.n	8000a9e <HAL_RCC_OscConfig+0x22a>
 8000a94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a9c:	e7d0      	b.n	8000a40 <HAL_RCC_OscConfig+0x1cc>
 8000a9e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aa0:	f022 0201 	bic.w	r2, r2, #1
 8000aa4:	672a      	str	r2, [r5, #112]	; 0x70
 8000aa6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aa8:	f022 0204 	bic.w	r2, r2, #4
 8000aac:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1ca      	bne.n	8000a48 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fd8b 	bl	80005cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000abe:	0798      	lsls	r0, r3, #30
 8000ac0:	d5cb      	bpl.n	8000a5a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac2:	f7ff fd83 	bl	80005cc <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	4540      	cmp	r0, r8
 8000aca:	d9f7      	bls.n	8000abc <HAL_RCC_OscConfig+0x248>
 8000acc:	e719      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ace:	f7ff fd7d 	bl	80005cc <HAL_GetTick>
 8000ad2:	1bc0      	subs	r0, r0, r7
 8000ad4:	4540      	cmp	r0, r8
 8000ad6:	d9bd      	bls.n	8000a54 <HAL_RCC_OscConfig+0x1e0>
 8000ad8:	e713      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ada:	4d1b      	ldr	r5, [pc, #108]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 8000adc:	68ab      	ldr	r3, [r5, #8]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	f43f aeca 	beq.w	800087c <HAL_RCC_OscConfig+0x8>
 8000ae8:	4e1b      	ldr	r6, [pc, #108]	; (8000b58 <HAL_RCC_OscConfig+0x2e4>)
 8000aea:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aec:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000aee:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af0:	d134      	bne.n	8000b5c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000af2:	f7ff fd6b 	bl	80005cc <HAL_GetTick>
 8000af6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	0199      	lsls	r1, r3, #6
 8000afc:	d41e      	bmi.n	8000b3c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000afe:	6a22      	ldr	r2, [r4, #32]
 8000b00:	69e3      	ldr	r3, [r4, #28]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b12:	4c0d      	ldr	r4, [pc, #52]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b14:	0852      	lsrs	r2, r2, #1
 8000b16:	3a01      	subs	r2, #1
 8000b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b1e:	2301      	movs	r3, #1
 8000b20:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b22:	f7ff fd53 	bl	80005cc <HAL_GetTick>
 8000b26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	019a      	lsls	r2, r3, #6
 8000b2c:	f53f aebc 	bmi.w	80008a8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b30:	f7ff fd4c 	bl	80005cc <HAL_GetTick>
 8000b34:	1b40      	subs	r0, r0, r5
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x2b4>
 8000b3a:	e6e2      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3c:	f7ff fd46 	bl	80005cc <HAL_GetTick>
 8000b40:	1bc0      	subs	r0, r0, r7
 8000b42:	2802      	cmp	r0, #2
 8000b44:	d9d8      	bls.n	8000af8 <HAL_RCC_OscConfig+0x284>
 8000b46:	e6dc      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	42470000 	.word	0x42470000
 8000b50:	42470e80 	.word	0x42470e80
 8000b54:	40007000 	.word	0x40007000
 8000b58:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fd36 	bl	80005cc <HAL_GetTick>
 8000b60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	f57f ae9f 	bpl.w	80008a8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fd2f 	bl	80005cc <HAL_GetTick>
 8000b6e:	1b00      	subs	r0, r0, r4
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9f6      	bls.n	8000b62 <HAL_RCC_OscConfig+0x2ee>
 8000b74:	e6c5      	b.n	8000902 <HAL_RCC_OscConfig+0x8e>
 8000b76:	bf00      	nop

08000b78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b78:	4913      	ldr	r1, [pc, #76]	; (8000bc8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b7c:	688b      	ldr	r3, [r1, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d003      	beq.n	8000b8e <HAL_RCC_GetSysClockFreq+0x16>
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d003      	beq.n	8000b92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b8a:	4810      	ldr	r0, [pc, #64]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b9c:	bf14      	ite	ne
 8000b9e:	480c      	ldrne	r0, [pc, #48]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba0:	480a      	ldreq	r0, [pc, #40]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ba6:	bf18      	it	ne
 8000ba8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000baa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bae:	fba1 0100 	umull	r0, r1, r1, r0
 8000bb2:	f7ff fb5d 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bc6:	bd08      	pop	{r3, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	00f42400 	.word	0x00f42400
 8000bd0:	007a1200 	.word	0x007a1200

08000bd4 <HAL_RCC_ClockConfig>:
{
 8000bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bda:	4604      	mov	r4, r0
 8000bdc:	b910      	cbnz	r0, 8000be4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
 8000be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000be4:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <HAL_RCC_ClockConfig+0x124>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	f002 020f 	and.w	r2, r2, #15
 8000bec:	428a      	cmp	r2, r1
 8000bee:	d328      	bcc.n	8000c42 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf0:	6821      	ldr	r1, [r4, #0]
 8000bf2:	078f      	lsls	r7, r1, #30
 8000bf4:	d42d      	bmi.n	8000c52 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bf6:	07c8      	lsls	r0, r1, #31
 8000bf8:	d440      	bmi.n	8000c7c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <HAL_RCC_ClockConfig+0x124>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	f002 020f 	and.w	r2, r2, #15
 8000c02:	4295      	cmp	r5, r2
 8000c04:	d366      	bcc.n	8000cd4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c06:	6822      	ldr	r2, [r4, #0]
 8000c08:	0751      	lsls	r1, r2, #29
 8000c0a:	d46c      	bmi.n	8000ce6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c0c:	0713      	lsls	r3, r2, #28
 8000c0e:	d507      	bpl.n	8000c20 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c10:	4a3a      	ldr	r2, [pc, #232]	; (8000cfc <HAL_RCC_ClockConfig+0x128>)
 8000c12:	6921      	ldr	r1, [r4, #16]
 8000c14:	6893      	ldr	r3, [r2, #8]
 8000c16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c20:	f7ff ffaa 	bl	8000b78 <HAL_RCC_GetSysClockFreq>
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <HAL_RCC_ClockConfig+0x128>)
 8000c26:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <HAL_RCC_ClockConfig+0x12c>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	40d8      	lsrs	r0, r3
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <HAL_RCC_ClockConfig+0x130>)
 8000c34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f002 f9b4 	bl	8002fa4 <HAL_InitTick>
  return HAL_OK;
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c42:	b2ca      	uxtb	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d1c6      	bne.n	8000bde <HAL_RCC_ClockConfig+0xa>
 8000c50:	e7ce      	b.n	8000bf0 <HAL_RCC_ClockConfig+0x1c>
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c58:	bf1e      	ittt	ne
 8000c5a:	689a      	ldrne	r2, [r3, #8]
 8000c5c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c60:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c62:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c64:	bf42      	ittt	mi
 8000c66:	689a      	ldrmi	r2, [r3, #8]
 8000c68:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c6c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	68a0      	ldr	r0, [r4, #8]
 8000c72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c76:	4302      	orrs	r2, r0
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	e7bc      	b.n	8000bf6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c7c:	6862      	ldr	r2, [r4, #4]
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_RCC_ClockConfig+0x128>)
 8000c80:	2a01      	cmp	r2, #1
 8000c82:	d11d      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8a:	d0a8      	beq.n	8000bde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c8c:	4e1b      	ldr	r6, [pc, #108]	; (8000cfc <HAL_RCC_ClockConfig+0x128>)
 8000c8e:	68b3      	ldr	r3, [r6, #8]
 8000c90:	f023 0303 	bic.w	r3, r3, #3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c98:	f7ff fc98 	bl	80005cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ca0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ca2:	68b3      	ldr	r3, [r6, #8]
 8000ca4:	6862      	ldr	r2, [r4, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cae:	d0a4      	beq.n	8000bfa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb0:	f7ff fc8c 	bl	80005cc <HAL_GetTick>
 8000cb4:	1bc0      	subs	r0, r0, r7
 8000cb6:	4540      	cmp	r0, r8
 8000cb8:	d9f3      	bls.n	8000ca2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cba:	2003      	movs	r0, #3
}
 8000cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cc0:	1e91      	subs	r1, r2, #2
 8000cc2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cc6:	d802      	bhi.n	8000cce <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ccc:	e7dd      	b.n	8000c8a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	f013 0f02 	tst.w	r3, #2
 8000cd2:	e7da      	b.n	8000c8a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd4:	b2ea      	uxtb	r2, r5
 8000cd6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	429d      	cmp	r5, r3
 8000ce0:	f47f af7d 	bne.w	8000bde <HAL_RCC_ClockConfig+0xa>
 8000ce4:	e78f      	b.n	8000c06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ce6:	4905      	ldr	r1, [pc, #20]	; (8000cfc <HAL_RCC_ClockConfig+0x128>)
 8000ce8:	68e0      	ldr	r0, [r4, #12]
 8000cea:	688b      	ldr	r3, [r1, #8]
 8000cec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cf0:	4303      	orrs	r3, r0
 8000cf2:	608b      	str	r3, [r1, #8]
 8000cf4:	e78a      	b.n	8000c0c <HAL_RCC_ClockConfig+0x38>
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	080044bd 	.word	0x080044bd
 8000d04:	2000008c 	.word	0x2000008c

08000d08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d16:	6810      	ldr	r0, [r2, #0]
}
 8000d18:	40d8      	lsrs	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	080044cd 	.word	0x080044cd
 8000d24:	2000008c 	.word	0x2000008c

08000d28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d36:	6810      	ldr	r0, [r2, #0]
}
 8000d38:	40d8      	lsrs	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	080044cd 	.word	0x080044cd
 8000d44:	2000008c 	.word	0x2000008c

08000d48 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_RCC_GetClockConfig+0x34>)
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d5c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d64:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d6e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_RCC_GetClockConfig+0x38>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	600b      	str	r3, [r1, #0]
 8000d7a:	4770      	bx	lr
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d84:	6803      	ldr	r3, [r0, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	f042 0201 	orr.w	r2, r2, #1
 8000d8c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	f042 0201 	orr.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000d96:	2000      	movs	r0, #0
 8000d98:	4770      	bx	lr

08000d9a <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8000da4:	6a19      	ldr	r1, [r3, #32]
 8000da6:	f241 1211 	movw	r2, #4369	; 0x1111
 8000daa:	4211      	tst	r1, r2
 8000dac:	d108      	bne.n	8000dc0 <HAL_TIM_Base_Stop_IT+0x26>
 8000dae:	6a19      	ldr	r1, [r3, #32]
 8000db0:	f240 4244 	movw	r2, #1092	; 0x444
 8000db4:	4211      	tst	r1, r2
 8000db6:	bf02      	ittt	eq
 8000db8:	681a      	ldreq	r2, [r3, #0]
 8000dba:	f022 0201 	biceq.w	r2, r2, #1
 8000dbe:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_TIM_OC_DelayElapsedCallback>:
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_TIM_IC_CaptureCallback>:
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000dc8:	4770      	bx	lr

08000dca <HAL_TIM_TriggerCallback>:
 8000dca:	4770      	bx	lr

08000dcc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dcc:	6803      	ldr	r3, [r0, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	0791      	lsls	r1, r2, #30
{
 8000dd2:	b510      	push	{r4, lr}
 8000dd4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dd6:	d50e      	bpl.n	8000df6 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	0792      	lsls	r2, r2, #30
 8000ddc:	d50b      	bpl.n	8000df6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000dde:	f06f 0202 	mvn.w	r2, #2
 8000de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000de4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000de6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000de8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dea:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dec:	d077      	beq.n	8000ede <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000dee:	f7ff ffea 	bl	8000dc6 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000df2:	2300      	movs	r3, #0
 8000df4:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	0750      	lsls	r0, r2, #29
 8000dfc:	d510      	bpl.n	8000e20 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	0751      	lsls	r1, r2, #29
 8000e02:	d50d      	bpl.n	8000e20 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e04:	f06f 0204 	mvn.w	r2, #4
 8000e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e0a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e0c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e0e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e12:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e14:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e16:	d068      	beq.n	8000eea <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e18:	f7ff ffd5 	bl	8000dc6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	0712      	lsls	r2, r2, #28
 8000e26:	d50f      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	0710      	lsls	r0, r2, #28
 8000e2c:	d50c      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e2e:	f06f 0208 	mvn.w	r2, #8
 8000e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e34:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e36:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e38:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e3a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e3c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e3e:	d05a      	beq.n	8000ef6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e40:	f7ff ffc1 	bl	8000dc6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e44:	2300      	movs	r3, #0
 8000e46:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	06d2      	lsls	r2, r2, #27
 8000e4e:	d510      	bpl.n	8000e72 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	06d0      	lsls	r0, r2, #27
 8000e54:	d50d      	bpl.n	8000e72 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e56:	f06f 0210 	mvn.w	r2, #16
 8000e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e5c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e5e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e60:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e64:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e66:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e68:	d04b      	beq.n	8000f02 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e6a:	f7ff ffac 	bl	8000dc6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	07d1      	lsls	r1, r2, #31
 8000e78:	d508      	bpl.n	8000e8c <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	07d2      	lsls	r2, r2, #31
 8000e7e:	d505      	bpl.n	8000e8c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e80:	f06f 0201 	mvn.w	r2, #1
 8000e84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e86:	4620      	mov	r0, r4
 8000e88:	f001 ffae 	bl	8002de8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	0610      	lsls	r0, r2, #24
 8000e92:	d508      	bpl.n	8000ea6 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	0611      	lsls	r1, r2, #24
 8000e98:	d505      	bpl.n	8000ea6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f000 f8d6 	bl	8001052 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	0652      	lsls	r2, r2, #25
 8000eac:	d508      	bpl.n	8000ec0 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	0650      	lsls	r0, r2, #25
 8000eb2:	d505      	bpl.n	8000ec0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000eb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f7ff ff85 	bl	8000dca <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	0691      	lsls	r1, r2, #26
 8000ec6:	d522      	bpl.n	8000f0e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	0692      	lsls	r2, r2, #26
 8000ecc:	d51f      	bpl.n	8000f0e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ece:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000ed2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ed4:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000eda:	f000 b8b9 	b.w	8001050 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ede:	f7ff ff71 	bl	8000dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff ff70 	bl	8000dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ee8:	e783      	b.n	8000df2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eea:	f7ff ff6b 	bl	8000dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff ff6a 	bl	8000dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ef4:	e792      	b.n	8000e1c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ef6:	f7ff ff65 	bl	8000dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff ff64 	bl	8000dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f00:	e7a0      	b.n	8000e44 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f02:	f7ff ff5f 	bl	8000dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f06:	4620      	mov	r0, r4
 8000f08:	f7ff ff5e 	bl	8000dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f0c:	e7af      	b.n	8000e6e <HAL_TIM_IRQHandler+0xa2>
 8000f0e:	bd10      	pop	{r4, pc}

08000f10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000f12:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f14:	4290      	cmp	r0, r2
 8000f16:	d012      	beq.n	8000f3e <TIM_Base_SetConfig+0x2e>
 8000f18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f1c:	d00f      	beq.n	8000f3e <TIM_Base_SetConfig+0x2e>
 8000f1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d00b      	beq.n	8000f3e <TIM_Base_SetConfig+0x2e>
 8000f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d007      	beq.n	8000f3e <TIM_Base_SetConfig+0x2e>
 8000f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d003      	beq.n	8000f3e <TIM_Base_SetConfig+0x2e>
 8000f36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f3a:	4290      	cmp	r0, r2
 8000f3c:	d11d      	bne.n	8000f7a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f44:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <TIM_Base_SetConfig+0xbc>)
 8000f48:	4290      	cmp	r0, r2
 8000f4a:	d104      	bne.n	8000f56 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f4c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f52:	4313      	orrs	r3, r2
 8000f54:	e028      	b.n	8000fa8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f56:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f5a:	d0f7      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <TIM_Base_SetConfig+0xc0>)
 8000f5e:	4290      	cmp	r0, r2
 8000f60:	d0f4      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f66:	4290      	cmp	r0, r2
 8000f68:	d0f0      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f6e:	4290      	cmp	r0, r2
 8000f70:	d0ec      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d0e8      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <TIM_Base_SetConfig+0xc4>)
 8000f7c:	4290      	cmp	r0, r2
 8000f7e:	d0e5      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f84:	4290      	cmp	r0, r2
 8000f86:	d0e1      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d0dd      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f94:	4290      	cmp	r0, r2
 8000f96:	d0d9      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d0d5      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
 8000fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d0d1      	beq.n	8000f4c <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8000fa8:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000faa:	688b      	ldr	r3, [r1, #8]
 8000fac:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fae:	680b      	ldr	r3, [r1, #0]
 8000fb0:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <TIM_Base_SetConfig+0xbc>)
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	d006      	beq.n	8000fc6 <TIM_Base_SetConfig+0xb6>
 8000fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d002      	beq.n	8000fc6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	6143      	str	r3, [r0, #20]
}
 8000fc4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000fc6:	690b      	ldr	r3, [r1, #16]
 8000fc8:	6303      	str	r3, [r0, #48]	; 0x30
 8000fca:	e7f9      	b.n	8000fc0 <TIM_Base_SetConfig+0xb0>
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	40014000 	.word	0x40014000

08000fd8 <HAL_TIM_Base_Init>:
{ 
 8000fd8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000fda:	4604      	mov	r4, r0
 8000fdc:	b1a0      	cbz	r0, 8001008 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000fde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fe6:	b91b      	cbnz	r3, 8000ff0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fe8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000fec:	f001 ff7c 	bl	8002ee8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	1d21      	adds	r1, r4, #4
 8000ffa:	f7ff ff89 	bl	8000f10 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001004:	2000      	movs	r0, #0
 8001006:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001008:	2001      	movs	r0, #1
}
 800100a:	bd10      	pop	{r4, pc}

0800100c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800100c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001010:	2b01      	cmp	r3, #1
{
 8001012:	b510      	push	{r4, lr}
 8001014:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001018:	d018      	beq.n	800104c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800101a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800101e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001020:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001022:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001024:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001026:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800102a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4322      	orrs	r2, r4
 8001030:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001038:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	430a      	orrs	r2, r1
 800103e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001040:	2301      	movs	r3, #1
 8001042:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001046:	2300      	movs	r3, #0
 8001048:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800104c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800104e:	bd10      	pop	{r4, pc}

08001050 <HAL_TIMEx_CommutationCallback>:
 8001050:	4770      	bx	lr

08001052 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001052:	4770      	bx	lr

08001054 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800105c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	f022 0201 	bic.w	r2, r2, #1
 8001064:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001066:	2320      	movs	r3, #32
 8001068:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800106c:	4770      	bx	lr
	...

08001070 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001074:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001076:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001078:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800107a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800107c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001080:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001082:	6133      	str	r3, [r6, #16]
{
 8001084:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001086:	6883      	ldr	r3, [r0, #8]
 8001088:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800108a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800108c:	4303      	orrs	r3, r0
 800108e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001090:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001094:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001096:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800109a:	430b      	orrs	r3, r1
 800109c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800109e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80010a0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80010a2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80010a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80010a8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80010ae:	6173      	str	r3, [r6, #20]
 80010b0:	4b7a      	ldr	r3, [pc, #488]	; (800129c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010b2:	d17c      	bne.n	80011ae <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010b4:	429e      	cmp	r6, r3
 80010b6:	d003      	beq.n	80010c0 <UART_SetConfig+0x50>
 80010b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010bc:	429e      	cmp	r6, r3
 80010be:	d144      	bne.n	800114a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010c0:	f7ff fe32 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 80010c4:	2519      	movs	r5, #25
 80010c6:	fb05 f300 	mul.w	r3, r5, r0
 80010ca:	6860      	ldr	r0, [r4, #4]
 80010cc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010d0:	0040      	lsls	r0, r0, #1
 80010d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80010da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80010de:	f7ff fe23 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 80010e2:	6863      	ldr	r3, [r4, #4]
 80010e4:	4368      	muls	r0, r5
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fbb0 f7f3 	udiv	r7, r0, r3
 80010ec:	f7ff fe1c 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 80010f0:	6863      	ldr	r3, [r4, #4]
 80010f2:	4368      	muls	r0, r5
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80010fe:	fb09 7313 	mls	r3, r9, r3, r7
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	3332      	adds	r3, #50	; 0x32
 8001106:	fbb3 f3f9 	udiv	r3, r3, r9
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001110:	f7ff fe0a 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 8001114:	6862      	ldr	r2, [r4, #4]
 8001116:	4368      	muls	r0, r5
 8001118:	0052      	lsls	r2, r2, #1
 800111a:	fbb0 faf2 	udiv	sl, r0, r2
 800111e:	f7ff fe03 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	4368      	muls	r0, r5
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fbb0 f3f3 	udiv	r3, r0, r3
 800112c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001130:	fb09 a313 	mls	r3, r9, r3, sl
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	3332      	adds	r3, #50	; 0x32
 8001138:	fbb3 f3f9 	udiv	r3, r3, r9
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001142:	443b      	add	r3, r7
 8001144:	60b3      	str	r3, [r6, #8]
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800114a:	f7ff fddd 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800114e:	2519      	movs	r5, #25
 8001150:	fb05 f300 	mul.w	r3, r5, r0
 8001154:	6860      	ldr	r0, [r4, #4]
 8001156:	f04f 0964 	mov.w	r9, #100	; 0x64
 800115a:	0040      	lsls	r0, r0, #1
 800115c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001160:	fbb3 f3f9 	udiv	r3, r3, r9
 8001164:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001168:	f7ff fdce 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800116c:	6863      	ldr	r3, [r4, #4]
 800116e:	4368      	muls	r0, r5
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fbb0 f7f3 	udiv	r7, r0, r3
 8001176:	f7ff fdc7 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800117a:	6863      	ldr	r3, [r4, #4]
 800117c:	4368      	muls	r0, r5
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fbb0 f3f3 	udiv	r3, r0, r3
 8001184:	fbb3 f3f9 	udiv	r3, r3, r9
 8001188:	fb09 7313 	mls	r3, r9, r3, r7
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	3332      	adds	r3, #50	; 0x32
 8001190:	fbb3 f3f9 	udiv	r3, r3, r9
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800119a:	f7ff fdb5 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800119e:	6862      	ldr	r2, [r4, #4]
 80011a0:	4368      	muls	r0, r5
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	fbb0 faf2 	udiv	sl, r0, r2
 80011a8:	f7ff fdae 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 80011ac:	e7b9      	b.n	8001122 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011ae:	429e      	cmp	r6, r3
 80011b0:	d002      	beq.n	80011b8 <UART_SetConfig+0x148>
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <UART_SetConfig+0x230>)
 80011b4:	429e      	cmp	r6, r3
 80011b6:	d140      	bne.n	800123a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011b8:	f7ff fdb6 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 80011bc:	6867      	ldr	r7, [r4, #4]
 80011be:	2519      	movs	r5, #25
 80011c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011c4:	fb05 f300 	mul.w	r3, r5, r0
 80011c8:	00bf      	lsls	r7, r7, #2
 80011ca:	fbb3 f3f7 	udiv	r3, r3, r7
 80011ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d2:	011f      	lsls	r7, r3, #4
 80011d4:	f7ff fda8 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	4368      	muls	r0, r5
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	fbb0 f8f3 	udiv	r8, r0, r3
 80011e2:	f7ff fda1 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	4368      	muls	r0, r5
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f4:	fb09 8313 	mls	r3, r9, r3, r8
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	3332      	adds	r3, #50	; 0x32
 80011fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001200:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001204:	f7ff fd90 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
 8001208:	6862      	ldr	r2, [r4, #4]
 800120a:	4368      	muls	r0, r5
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	fbb0 faf2 	udiv	sl, r0, r2
 8001212:	f7ff fd89 	bl	8000d28 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001216:	6863      	ldr	r3, [r4, #4]
 8001218:	4368      	muls	r0, r5
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001220:	fbb3 f3f9 	udiv	r3, r3, r9
 8001224:	fb09 a313 	mls	r3, r9, r3, sl
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	3332      	adds	r3, #50	; 0x32
 800122c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	ea43 0308 	orr.w	r3, r3, r8
 8001238:	e783      	b.n	8001142 <UART_SetConfig+0xd2>
 800123a:	f7ff fd65 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800123e:	6867      	ldr	r7, [r4, #4]
 8001240:	2519      	movs	r5, #25
 8001242:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001246:	fb05 f300 	mul.w	r3, r5, r0
 800124a:	00bf      	lsls	r7, r7, #2
 800124c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001250:	fbb3 f3f9 	udiv	r3, r3, r9
 8001254:	011f      	lsls	r7, r3, #4
 8001256:	f7ff fd57 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800125a:	6863      	ldr	r3, [r4, #4]
 800125c:	4368      	muls	r0, r5
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fbb0 f8f3 	udiv	r8, r0, r3
 8001264:	f7ff fd50 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	4368      	muls	r0, r5
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001272:	fbb3 f3f9 	udiv	r3, r3, r9
 8001276:	fb09 8313 	mls	r3, r9, r3, r8
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	3332      	adds	r3, #50	; 0x32
 800127e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001282:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001286:	f7ff fd3f 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 800128a:	6862      	ldr	r2, [r4, #4]
 800128c:	4368      	muls	r0, r5
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	fbb0 faf2 	udiv	sl, r0, r2
 8001294:	f7ff fd38 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 8001298:	e7bd      	b.n	8001216 <UART_SetConfig+0x1a6>
 800129a:	bf00      	nop
 800129c:	40011000 	.word	0x40011000
 80012a0:	40011400 	.word	0x40011400

080012a4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	4604      	mov	r4, r0
 80012a8:	460e      	mov	r6, r1
 80012aa:	4617      	mov	r7, r2
 80012ac:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80012ae:	6821      	ldr	r1, [r4, #0]
 80012b0:	680b      	ldr	r3, [r1, #0]
 80012b2:	ea36 0303 	bics.w	r3, r6, r3
 80012b6:	d101      	bne.n	80012bc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012b8:	2000      	movs	r0, #0
}
 80012ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012bc:	1c6b      	adds	r3, r5, #1
 80012be:	d0f7      	beq.n	80012b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012c0:	b995      	cbnz	r5, 80012e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012d4:	2320      	movs	r3, #32
 80012d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80012de:	2300      	movs	r3, #0
 80012e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012e4:	2003      	movs	r0, #3
 80012e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012e8:	f7ff f970 	bl	80005cc <HAL_GetTick>
 80012ec:	1bc0      	subs	r0, r0, r7
 80012ee:	4285      	cmp	r5, r0
 80012f0:	d2dd      	bcs.n	80012ae <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80012f2:	e7e6      	b.n	80012c2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080012f4 <HAL_UART_Init>:
{
 80012f4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012f6:	4604      	mov	r4, r0
 80012f8:	b340      	cbz	r0, 800134c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80012fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001302:	b91b      	cbnz	r3, 800130c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001304:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001308:	f001 fe0c 	bl	8002f24 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800130c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800130e:	2324      	movs	r3, #36	; 0x24
 8001310:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001314:	68d3      	ldr	r3, [r2, #12]
 8001316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800131a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff fea7 	bl	8001070 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800132a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001332:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800133a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800133c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800133e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001340:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001342:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001346:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800134a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
}
 800134e:	bd10      	pop	{r4, pc}

08001350 <HAL_UART_Transmit>:
{
 8001350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001354:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001356:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800135a:	2b20      	cmp	r3, #32
{
 800135c:	4604      	mov	r4, r0
 800135e:	460d      	mov	r5, r1
 8001360:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001362:	d14f      	bne.n	8001404 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001364:	2900      	cmp	r1, #0
 8001366:	d04a      	beq.n	80013fe <HAL_UART_Transmit+0xae>
 8001368:	2a00      	cmp	r2, #0
 800136a:	d048      	beq.n	80013fe <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800136c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001370:	2b01      	cmp	r3, #1
 8001372:	d047      	beq.n	8001404 <HAL_UART_Transmit+0xb4>
 8001374:	2301      	movs	r3, #1
 8001376:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800137a:	2300      	movs	r3, #0
 800137c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800137e:	2321      	movs	r3, #33	; 0x21
 8001380:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001384:	f7ff f922 	bl	80005cc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001388:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800138c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800138e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001392:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001394:	b29b      	uxth	r3, r3
 8001396:	b96b      	cbnz	r3, 80013b4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4632      	mov	r2, r6
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff80 	bl	80012a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013a4:	b9b0      	cbnz	r0, 80013d4 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80013a6:	2320      	movs	r3, #32
 80013a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80013ac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80013b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013b4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013c2:	4632      	mov	r2, r6
 80013c4:	463b      	mov	r3, r7
 80013c6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013ca:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013cc:	d10e      	bne.n	80013ec <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ce:	f7ff ff69 	bl	80012a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013d2:	b110      	cbz	r0, 80013da <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80013d4:	2003      	movs	r0, #3
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013da:	882b      	ldrh	r3, [r5, #0]
 80013dc:	6822      	ldr	r2, [r4, #0]
 80013de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80013e4:	6923      	ldr	r3, [r4, #16]
 80013e6:	b943      	cbnz	r3, 80013fa <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80013e8:	3502      	adds	r5, #2
 80013ea:	e7d2      	b.n	8001392 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ec:	f7ff ff5a 	bl	80012a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1ef      	bne.n	80013d4 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	782a      	ldrb	r2, [r5, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	3501      	adds	r5, #1
 80013fc:	e7c9      	b.n	8001392 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
 8001400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001404:	2002      	movs	r0, #2
}
 8001406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800140a <HAL_UART_TxCpltCallback>:
 800140a:	4770      	bx	lr

0800140c <HAL_UART_RxCpltCallback>:
 800140c:	4770      	bx	lr

0800140e <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800140e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001412:	2b22      	cmp	r3, #34	; 0x22
{
 8001414:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001416:	d132      	bne.n	800147e <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001418:	6883      	ldr	r3, [r0, #8]
 800141a:	6901      	ldr	r1, [r0, #16]
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001422:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001424:	d11f      	bne.n	8001466 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001426:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001428:	b9c9      	cbnz	r1, 800145e <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800142a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800142e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001432:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001434:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001436:	3c01      	subs	r4, #1
 8001438:	b2a4      	uxth	r4, r4
 800143a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800143c:	b96c      	cbnz	r4, 800145a <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800143e:	6803      	ldr	r3, [r0, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001446:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001450:	2320      	movs	r3, #32
 8001452:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001456:	f7ff ffd9 	bl	800140c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800145a:	2000      	movs	r0, #0
}
 800145c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f823 2b01 	strh.w	r2, [r3], #1
 8001464:	e7e5      	b.n	8001432 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001466:	b921      	cbnz	r1, 8001472 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001468:	1c59      	adds	r1, r3, #1
 800146a:	6852      	ldr	r2, [r2, #4]
 800146c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e7e0      	b.n	8001434 <UART_Receive_IT+0x26>
 8001472:	6852      	ldr	r2, [r2, #4]
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	6281      	str	r1, [r0, #40]	; 0x28
 8001478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800147c:	e7f7      	b.n	800146e <UART_Receive_IT+0x60>
    return HAL_BUSY;
 800147e:	2002      	movs	r0, #2
 8001480:	bd10      	pop	{r4, pc}

08001482 <HAL_UART_ErrorCallback>:
 8001482:	4770      	bx	lr

08001484 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001484:	6803      	ldr	r3, [r0, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001488:	68d9      	ldr	r1, [r3, #12]
{
 800148a:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 800148c:	0716      	lsls	r6, r2, #28
{
 800148e:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001490:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001492:	d107      	bne.n	80014a4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001494:	0696      	lsls	r6, r2, #26
 8001496:	d55a      	bpl.n	800154e <HAL_UART_IRQHandler+0xca>
 8001498:	068d      	lsls	r5, r1, #26
 800149a:	d558      	bpl.n	800154e <HAL_UART_IRQHandler+0xca>
}
 800149c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80014a0:	f7ff bfb5 	b.w	800140e <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80014a4:	f015 0501 	ands.w	r5, r5, #1
 80014a8:	d102      	bne.n	80014b0 <HAL_UART_IRQHandler+0x2c>
 80014aa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80014ae:	d04e      	beq.n	800154e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80014b0:	07d3      	lsls	r3, r2, #31
 80014b2:	d505      	bpl.n	80014c0 <HAL_UART_IRQHandler+0x3c>
 80014b4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80014b6:	bf42      	ittt	mi
 80014b8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80014ba:	f043 0301 	orrmi.w	r3, r3, #1
 80014be:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014c0:	0750      	lsls	r0, r2, #29
 80014c2:	d504      	bpl.n	80014ce <HAL_UART_IRQHandler+0x4a>
 80014c4:	b11d      	cbz	r5, 80014ce <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80014c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014ce:	0793      	lsls	r3, r2, #30
 80014d0:	d504      	bpl.n	80014dc <HAL_UART_IRQHandler+0x58>
 80014d2:	b11d      	cbz	r5, 80014dc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80014d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014dc:	0716      	lsls	r6, r2, #28
 80014de:	d504      	bpl.n	80014ea <HAL_UART_IRQHandler+0x66>
 80014e0:	b11d      	cbz	r5, 80014ea <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80014e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80014ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d066      	beq.n	80015be <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014f0:	0695      	lsls	r5, r2, #26
 80014f2:	d504      	bpl.n	80014fe <HAL_UART_IRQHandler+0x7a>
 80014f4:	0688      	lsls	r0, r1, #26
 80014f6:	d502      	bpl.n	80014fe <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff ff88 	bl	800140e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001502:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001504:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001506:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001508:	d402      	bmi.n	8001510 <HAL_UART_IRQHandler+0x8c>
 800150a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800150e:	d01a      	beq.n	8001546 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001510:	f7ff fda0 	bl	8001054 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	0652      	lsls	r2, r2, #25
 800151a:	d510      	bpl.n	800153e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800151c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800151e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001524:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001526:	b150      	cbz	r0, 800153e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_UART_IRQHandler+0x13c>)
 800152a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800152c:	f7ff f8a6 	bl	800067c <HAL_DMA_Abort_IT>
 8001530:	2800      	cmp	r0, #0
 8001532:	d044      	beq.n	80015be <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001534:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800153a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800153c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff ff9f 	bl	8001482 <HAL_UART_ErrorCallback>
 8001544:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001546:	f7ff ff9c 	bl	8001482 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800154c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800154e:	0616      	lsls	r6, r2, #24
 8001550:	d527      	bpl.n	80015a2 <HAL_UART_IRQHandler+0x11e>
 8001552:	060d      	lsls	r5, r1, #24
 8001554:	d525      	bpl.n	80015a2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001556:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800155a:	2a21      	cmp	r2, #33	; 0x21
 800155c:	d12f      	bne.n	80015be <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800155e:	68a2      	ldr	r2, [r4, #8]
 8001560:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001564:	6a22      	ldr	r2, [r4, #32]
 8001566:	d117      	bne.n	8001598 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001568:	8811      	ldrh	r1, [r2, #0]
 800156a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800156e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001570:	6921      	ldr	r1, [r4, #16]
 8001572:	b979      	cbnz	r1, 8001594 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001574:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001576:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001578:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800157a:	3a01      	subs	r2, #1
 800157c:	b292      	uxth	r2, r2
 800157e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001580:	b9ea      	cbnz	r2, 80015be <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001588:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001594:	3201      	adds	r2, #1
 8001596:	e7ee      	b.n	8001576 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001598:	1c51      	adds	r1, r2, #1
 800159a:	6221      	str	r1, [r4, #32]
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	e7ea      	b.n	8001578 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80015a2:	0650      	lsls	r0, r2, #25
 80015a4:	d50b      	bpl.n	80015be <HAL_UART_IRQHandler+0x13a>
 80015a6:	064a      	lsls	r2, r1, #25
 80015a8:	d509      	bpl.n	80015be <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015b0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80015b2:	2320      	movs	r3, #32
 80015b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff ff26 	bl	800140a <HAL_UART_TxCpltCallback>
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	080015c5 	.word	0x080015c5

080015c4 <UART_DMAAbortOnError>:
{
 80015c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80015cc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80015ce:	f7ff ff58 	bl	8001482 <HAL_UART_ErrorCallback>
 80015d2:	bd08      	pop	{r3, pc}

080015d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80015d4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80015d6:	f000 fbd7 	bl	8001d88 <vTaskStartScheduler>
  
  return osOK;
}
 80015da:	2000      	movs	r0, #0
 80015dc:	bd08      	pop	{r3, pc}

080015de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015de:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015e0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80015e4:	8a02      	ldrh	r2, [r0, #16]
{
 80015e6:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015e8:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80015ec:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80015ee:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80015f0:	bf14      	ite	ne
 80015f2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80015f4:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015f6:	a803      	add	r0, sp, #12
 80015f8:	9001      	str	r0, [sp, #4]
 80015fa:	9400      	str	r4, [sp, #0]
 80015fc:	4628      	mov	r0, r5
 80015fe:	f000 faf3 	bl	8001be8 <xTaskCreate>
 8001602:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001604:	bf0c      	ite	eq
 8001606:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001608:	2000      	movne	r0, #0
}
 800160a:	b005      	add	sp, #20
 800160c:	bd30      	pop	{r4, r5, pc}

0800160e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800160e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001610:	2800      	cmp	r0, #0
 8001612:	bf08      	it	eq
 8001614:	2001      	moveq	r0, #1
 8001616:	f000 fd05 	bl	8002024 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800161a:	2000      	movs	r0, #0
 800161c:	bd08      	pop	{r3, pc}

0800161e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800161e:	f100 0308 	add.w	r3, r0, #8
 8001622:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001628:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800162a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800162c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800162e:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001630:	6003      	str	r3, [r0, #0]
 8001632:	4770      	bx	lr

08001634 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001634:	2300      	movs	r3, #0
 8001636:	6103      	str	r3, [r0, #16]
 8001638:	4770      	bx	lr

0800163a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800163a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800163c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001646:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001648:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800164a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800164c:	3301      	adds	r3, #1
 800164e:	6003      	str	r3, [r0, #0]
 8001650:	4770      	bx	lr

08001652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001652:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001654:	1c53      	adds	r3, r2, #1
{
 8001656:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001658:	d10a      	bne.n	8001670 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800165a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001660:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001662:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001664:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001666:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001668:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800166a:	3301      	adds	r3, #1
 800166c:	6003      	str	r3, [r0, #0]
 800166e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001670:	f100 0308 	add.w	r3, r0, #8
 8001674:	685c      	ldr	r4, [r3, #4]
 8001676:	6825      	ldr	r5, [r4, #0]
 8001678:	42aa      	cmp	r2, r5
 800167a:	d3ef      	bcc.n	800165c <vListInsert+0xa>
 800167c:	4623      	mov	r3, r4
 800167e:	e7f9      	b.n	8001674 <vListInsert+0x22>

08001680 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001680:	6841      	ldr	r1, [r0, #4]
 8001682:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001684:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001686:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001688:	6882      	ldr	r2, [r0, #8]
 800168a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001690:	bf08      	it	eq
 8001692:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001694:	2200      	movs	r2, #0
 8001696:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	3801      	subs	r0, #1
 800169c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800169e:	4770      	bx	lr

080016a0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <prvTaskExitError+0x2c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	d008      	beq.n	80016ba <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	e7fe      	b.n	80016b8 <prvTaskExitError+0x18>
 80016ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016be:	f383 8811 	msr	BASEPRI, r3
 80016c2:	f3bf 8f6f 	isb	sy
 80016c6:	f3bf 8f4f 	dsb	sy
 80016ca:	e7fe      	b.n	80016ca <prvTaskExitError+0x2a>
 80016cc:	20000004 	.word	0x20000004

080016d0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <prvPortStartFirstTask+0x1c>)
 80016d2:	6800      	ldr	r0, [r0, #0]
 80016d4:	6800      	ldr	r0, [r0, #0]
 80016d6:	f380 8808 	msr	MSP, r0
 80016da:	b662      	cpsie	i
 80016dc:	b661      	cpsie	f
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	f3bf 8f6f 	isb	sy
 80016e6:	df00      	svc	0
 80016e8:	bf00      	nop
 80016ea:	0000      	.short	0x0000
 80016ec:	e000ed08 	.word	0xe000ed08

080016f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80016f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001700 <vPortEnableVFP+0x10>
 80016f4:	6801      	ldr	r1, [r0, #0]
 80016f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016fa:	6001      	str	r1, [r0, #0]
 80016fc:	4770      	bx	lr
 80016fe:	0000      	.short	0x0000
 8001700:	e000ed88 	.word	0xe000ed88

08001704 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001708:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <pxPortInitialiseStack+0x28>)
 800170e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001712:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001716:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800171a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800171e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001722:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001726:	3844      	subs	r0, #68	; 0x44
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	080016a1 	.word	0x080016a1

08001730 <SVC_Handler>:
	__asm volatile (
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <pxCurrentTCBConst2>)
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	6808      	ldr	r0, [r1, #0]
 8001736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800173a:	f380 8809 	msr	PSP, r0
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	f380 8811 	msr	BASEPRI, r0
 800174a:	4770      	bx	lr
 800174c:	f3af 8000 	nop.w

08001750 <pxCurrentTCBConst2>:
 8001750:	20003d30 	.word	0x20003d30

08001754 <vPortEnterCritical>:
 8001754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001758:	f383 8811 	msr	BASEPRI, r3
 800175c:	f3bf 8f6f 	isb	sy
 8001760:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <vPortEnterCritical+0x3c>)
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800176a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800176c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800176e:	d10d      	bne.n	800178c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <vPortEnterCritical+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001778:	d008      	beq.n	800178c <vPortEnterCritical+0x38>
 800177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	e7fe      	b.n	800178a <vPortEnterCritical+0x36>
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000004 	.word	0x20000004
 8001794:	e000ed04 	.word	0xe000ed04

08001798 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <vPortExitCritical+0x24>)
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	b943      	cbnz	r3, 80017b0 <vPortExitCritical+0x18>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	e7fe      	b.n	80017ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80017b0:	3b01      	subs	r3, #1
 80017b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80017b4:	b90b      	cbnz	r3, 80017ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	4770      	bx	lr
 80017bc:	20000004 	.word	0x20000004

080017c0 <PendSV_Handler>:
	__asm volatile
 80017c0:	f3ef 8009 	mrs	r0, PSP
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <pxCurrentTCBConst>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f01e 0f10 	tst.w	lr, #16
 80017d0:	bf08      	it	eq
 80017d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80017d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017da:	6010      	str	r0, [r2, #0]
 80017dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80017e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017e4:	f380 8811 	msr	BASEPRI, r0
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	f3bf 8f6f 	isb	sy
 80017f0:	f000 fc76 	bl	80020e0 <vTaskSwitchContext>
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f380 8811 	msr	BASEPRI, r0
 80017fc:	bc08      	pop	{r3}
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	6808      	ldr	r0, [r1, #0]
 8001802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001806:	f01e 0f10 	tst.w	lr, #16
 800180a:	bf08      	it	eq
 800180c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001810:	f380 8809 	msr	PSP, r0
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w

08001820 <pxCurrentTCBConst>:
 8001820:	20003d30 	.word	0x20003d30

08001824 <SysTick_Handler>:
{
 8001824:	b508      	push	{r3, lr}
	__asm volatile
 8001826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001836:	f000 faeb 	bl	8001e10 <xTaskIncrementTick>
 800183a:	b118      	cbz	r0, 8001844 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <SysTick_Handler+0x28>)
 800183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001842:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001844:	2300      	movs	r3, #0
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	bd08      	pop	{r3, pc}
 800184c:	e000ed04 	.word	0xe000ed04

08001850 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <vPortSetupTimerInterrupt+0x1c>)
 8001852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fbb3 f3f2 	udiv	r3, r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <vPortSetupTimerInterrupt+0x20>)
 800185e:	3b01      	subs	r3, #1
 8001860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <vPortSetupTimerInterrupt+0x24>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000008c 	.word	0x2000008c
 8001870:	e000e014 	.word	0xe000e014
 8001874:	e000e010 	.word	0xe000e010

08001878 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <xPortStartScheduler+0xc8>)
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <xPortStartScheduler+0xcc>)
{
 800187c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	4291      	cmp	r1, r2
 8001882:	d108      	bne.n	8001896 <xPortStartScheduler+0x1e>
	__asm volatile
 8001884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001888:	f383 8811 	msr	BASEPRI, r3
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f3bf 8f4f 	dsb	sy
 8001894:	e7fe      	b.n	8001894 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <xPortStartScheduler+0xd0>)
 800189a:	429a      	cmp	r2, r3
 800189c:	d108      	bne.n	80018b0 <xPortStartScheduler+0x38>
 800189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a2:	f383 8811 	msr	BASEPRI, r3
 80018a6:	f3bf 8f6f 	isb	sy
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	e7fe      	b.n	80018ae <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <xPortStartScheduler+0xd4>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018b8:	22ff      	movs	r2, #255	; 0xff
 80018ba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018bc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ce:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <xPortStartScheduler+0xdc>)
 80018d2:	2207      	movs	r2, #7
 80018d4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018d6:	2100      	movs	r1, #0
 80018d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80018dc:	0600      	lsls	r0, r0, #24
 80018de:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80018e2:	d423      	bmi.n	800192c <xPortStartScheduler+0xb4>
 80018e4:	b101      	cbz	r1, 80018e8 <xPortStartScheduler+0x70>
 80018e6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80018ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80018f0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80018f2:	9b01      	ldr	r3, [sp, #4]
 80018f4:	4a15      	ldr	r2, [pc, #84]	; (800194c <xPortStartScheduler+0xd4>)
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <xPortStartScheduler+0xe0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001902:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800190a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800190c:	f7ff ffa0 	bl	8001850 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <xPortStartScheduler+0xe4>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001916:	f7ff feeb 	bl	80016f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <xPortStartScheduler+0xe8>)
 800191c:	6813      	ldr	r3, [r2, #0]
 800191e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001922:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001924:	f7ff fed4 	bl	80016d0 <prvPortStartFirstTask>
	prvTaskExitError();
 8001928:	f7ff feba 	bl	80016a0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800192c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001930:	0052      	lsls	r2, r2, #1
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f88d 2003 	strb.w	r2, [sp, #3]
 8001938:	2101      	movs	r1, #1
 800193a:	4622      	mov	r2, r4
 800193c:	e7cc      	b.n	80018d8 <xPortStartScheduler+0x60>
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	410fc271 	.word	0x410fc271
 8001948:	410fc270 	.word	0x410fc270
 800194c:	e000e400 	.word	0xe000e400
 8001950:	20000110 	.word	0x20000110
 8001954:	20000114 	.word	0x20000114
 8001958:	e000ed20 	.word	0xe000ed20
 800195c:	20000004 	.word	0x20000004
 8001960:	e000ef34 	.word	0xe000ef34

08001964 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001964:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <prvInsertBlockIntoFreeList+0x40>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4282      	cmp	r2, r0
 800196c:	d318      	bcc.n	80019a0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800196e:	685c      	ldr	r4, [r3, #4]
 8001970:	1919      	adds	r1, r3, r4
 8001972:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001974:	bf01      	itttt	eq
 8001976:	6841      	ldreq	r1, [r0, #4]
 8001978:	4618      	moveq	r0, r3
 800197a:	1909      	addeq	r1, r1, r4
 800197c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800197e:	6844      	ldr	r4, [r0, #4]
 8001980:	1901      	adds	r1, r0, r4
 8001982:	428a      	cmp	r2, r1
 8001984:	d107      	bne.n	8001996 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <prvInsertBlockIntoFreeList+0x44>)
 8001988:	6809      	ldr	r1, [r1, #0]
 800198a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800198c:	bf1f      	itttt	ne
 800198e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001990:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001992:	1909      	addne	r1, r1, r4
 8001994:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001996:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001998:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800199a:	bf18      	it	ne
 800199c:	6018      	strne	r0, [r3, #0]
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	4613      	mov	r3, r2
 80019a2:	e7e1      	b.n	8001968 <prvInsertBlockIntoFreeList+0x4>
 80019a4:	20003d28 	.word	0x20003d28
 80019a8:	20000118 	.word	0x20000118

080019ac <pvPortMalloc>:
{
 80019ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80019b2:	f000 fa25 	bl	8001e00 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80019b6:	493e      	ldr	r1, [pc, #248]	; (8001ab0 <pvPortMalloc+0x104>)
 80019b8:	4d3e      	ldr	r5, [pc, #248]	; (8001ab4 <pvPortMalloc+0x108>)
 80019ba:	680b      	ldr	r3, [r1, #0]
 80019bc:	bb0b      	cbnz	r3, 8001a02 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80019be:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019c0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019c2:	bf1f      	itttt	ne
 80019c4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019c6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019ca:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80019ce:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019d0:	bf14      	ite	ne
 80019d2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019d4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019d8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80019da:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019dc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019e0:	4e36      	ldr	r6, [pc, #216]	; (8001abc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80019e2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80019e4:	2000      	movs	r0, #0
 80019e6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019e8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80019ea:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019ec:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019ee:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019f0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019f4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019f6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <pvPortMalloc+0x118>)
 80019fa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a00:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a02:	682f      	ldr	r7, [r5, #0]
 8001a04:	4227      	tst	r7, r4
 8001a06:	d116      	bne.n	8001a36 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d041      	beq.n	8001a90 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001a0c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a10:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a12:	bf1c      	itt	ne
 8001a14:	f023 0307 	bicne.w	r3, r3, #7
 8001a18:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a1a:	b163      	cbz	r3, 8001a36 <pvPortMalloc+0x8a>
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <pvPortMalloc+0x118>)
 8001a1e:	6816      	ldr	r6, [r2, #0]
 8001a20:	42b3      	cmp	r3, r6
 8001a22:	4690      	mov	r8, r2
 8001a24:	d807      	bhi.n	8001a36 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <pvPortMalloc+0x110>)
 8001a28:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a2a:	6868      	ldr	r0, [r5, #4]
 8001a2c:	4283      	cmp	r3, r0
 8001a2e:	d804      	bhi.n	8001a3a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001a30:	6809      	ldr	r1, [r1, #0]
 8001a32:	428d      	cmp	r5, r1
 8001a34:	d107      	bne.n	8001a46 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001a36:	2400      	movs	r4, #0
 8001a38:	e02a      	b.n	8001a90 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a3a:	682c      	ldr	r4, [r5, #0]
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d0f7      	beq.n	8001a30 <pvPortMalloc+0x84>
 8001a40:	462a      	mov	r2, r5
 8001a42:	4625      	mov	r5, r4
 8001a44:	e7f1      	b.n	8001a2a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a46:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a48:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a4a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a4c:	1ac2      	subs	r2, r0, r3
 8001a4e:	2a10      	cmp	r2, #16
 8001a50:	d90f      	bls.n	8001a72 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a52:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a54:	0741      	lsls	r1, r0, #29
 8001a56:	d008      	beq.n	8001a6a <pvPortMalloc+0xbe>
 8001a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	e7fe      	b.n	8001a68 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a6a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a6c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a6e:	f7ff ff79 	bl	8001964 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a72:	4913      	ldr	r1, [pc, #76]	; (8001ac0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a74:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a76:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a78:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a7a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a7c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001a7e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a82:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a86:	bf38      	it	cc
 8001a88:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a8a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a8c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a8e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001a90:	f000 fa50 	bl	8001f34 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a94:	0763      	lsls	r3, r4, #29
 8001a96:	d008      	beq.n	8001aaa <pvPortMalloc+0xfe>
 8001a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	e7fe      	b.n	8001aa8 <pvPortMalloc+0xfc>
}
 8001aaa:	4620      	mov	r0, r4
 8001aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ab0:	20000118 	.word	0x20000118
 8001ab4:	20003d1c 	.word	0x20003d1c
 8001ab8:	2000011c 	.word	0x2000011c
 8001abc:	20003d28 	.word	0x20003d28
 8001ac0:	20003d24 	.word	0x20003d24
 8001ac4:	20003d20 	.word	0x20003d20

08001ac8 <vPortFree>:
{
 8001ac8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001aca:	4604      	mov	r4, r0
 8001acc:	b370      	cbz	r0, 8001b2c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <vPortFree+0x68>)
 8001ad0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4213      	tst	r3, r2
 8001ad8:	d108      	bne.n	8001aec <vPortFree+0x24>
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	e7fe      	b.n	8001aea <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001aec:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001af0:	b141      	cbz	r1, 8001b04 <vPortFree+0x3c>
 8001af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	f3bf 8f6f 	isb	sy
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	e7fe      	b.n	8001b02 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b04:	ea23 0302 	bic.w	r3, r3, r2
 8001b08:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001b0c:	f000 f978 	bl	8001e00 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <vPortFree+0x6c>)
 8001b12:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001b16:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b18:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b1c:	440b      	add	r3, r1
 8001b1e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b20:	f7ff ff20 	bl	8001964 <prvInsertBlockIntoFreeList>
}
 8001b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001b28:	f000 ba04 	b.w	8001f34 <xTaskResumeAll>
 8001b2c:	bd10      	pop	{r4, pc}
 8001b2e:	bf00      	nop
 8001b30:	20003d1c 	.word	0x20003d1c
 8001b34:	20003d20 	.word	0x20003d20

08001b38 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <prvResetNextTaskUnblockTime+0x1c>)
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <prvResetNextTaskUnblockTime+0x20>)
 8001b40:	b919      	cbnz	r1, 8001b4a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b4e:	68d2      	ldr	r2, [r2, #12]
 8001b50:	6852      	ldr	r2, [r2, #4]
 8001b52:	e7f8      	b.n	8001b46 <prvResetNextTaskUnblockTime+0xe>
 8001b54:	20003d34 	.word	0x20003d34
 8001b58:	20003e0c 	.word	0x20003e0c

08001b5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b60:	4e1b      	ldr	r6, [pc, #108]	; (8001bd0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001b62:	681d      	ldr	r5, [r3, #0]
{
 8001b64:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b66:	6830      	ldr	r0, [r6, #0]
 8001b68:	3004      	adds	r0, #4
{
 8001b6a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b6c:	f7ff fd88 	bl	8001680 <uxListRemove>
 8001b70:	4633      	mov	r3, r6
 8001b72:	b940      	cbnz	r0, 8001b86 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001b74:	6831      	ldr	r1, [r6, #0]
 8001b76:	4e17      	ldr	r6, [pc, #92]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001b78:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001b7a:	6832      	ldr	r2, [r6, #0]
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	4088      	lsls	r0, r1
 8001b80:	ea22 0200 	bic.w	r2, r2, r0
 8001b84:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b86:	1c62      	adds	r2, r4, #1
 8001b88:	d107      	bne.n	8001b9a <prvAddCurrentTaskToDelayedList+0x3e>
 8001b8a:	b137      	cbz	r7, 8001b9a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001b90:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b96:	f7ff bd50 	b.w	800163a <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001b9a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b9c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001b9e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ba0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001ba2:	d907      	bls.n	8001bb4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <prvAddCurrentTaskToDelayedList+0x80>)
 8001ba6:	6810      	ldr	r0, [r2, #0]
 8001ba8:	6819      	ldr	r1, [r3, #0]
}
 8001baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bae:	3104      	adds	r1, #4
 8001bb0:	f7ff bd4f 	b.w	8001652 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001bb6:	6810      	ldr	r0, [r2, #0]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	3104      	adds	r1, #4
 8001bbc:	f7ff fd49 	bl	8001652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001bc6:	bf38      	it	cc
 8001bc8:	601c      	strcc	r4, [r3, #0]
 8001bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bcc:	20003e54 	.word	0x20003e54
 8001bd0:	20003d30 	.word	0x20003d30
 8001bd4:	20003ddc 	.word	0x20003ddc
 8001bd8:	20003e2c 	.word	0x20003e2c
 8001bdc:	20003d38 	.word	0x20003d38
 8001be0:	20003d34 	.word	0x20003d34
 8001be4:	20003e0c 	.word	0x20003e0c

08001be8 <xTaskCreate>:
	{
 8001be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bec:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001bf0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bf2:	4650      	mov	r0, sl
	{
 8001bf4:	460f      	mov	r7, r1
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bfa:	f7ff fed7 	bl	80019ac <pvPortMalloc>
			if( pxStack != NULL )
 8001bfe:	4605      	mov	r5, r0
 8001c00:	2800      	cmp	r0, #0
 8001c02:	f000 8096 	beq.w	8001d32 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c06:	2054      	movs	r0, #84	; 0x54
 8001c08:	f7ff fed0 	bl	80019ac <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	f000 808c 	beq.w	8001d2c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c14:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001c18:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c1a:	4455      	add	r5, sl
 8001c1c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001c1e:	f025 0a07 	bic.w	sl, r5, #7
 8001c22:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001c26:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c28:	7859      	ldrb	r1, [r3, #1]
 8001c2a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001c2e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001c32:	b109      	cbz	r1, 8001c38 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c34:	42bb      	cmp	r3, r7
 8001c36:	d1f7      	bne.n	8001c28 <xTaskCreate+0x40>
 8001c38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001c3a:	2d06      	cmp	r5, #6
 8001c3c:	bf28      	it	cs
 8001c3e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c40:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c44:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001c46:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001c48:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c4a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c4c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001c50:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c54:	f7ff fcee 	bl	8001634 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c58:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c5c:	f104 0018 	add.w	r0, r4, #24
 8001c60:	f7ff fce8 	bl	8001634 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001c64:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c68:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c6a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c6c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c6e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c72:	464a      	mov	r2, r9
 8001c74:	4641      	mov	r1, r8
 8001c76:	4650      	mov	r0, sl
 8001c78:	f7ff fd44 	bl	8001704 <pxPortInitialiseStack>
 8001c7c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001c7e:	b106      	cbz	r6, 8001c82 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c80:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001c82:	f7ff fd67 	bl	8001754 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001c88:	4e32      	ldr	r6, [pc, #200]	; (8001d54 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001d80 <xTaskCreate+0x198>
 8001c90:	3201      	adds	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001c94:	6835      	ldr	r5, [r6, #0]
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	d14e      	bne.n	8001d38 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001c9a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d11d      	bne.n	8001cde <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ca2:	eb08 0005 	add.w	r0, r8, r5
 8001ca6:	3514      	adds	r5, #20
 8001ca8:	f7ff fcb9 	bl	800161e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cac:	2d8c      	cmp	r5, #140	; 0x8c
 8001cae:	d1f8      	bne.n	8001ca2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001cb0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001d84 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001cb4:	4d28      	ldr	r5, [pc, #160]	; (8001d58 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001cb6:	4648      	mov	r0, r9
 8001cb8:	f7ff fcb1 	bl	800161e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	f7ff fcae 	bl	800161e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001cc2:	4826      	ldr	r0, [pc, #152]	; (8001d5c <xTaskCreate+0x174>)
 8001cc4:	f7ff fcab 	bl	800161e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001cc8:	4825      	ldr	r0, [pc, #148]	; (8001d60 <xTaskCreate+0x178>)
 8001cca:	f7ff fca8 	bl	800161e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001cce:	4825      	ldr	r0, [pc, #148]	; (8001d64 <xTaskCreate+0x17c>)
 8001cd0:	f7ff fca5 	bl	800161e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <xTaskCreate+0x180>)
 8001cd6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <xTaskCreate+0x184>)
 8001cdc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001cde:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001ce0:	4924      	ldr	r1, [pc, #144]	; (8001d74 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001ce2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ce4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001cea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cec:	2501      	movs	r5, #1
 8001cee:	fa05 f302 	lsl.w	r3, r5, r2
 8001cf2:	4303      	orrs	r3, r0
 8001cf4:	2014      	movs	r0, #20
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	fb00 8002 	mla	r0, r0, r2, r8
 8001cfc:	4639      	mov	r1, r7
 8001cfe:	f7ff fc9c 	bl	800163a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d02:	f7ff fd49 	bl	8001798 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <xTaskCreate+0x190>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b163      	cbz	r3, 8001d26 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d0c:	6833      	ldr	r3, [r6, #0]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d207      	bcs.n	8001d26 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <xTaskCreate+0x194>)
 8001d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	f3bf 8f6f 	isb	sy
	}
 8001d26:	4628      	mov	r0, r5
 8001d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f7ff fecb 	bl	8001ac8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d36:	e7f6      	b.n	8001d26 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <xTaskCreate+0x190>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ce      	bne.n	8001cde <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d40:	6833      	ldr	r3, [r6, #0]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d46:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001d48:	bf98      	it	ls
 8001d4a:	6034      	strls	r4, [r6, #0]
 8001d4c:	e7c7      	b.n	8001cde <xTaskCreate+0xf6>
 8001d4e:	bf00      	nop
 8001d50:	20003dc8 	.word	0x20003dc8
 8001d54:	20003d30 	.word	0x20003d30
 8001d58:	20003df4 	.word	0x20003df4
 8001d5c:	20003e14 	.word	0x20003e14
 8001d60:	20003e40 	.word	0x20003e40
 8001d64:	20003e2c 	.word	0x20003e2c
 8001d68:	20003d34 	.word	0x20003d34
 8001d6c:	20003d38 	.word	0x20003d38
 8001d70:	20003dd8 	.word	0x20003dd8
 8001d74:	20003ddc 	.word	0x20003ddc
 8001d78:	20003e28 	.word	0x20003e28
 8001d7c:	e000ed04 	.word	0xe000ed04
 8001d80:	20003d3c 	.word	0x20003d3c
 8001d84:	20003de0 	.word	0x20003de0

08001d88 <vTaskStartScheduler>:
{
 8001d88:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <vTaskStartScheduler+0x60>)
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2400      	movs	r4, #0
 8001d90:	9400      	str	r4, [sp, #0]
 8001d92:	4623      	mov	r3, r4
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	4915      	ldr	r1, [pc, #84]	; (8001dec <vTaskStartScheduler+0x64>)
 8001d98:	4815      	ldr	r0, [pc, #84]	; (8001df0 <vTaskStartScheduler+0x68>)
 8001d9a:	f7ff ff25 	bl	8001be8 <xTaskCreate>
	if( xReturn == pdPASS )
 8001d9e:	2801      	cmp	r0, #1
 8001da0:	d114      	bne.n	8001dcc <vTaskStartScheduler+0x44>
 8001da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <vTaskStartScheduler+0x6c>)
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <vTaskStartScheduler+0x70>)
 8001dbc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <vTaskStartScheduler+0x74>)
 8001dc0:	601c      	str	r4, [r3, #0]
}
 8001dc2:	b002      	add	sp, #8
 8001dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001dc8:	f7ff bd56 	b.w	8001878 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dcc:	3001      	adds	r0, #1
 8001dce:	d108      	bne.n	8001de2 <vTaskStartScheduler+0x5a>
 8001dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	f3bf 8f6f 	isb	sy
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	e7fe      	b.n	8001de0 <vTaskStartScheduler+0x58>
}
 8001de2:	b002      	add	sp, #8
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop
 8001de8:	20003e08 	.word	0x20003e08
 8001dec:	0800449e 	.word	0x0800449e
 8001df0:	0800206d 	.word	0x0800206d
 8001df4:	20003e0c 	.word	0x20003e0c
 8001df8:	20003e28 	.word	0x20003e28
 8001dfc:	20003e54 	.word	0x20003e54

08001e00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001e00:	4a02      	ldr	r2, [pc, #8]	; (8001e0c <vTaskSuspendAll+0xc>)
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20003dd4 	.word	0x20003dd4

08001e10 <xTaskIncrementTick>:
{
 8001e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <xTaskIncrementTick+0xf8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d153      	bne.n	8001ec4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <xTaskIncrementTick+0xfc>)
 8001e1e:	681c      	ldr	r4, [r3, #0]
 8001e20:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001e22:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001e24:	b9bc      	cbnz	r4, 8001e56 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <xTaskIncrementTick+0x100>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	b142      	cbz	r2, 8001e40 <xTaskIncrementTick+0x30>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	e7fe      	b.n	8001e3e <xTaskIncrementTick+0x2e>
 8001e40:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <xTaskIncrementTick+0x104>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	6810      	ldr	r0, [r2, #0]
 8001e46:	6018      	str	r0, [r3, #0]
 8001e48:	6011      	str	r1, [r2, #0]
 8001e4a:	4a33      	ldr	r2, [pc, #204]	; (8001f18 <xTaskIncrementTick+0x108>)
 8001e4c:	6813      	ldr	r3, [r2, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	f7ff fe71 	bl	8001b38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e56:	4d31      	ldr	r5, [pc, #196]	; (8001f1c <xTaskIncrementTick+0x10c>)
 8001e58:	4f31      	ldr	r7, [pc, #196]	; (8001f20 <xTaskIncrementTick+0x110>)
 8001e5a:	682b      	ldr	r3, [r5, #0]
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	f04f 0b00 	mov.w	fp, #0
 8001e62:	d33e      	bcc.n	8001ee2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e64:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001f10 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001e68:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001f30 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e6c:	f8d8 2000 	ldr.w	r2, [r8]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	bb72      	cbnz	r2, 8001ed2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e78:	602a      	str	r2, [r5, #0]
					break;
 8001e7a:	e032      	b.n	8001ee2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e7c:	f106 0a04 	add.w	sl, r6, #4
 8001e80:	4650      	mov	r0, sl
 8001e82:	f7ff fbfd 	bl	8001680 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e86:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001e88:	b119      	cbz	r1, 8001e92 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e8a:	f106 0018 	add.w	r0, r6, #24
 8001e8e:	f7ff fbf7 	bl	8001680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e92:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001e94:	f8d9 3000 	ldr.w	r3, [r9]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	fa02 f100 	lsl.w	r1, r2, r0
 8001e9e:	4319      	orrs	r1, r3
 8001ea0:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <xTaskIncrementTick+0x114>)
 8001ea2:	f8c9 1000 	str.w	r1, [r9]
 8001ea6:	f04f 0e14 	mov.w	lr, #20
 8001eaa:	4651      	mov	r1, sl
 8001eac:	fb0e 3000 	mla	r0, lr, r0, r3
 8001eb0:	f7ff fbc3 	bl	800163a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001eb8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001eba:	4291      	cmp	r1, r2
 8001ebc:	bf28      	it	cs
 8001ebe:	f04f 0b01 	movcs.w	fp, #1
 8001ec2:	e7d3      	b.n	8001e6c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001ec4:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <xTaskIncrementTick+0x118>)
 8001ec6:	6813      	ldr	r3, [r2, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001ecc:	f04f 0b00 	mov.w	fp, #0
 8001ed0:	e011      	b.n	8001ef6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ed2:	f8d8 2000 	ldr.w	r2, [r8]
 8001ed6:	68d2      	ldr	r2, [r2, #12]
 8001ed8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001eda:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001edc:	428c      	cmp	r4, r1
 8001ede:	d2cd      	bcs.n	8001e7c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001ee0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <xTaskIncrementTick+0x114>)
 8001ee6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ee8:	2214      	movs	r2, #20
 8001eea:	434a      	muls	r2, r1
 8001eec:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001eee:	2a02      	cmp	r2, #2
 8001ef0:	bf28      	it	cs
 8001ef2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <xTaskIncrementTick+0x11c>)
 8001ef8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	bf18      	it	ne
 8001efe:	f04f 0b01 	movne.w	fp, #1
}
 8001f02:	4658      	mov	r0, fp
 8001f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f08:	20003dd4 	.word	0x20003dd4
 8001f0c:	20003e54 	.word	0x20003e54
 8001f10:	20003d34 	.word	0x20003d34
 8001f14:	20003d38 	.word	0x20003d38
 8001f18:	20003e10 	.word	0x20003e10
 8001f1c:	20003e0c 	.word	0x20003e0c
 8001f20:	20003d30 	.word	0x20003d30
 8001f24:	20003d3c 	.word	0x20003d3c
 8001f28:	20003dd0 	.word	0x20003dd0
 8001f2c:	20003e58 	.word	0x20003e58
 8001f30:	20003ddc 	.word	0x20003ddc

08001f34 <xTaskResumeAll>:
{
 8001f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001f38:	4c31      	ldr	r4, [pc, #196]	; (8002000 <xTaskResumeAll+0xcc>)
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	b943      	cbnz	r3, 8001f50 <xTaskResumeAll+0x1c>
 8001f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	e7fe      	b.n	8001f4e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001f50:	f7ff fc00 	bl	8001754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5a:	6824      	ldr	r4, [r4, #0]
 8001f5c:	b12c      	cbz	r4, 8001f6a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001f60:	f7ff fc1a 	bl	8001798 <vPortExitCritical>
}
 8001f64:	4620      	mov	r0, r4
 8001f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <xTaskResumeAll+0xd0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f5      	beq.n	8001f5e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f72:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800201c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001f76:	4f24      	ldr	r7, [pc, #144]	; (8002008 <xTaskResumeAll+0xd4>)
 8001f78:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002020 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f7c:	f8d9 3000 	ldr.w	r3, [r9]
 8001f80:	b9e3      	cbnz	r3, 8001fbc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001f82:	b10c      	cbz	r4, 8001f88 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001f84:	f7ff fdd8 	bl	8001b38 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f88:	4d20      	ldr	r5, [pc, #128]	; (800200c <xTaskResumeAll+0xd8>)
 8001f8a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f8c:	b144      	cbz	r4, 8001fa0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001f8e:	4e20      	ldr	r6, [pc, #128]	; (8002010 <xTaskResumeAll+0xdc>)
 8001f90:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001f92:	f7ff ff3d 	bl	8001e10 <xTaskIncrementTick>
 8001f96:	b100      	cbz	r0, 8001f9a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001f98:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f9a:	3c01      	subs	r4, #1
 8001f9c:	d1f9      	bne.n	8001f92 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001f9e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <xTaskResumeAll+0xdc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0da      	beq.n	8001f5e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <xTaskResumeAll+0xe0>)
 8001faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001fb8:	2401      	movs	r4, #1
 8001fba:	e7d1      	b.n	8001f60 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001fbc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001fc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fc2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fc4:	f104 0018 	add.w	r0, r4, #24
 8001fc8:	f7ff fb5a 	bl	8001680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fcc:	4630      	mov	r0, r6
 8001fce:	f7ff fb57 	bl	8001680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001fd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	2501      	movs	r5, #1
 8001fd8:	fa05 f302 	lsl.w	r3, r5, r2
 8001fdc:	2014      	movs	r0, #20
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	fb00 8002 	mla	r0, r0, r2, r8
 8001fe4:	4631      	mov	r1, r6
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	f7ff fb27 	bl	800163a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <xTaskResumeAll+0xe4>)
 8001fee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001ff6:	bf24      	itt	cs
 8001ff8:	4b05      	ldrcs	r3, [pc, #20]	; (8002010 <xTaskResumeAll+0xdc>)
 8001ffa:	601d      	strcs	r5, [r3, #0]
 8001ffc:	e7be      	b.n	8001f7c <xTaskResumeAll+0x48>
 8001ffe:	bf00      	nop
 8002000:	20003dd4 	.word	0x20003dd4
 8002004:	20003dc8 	.word	0x20003dc8
 8002008:	20003ddc 	.word	0x20003ddc
 800200c:	20003dd0 	.word	0x20003dd0
 8002010:	20003e58 	.word	0x20003e58
 8002014:	e000ed04 	.word	0xe000ed04
 8002018:	20003d30 	.word	0x20003d30
 800201c:	20003e14 	.word	0x20003e14
 8002020:	20003d3c 	.word	0x20003d3c

08002024 <vTaskDelay>:
	{
 8002024:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002026:	b940      	cbnz	r0, 800203a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <vTaskDelay+0x40>)
 800202a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <vTaskDelay+0x44>)
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	b141      	cbz	r1, 8002052 <vTaskDelay+0x2e>
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	e7fe      	b.n	8002050 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002052:	f7ff fed5 	bl	8001e00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002056:	f7ff fd81 	bl	8001b5c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800205a:	f7ff ff6b 	bl	8001f34 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800205e:	2800      	cmp	r0, #0
 8002060:	d0e2      	beq.n	8002028 <vTaskDelay+0x4>
 8002062:	bd08      	pop	{r3, pc}
 8002064:	e000ed04 	.word	0xe000ed04
 8002068:	20003dd4 	.word	0x20003dd4

0800206c <prvIdleTask>:
{
 800206c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800206e:	4e17      	ldr	r6, [pc, #92]	; (80020cc <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002070:	4c17      	ldr	r4, [pc, #92]	; (80020d0 <prvIdleTask+0x64>)
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	b963      	cbnz	r3, 8002090 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <prvIdleTask+0x68>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d9f8      	bls.n	8002070 <prvIdleTask+0x4>
				taskYIELD();
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <prvIdleTask+0x6c>)
 8002080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	e7ef      	b.n	8002070 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002090:	f7ff feb6 	bl	8001e00 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002094:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002096:	f7ff ff4d 	bl	8001f34 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800209a:	2d00      	cmp	r5, #0
 800209c:	d0e9      	beq.n	8002072 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800209e:	f7ff fb59 	bl	8001754 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020a2:	68f3      	ldr	r3, [r6, #12]
 80020a4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020a6:	1d28      	adds	r0, r5, #4
 80020a8:	f7ff faea 	bl	8001680 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <prvIdleTask+0x70>)
 80020ae:	6813      	ldr	r3, [r2, #0]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80020ba:	f7ff fb6d 	bl	8001798 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80020be:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80020c0:	f7ff fd02 	bl	8001ac8 <vPortFree>
			vPortFree( pxTCB );
 80020c4:	4628      	mov	r0, r5
 80020c6:	f7ff fcff 	bl	8001ac8 <vPortFree>
 80020ca:	e7d2      	b.n	8002072 <prvIdleTask+0x6>
 80020cc:	20003e40 	.word	0x20003e40
 80020d0:	20003dcc 	.word	0x20003dcc
 80020d4:	20003d3c 	.word	0x20003d3c
 80020d8:	e000ed04 	.word	0xe000ed04
 80020dc:	20003dc8 	.word	0x20003dc8

080020e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <vTaskSwitchContext+0x60>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <vTaskSwitchContext+0x64>)
{
 80020e6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020e8:	b112      	cbz	r2, 80020f0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80020ea:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80020f0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <vTaskSwitchContext+0x68>)
 80020f4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f1c3 031f 	rsb	r3, r3, #31
 8002100:	2214      	movs	r2, #20
 8002102:	4912      	ldr	r1, [pc, #72]	; (800214c <vTaskSwitchContext+0x6c>)
 8002104:	435a      	muls	r2, r3
 8002106:	1888      	adds	r0, r1, r2
 8002108:	588c      	ldr	r4, [r1, r2]
 800210a:	b944      	cbnz	r4, 800211e <vTaskSwitchContext+0x3e>
	__asm volatile
 800210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	e7fe      	b.n	800211c <vTaskSwitchContext+0x3c>
 800211e:	6844      	ldr	r4, [r0, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	6864      	ldr	r4, [r4, #4]
 8002124:	6044      	str	r4, [r0, #4]
 8002126:	440a      	add	r2, r1
 8002128:	4294      	cmp	r4, r2
 800212a:	bf04      	itt	eq
 800212c:	6862      	ldreq	r2, [r4, #4]
 800212e:	6042      	streq	r2, [r0, #4]
 8002130:	2214      	movs	r2, #20
 8002132:	fb02 1303 	mla	r3, r2, r3, r1
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <vTaskSwitchContext+0x70>)
 800213c:	e7d6      	b.n	80020ec <vTaskSwitchContext+0xc>
 800213e:	bf00      	nop
 8002140:	20003dd4 	.word	0x20003dd4
 8002144:	20003e58 	.word	0x20003e58
 8002148:	20003ddc 	.word	0x20003ddc
 800214c:	20003d3c 	.word	0x20003d3c
 8002150:	20003d30 	.word	0x20003d30

08002154 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002154:	880b      	ldrh	r3, [r1, #0]
 8002156:	2b05      	cmp	r3, #5
{
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800215c:	d12e      	bne.n	80021bc <eMBFuncReadCoils+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 800215e:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002160:	7902      	ldrb	r2, [r0, #4]
 8002162:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002166:	1e53      	subs	r3, r2, #1
 8002168:	b29b      	uxth	r3, r3
 800216a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800216e:	428b      	cmp	r3, r1
 8002170:	d824      	bhi.n	80021bc <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002172:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002174:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002176:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002178:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800217a:	2301      	movs	r3, #1
 800217c:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 800217e:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002180:	f012 0f07 	tst.w	r2, #7
 8002184:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002188:	bf18      	it	ne
 800218a:	3401      	addne	r4, #1
            *usLen += 1;
 800218c:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800218e:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002190:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002192:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002194:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002196:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 800219a:	3301      	adds	r3, #1
        usRegAddress++;
 800219c:	3101      	adds	r1, #1
            *usLen += 1;
 800219e:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 80021a0:	b289      	uxth	r1, r1
 80021a2:	2300      	movs	r3, #0
 80021a4:	3002      	adds	r0, #2
 80021a6:	f000 fe79 	bl	8002e9c <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80021aa:	b118      	cbz	r0, 80021b4 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80021ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80021b0:	f000 b980 	b.w	80024b4 <prveMBError2Exception>
                *usLen += ucNBytes;;
 80021b4:	882a      	ldrh	r2, [r5, #0]
 80021b6:	4414      	add	r4, r2
 80021b8:	802c      	strh	r4, [r5, #0]
 80021ba:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80021bc:	2003      	movs	r0, #3
}
 80021be:	bd70      	pop	{r4, r5, r6, pc}

080021c0 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80021c0:	880b      	ldrh	r3, [r1, #0]
 80021c2:	2b05      	cmp	r3, #5
{
 80021c4:	b513      	push	{r0, r1, r4, lr}
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80021c6:	d11d      	bne.n	8002204 <eMBFuncWriteCoil+0x44>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80021c8:	7903      	ldrb	r3, [r0, #4]
 80021ca:	b9db      	cbnz	r3, 8002204 <eMBFuncWriteCoil+0x44>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80021cc:	78c4      	ldrb	r4, [r0, #3]
 80021ce:	1e62      	subs	r2, r4, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	2afd      	cmp	r2, #253	; 0xfd
 80021d4:	d916      	bls.n	8002204 <eMBFuncWriteCoil+0x44>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80021d6:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80021d8:	7881      	ldrb	r1, [r0, #2]
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 80021da:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80021de:	2cff      	cmp	r4, #255	; 0xff
            {
                ucBuf[0] = 1;
 80021e0:	bf08      	it	eq
 80021e2:	2301      	moveq	r3, #1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80021e4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
            }
            else
            {
                ucBuf[0] = 0;
 80021e8:	f88d 3004 	strb.w	r3, [sp, #4]
        usRegAddress++;
 80021ec:	3101      	adds	r1, #1
            }
            eRegStatus =
 80021ee:	2301      	movs	r3, #1
 80021f0:	461a      	mov	r2, r3
 80021f2:	b289      	uxth	r1, r1
 80021f4:	a801      	add	r0, sp, #4
 80021f6:	f000 fe51 	bl	8002e9c <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80021fa:	b128      	cbz	r0, 8002208 <eMBFuncWriteCoil+0x48>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80021fc:	f000 f95a 	bl	80024b4 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002200:	b002      	add	sp, #8
 8002202:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002204:	2003      	movs	r0, #3
 8002206:	e7fb      	b.n	8002200 <eMBFuncWriteCoil+0x40>
 8002208:	e7fa      	b.n	8002200 <eMBFuncWriteCoil+0x40>

0800220a <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800220a:	880b      	ldrh	r3, [r1, #0]
 800220c:	2b05      	cmp	r3, #5
{
 800220e:	b510      	push	{r4, lr}
 8002210:	460c      	mov	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002212:	d924      	bls.n	800225e <eMBFuncWriteMultipleCoils+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002214:	78c3      	ldrb	r3, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002216:	7902      	ldrb	r2, [r0, #4]
 8002218:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 800221c:	f012 0f07 	tst.w	r2, #7
 8002220:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002224:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002228:	bf18      	it	ne
 800222a:	3301      	addne	r3, #1
        if( ( usCoilCnt >= 1 ) &&
 800222c:	f5b1 6ff6 	cmp.w	r1, #1968	; 0x7b0
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002230:	b2db      	uxtb	r3, r3
        if( ( usCoilCnt >= 1 ) &&
 8002232:	d214      	bcs.n	800225e <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002234:	7941      	ldrb	r1, [r0, #5]
 8002236:	4299      	cmp	r1, r3
 8002238:	d111      	bne.n	800225e <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800223a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800223c:	7881      	ldrb	r1, [r0, #2]
 800223e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002242:	3101      	adds	r1, #1
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002244:	2301      	movs	r3, #1
 8002246:	b289      	uxth	r1, r1
 8002248:	3006      	adds	r0, #6
 800224a:	f000 fe27 	bl	8002e9c <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800224e:	b118      	cbz	r0, 8002258 <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002254:	f000 b92e 	b.w	80024b4 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002258:	2205      	movs	r2, #5
 800225a:	8022      	strh	r2, [r4, #0]
 800225c:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800225e:	2003      	movs	r0, #3
}
 8002260:	bd10      	pop	{r4, pc}

08002262 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002262:	880b      	ldrh	r3, [r1, #0]
 8002264:	2b05      	cmp	r3, #5
{
 8002266:	b570      	push	{r4, r5, r6, lr}
 8002268:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800226a:	d12d      	bne.n	80022c8 <eMBFuncReadDiscreteInputs+0x66>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800226c:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 800226e:	7902      	ldrb	r2, [r0, #4]
 8002270:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002274:	1e53      	subs	r3, r2, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800227c:	428b      	cmp	r3, r1
 800227e:	d823      	bhi.n	80022c8 <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002280:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002282:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002284:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002286:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002288:	2302      	movs	r3, #2
 800228a:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 800228c:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800228e:	f012 0f07 	tst.w	r2, #7
 8002292:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002296:	bf18      	it	ne
 8002298:	3401      	addne	r4, #1
            *usLen += 1;
 800229a:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 800229c:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 800229e:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 80022a0:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 80022a2:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80022a4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 80022a8:	3301      	adds	r3, #1
        usRegAddress++;
 80022aa:	3101      	adds	r1, #1
            *usLen += 1;
 80022ac:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 80022ae:	b289      	uxth	r1, r1
 80022b0:	3002      	adds	r0, #2
 80022b2:	f000 fdf5 	bl	8002ea0 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80022b6:	b118      	cbz	r0, 80022c0 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80022b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80022bc:	f000 b8fa 	b.w	80024b4 <prveMBError2Exception>
                *usLen += ucNBytes;;
 80022c0:	882a      	ldrh	r2, [r5, #0]
 80022c2:	4414      	add	r4, r2
 80022c4:	802c      	strh	r4, [r5, #0]
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80022c8:	2003      	movs	r0, #3
}
 80022ca:	bd70      	pop	{r4, r5, r6, pc}

080022cc <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80022cc:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80022ce:	880b      	ldrh	r3, [r1, #0]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10f      	bne.n	80022f4 <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80022d4:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80022d6:	7881      	ldrb	r1, [r0, #2]
 80022d8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80022dc:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80022de:	2301      	movs	r3, #1
 80022e0:	461a      	mov	r2, r3
 80022e2:	b289      	uxth	r1, r1
 80022e4:	3003      	adds	r0, #3
 80022e6:	f000 fdd7 	bl	8002e98 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80022ea:	b128      	cbz	r0, 80022f8 <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80022ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            eStatus = prveMBError2Exception( eRegStatus );
 80022f0:	f000 b8e0 	b.w	80024b4 <prveMBError2Exception>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80022f4:	2003      	movs	r0, #3
 80022f6:	bd08      	pop	{r3, pc}
}
 80022f8:	bd08      	pop	{r3, pc}

080022fa <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80022fa:	880b      	ldrh	r3, [r1, #0]
 80022fc:	2b05      	cmp	r3, #5
{
 80022fe:	b510      	push	{r4, lr}
 8002300:	460c      	mov	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002302:	d91d      	bls.n	8002340 <eMBFuncWriteMultipleHoldingRegister+0x46>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002304:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002306:	7902      	ldrb	r2, [r0, #4]
 8002308:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 800230c:	1e53      	subs	r3, r2, #1
 800230e:	2b77      	cmp	r3, #119	; 0x77
 8002310:	d816      	bhi.n	8002340 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002312:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002314:	7941      	ldrb	r1, [r0, #5]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4299      	cmp	r1, r3
 800231a:	d111      	bne.n	8002340 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800231c:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800231e:	7881      	ldrb	r1, [r0, #2]
 8002320:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002324:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8002326:	2301      	movs	r3, #1
 8002328:	b289      	uxth	r1, r1
 800232a:	3006      	adds	r0, #6
 800232c:	f000 fdb4 	bl	8002e98 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002330:	b118      	cbz	r0, 800233a <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002336:	f000 b8bd 	b.w	80024b4 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800233a:	2205      	movs	r2, #5
 800233c:	8022      	strh	r2, [r4, #0]
 800233e:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002340:	2003      	movs	r0, #3
}
 8002342:	bd10      	pop	{r4, pc}

08002344 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002346:	880b      	ldrh	r3, [r1, #0]
 8002348:	2b05      	cmp	r3, #5
{
 800234a:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800234c:	d124      	bne.n	8002398 <eMBFuncReadHoldingRegister+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800234e:	7902      	ldrb	r2, [r0, #4]
 8002350:	b295      	uxth	r5, r2

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002352:	1e6b      	subs	r3, r5, #1
 8002354:	2b7c      	cmp	r3, #124	; 0x7c
 8002356:	d81f      	bhi.n	8002398 <eMBFuncReadHoldingRegister+0x54>
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002358:	2603      	movs	r6, #3
            *usLen = MB_PDU_FUNC_OFF;
 800235a:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800235c:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800235e:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002360:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002362:	7006      	strb	r6, [r0, #0]
            *usLen += 1;
 8002364:	8826      	ldrh	r6, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002366:	0052      	lsls	r2, r2, #1
            *usLen += 1;
 8002368:	3601      	adds	r6, #1
 800236a:	8026      	strh	r6, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800236c:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 800236e:	8822      	ldrh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002370:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *usLen += 1;
 8002374:	3201      	adds	r2, #1
        usRegAddress++;
 8002376:	3101      	adds	r1, #1
            *usLen += 1;
 8002378:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800237a:	b289      	uxth	r1, r1
 800237c:	462a      	mov	r2, r5
 800237e:	3002      	adds	r0, #2
 8002380:	f000 fd8a 	bl	8002e98 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002384:	b118      	cbz	r0, 800238e <eMBFuncReadHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 800238a:	f000 b893 	b.w	80024b4 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 800238e:	8822      	ldrh	r2, [r4, #0]
 8002390:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8002394:	8025      	strh	r5, [r4, #0]
 8002396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002398:	2003      	movs	r0, #3
}
 800239a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800239c <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800239c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80023a0:	880b      	ldrh	r3, [r1, #0]
 80023a2:	2b09      	cmp	r3, #9
{
 80023a4:	4604      	mov	r4, r0
 80023a6:	460d      	mov	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80023a8:	d93c      	bls.n	8002424 <eMBFuncReadWriteMultipleHoldingRegister+0x88>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80023aa:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80023ac:	7907      	ldrb	r7, [r0, #4]
 80023ae:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80023b2:	1e7b      	subs	r3, r7, #1
 80023b4:	2b7c      	cmp	r3, #124	; 0x7c
 80023b6:	d838      	bhi.n	800242a <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80023b8:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 80023ba:	7a02      	ldrb	r2, [r0, #8]
 80023bc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80023c0:	1e53      	subs	r3, r2, #1
 80023c2:	2b78      	cmp	r3, #120	; 0x78
 80023c4:	d831      	bhi.n	800242a <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80023c6:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80023c8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80023cc:	d12d      	bne.n	800242a <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 80023ce:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80023d0:	7981      	ldrb	r1, [r0, #6]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 80023d2:	f890 9001 	ldrb.w	r9, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80023d6:	7886      	ldrb	r6, [r0, #2]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80023d8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 80023dc:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80023de:	2301      	movs	r3, #1
 80023e0:	b289      	uxth	r1, r1
 80023e2:	300a      	adds	r0, #10
 80023e4:	f000 fd58 	bl	8002e98 <eMBRegHoldingCB>
 80023e8:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80023ea:	bb08      	cbnz	r0, 8002430 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80023ec:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 80023ee:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80023f0:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 80023f2:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80023f4:	ea4f 0847 	mov.w	r8, r7, lsl #1
                *usLen += 1;
 80023f8:	3201      	adds	r2, #1
 80023fa:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80023fc:	f884 8001 	strb.w	r8, [r4, #1]
                *usLen += 1;
 8002400:	882a      	ldrh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002402:	ea46 2109 	orr.w	r1, r6, r9, lsl #8
                *usLen += 1;
 8002406:	3201      	adds	r2, #1
        usRegReadAddress++;
 8002408:	3101      	adds	r1, #1
                *usLen += 1;
 800240a:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 800240c:	b289      	uxth	r1, r1
 800240e:	463a      	mov	r2, r7
 8002410:	1ca0      	adds	r0, r4, #2
 8002412:	f000 fd41 	bl	8002e98 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8002416:	b958      	cbnz	r0, 8002430 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                {
                    *usLen += 2 * usRegReadCount;
 8002418:	882b      	ldrh	r3, [r5, #0]
 800241a:	4498      	add	r8, r3
 800241c:	f8a5 8000 	strh.w	r8, [r5]
 8002420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eMBException    eStatus = MB_EX_NONE;
 8002424:	2000      	movs	r0, #0
 8002426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800242a:	2003      	movs	r0, #3
        }
    }
    return eStatus;
 800242c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8002430:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002434:	f000 b83e 	b.w	80024b4 <prveMBError2Exception>

08002438 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002438:	880b      	ldrh	r3, [r1, #0]
 800243a:	2b05      	cmp	r3, #5
{
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002440:	d124      	bne.n	800248c <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002442:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002444:	7902      	ldrb	r2, [r0, #4]
 8002446:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800244a:	1e53      	subs	r3, r2, #1
 800244c:	2b7b      	cmp	r3, #123	; 0x7b
 800244e:	d81d      	bhi.n	800248c <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002450:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002452:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002454:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002456:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8002458:	2304      	movs	r3, #4
 800245a:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 800245c:	8823      	ldrh	r3, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800245e:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 8002460:	3301      	adds	r3, #1
 8002462:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002464:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8002466:	8823      	ldrh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002468:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 800246c:	3301      	adds	r3, #1
        usRegAddress++;
 800246e:	3101      	adds	r1, #1
            *usLen += 1;
 8002470:	8023      	strh	r3, [r4, #0]

            eRegStatus =
 8002472:	b289      	uxth	r1, r1
 8002474:	3002      	adds	r0, #2
 8002476:	f000 fce3 	bl	8002e40 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800247a:	b118      	cbz	r0, 8002484 <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800247c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002480:	f000 b818 	b.w	80024b4 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 8002484:	8822      	ldrh	r2, [r4, #0]
 8002486:	4415      	add	r5, r2
 8002488:	8025      	strh	r5, [r4, #0]
 800248a:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800248c:	2003      	movs	r0, #3
}
 800248e:	bd70      	pop	{r4, r5, r6, pc}

08002490 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002490:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <eMBFuncReportSlaveID+0x1c>)
 8002494:	881c      	ldrh	r4, [r3, #0]
{
 8002496:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002498:	4622      	mov	r2, r4
 800249a:	4905      	ldr	r1, [pc, #20]	; (80024b0 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800249c:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800249e:	3001      	adds	r0, #1
 80024a0:	f000 feb2 	bl	8003208 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80024a4:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 80024a6:	2000      	movs	r0, #0
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	bf00      	nop
 80024ac:	20003e7c 	.word	0x20003e7c
 80024b0:	20003e5c 	.word	0x20003e5c

080024b4 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80024b4:	2807      	cmp	r0, #7
 80024b6:	bf9a      	itte	ls
 80024b8:	4b01      	ldrls	r3, [pc, #4]	; (80024c0 <prveMBError2Exception+0xc>)
 80024ba:	5c18      	ldrbls	r0, [r3, r0]
 80024bc:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 80024be:	4770      	bx	lr
 80024c0:	08004168 	.word	0x08004168

080024c4 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4604      	mov	r4, r0
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80024ce:	1e43      	subs	r3, r0, #1
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2bf6      	cmp	r3, #246	; 0xf6
 80024d4:	d827      	bhi.n	8002526 <eMBInit+0x62>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <eMBInit+0x6c>)
 80024d8:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 80024da:	bb24      	cbnz	r4, 8002526 <eMBInit+0x62>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <eMBInit+0x70>)
 80024de:	4d16      	ldr	r5, [pc, #88]	; (8002538 <eMBInit+0x74>)
 80024e0:	601d      	str	r5, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <eMBInit+0x78>)
 80024e4:	4d16      	ldr	r5, [pc, #88]	; (8002540 <eMBInit+0x7c>)
 80024e6:	601d      	str	r5, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <eMBInit+0x80>)
 80024ea:	4d17      	ldr	r5, [pc, #92]	; (8002548 <eMBInit+0x84>)
 80024ec:	601d      	str	r5, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <eMBInit+0x88>)
 80024f0:	4d17      	ldr	r5, [pc, #92]	; (8002550 <eMBInit+0x8c>)
 80024f2:	601d      	str	r5, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <eMBInit+0x90>)
 80024f6:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <eMBInit+0x94>)
 80024fa:	4c18      	ldr	r4, [pc, #96]	; (800255c <eMBInit+0x98>)
 80024fc:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <eMBInit+0x9c>)
 8002500:	4c18      	ldr	r4, [pc, #96]	; (8002564 <eMBInit+0xa0>)
 8002502:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <eMBInit+0xa4>)
 8002506:	4c19      	ldr	r4, [pc, #100]	; (800256c <eMBInit+0xa8>)
 8002508:	601c      	str	r4, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800250a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800250e:	f000 f967 	bl	80027e0 <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 8002512:	4604      	mov	r4, r0
 8002514:	b928      	cbnz	r0, 8002522 <eMBInit+0x5e>
        {
            if( !xMBPortEventInit(  ) )
 8002516:	f000 f8b5 	bl	8002684 <xMBPortEventInit>
 800251a:	b130      	cbz	r0, 800252a <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <eMBInit+0xac>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
}
 8002522:	4620      	mov	r0, r4
 8002524:	bd38      	pop	{r3, r4, r5, pc}
            eStatus = MB_EINVAL;
 8002526:	2402      	movs	r4, #2
 8002528:	e7fb      	b.n	8002522 <eMBInit+0x5e>
                eStatus = MB_EPORTERR;
 800252a:	2403      	movs	r4, #3
 800252c:	e7f9      	b.n	8002522 <eMBInit+0x5e>
 800252e:	bf00      	nop
 8002530:	20003e95 	.word	0x20003e95
 8002534:	20003e8c 	.word	0x20003e8c
 8002538:	0800281d 	.word	0x0800281d
 800253c:	20003e90 	.word	0x20003e90
 8002540:	08002839 	.word	0x08002839
 8002544:	20003e84 	.word	0x20003e84
 8002548:	080028b5 	.word	0x080028b5
 800254c:	20003e80 	.word	0x20003e80
 8002550:	0800284d 	.word	0x0800284d
 8002554:	20003e88 	.word	0x20003e88
 8002558:	20003ed8 	.word	0x20003ed8
 800255c:	08002931 	.word	0x08002931
 8002560:	20003ed0 	.word	0x20003ed0
 8002564:	080029c5 	.word	0x080029c5
 8002568:	20003ed4 	.word	0x20003ed4
 800256c:	08002a4d 	.word	0x08002a4d
 8002570:	20000008 	.word	0x20000008

08002574 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8002574:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8002576:	4c06      	ldr	r4, [pc, #24]	; (8002590 <eMBEnable+0x1c>)
 8002578:	7823      	ldrb	r3, [r4, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <eMBEnable+0x20>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002584:	2000      	movs	r0, #0
 8002586:	7020      	strb	r0, [r4, #0]
 8002588:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800258a:	2006      	movs	r0, #6
    }
    return eStatus;
}
 800258c:	bd10      	pop	{r4, pc}
 800258e:	bf00      	nop
 8002590:	20000008 	.word	0x20000008
 8002594:	20003e8c 	.word	0x20003e8c

08002598 <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002598:	4b30      	ldr	r3, [pc, #192]	; (800265c <eMBPoll+0xc4>)
{
 800259a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( eMBState != STATE_ENABLED )
 800259c:	781c      	ldrb	r4, [r3, #0]
 800259e:	2c00      	cmp	r4, #0
 80025a0:	d159      	bne.n	8002656 <eMBPoll+0xbe>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80025a2:	f10d 0007 	add.w	r0, sp, #7
 80025a6:	f000 f881 	bl	80026ac <xMBPortEventGet>
 80025aa:	2801      	cmp	r0, #1
 80025ac:	4603      	mov	r3, r0
 80025ae:	d001      	beq.n	80025b4 <eMBPoll+0x1c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 80025b0:	2400      	movs	r4, #0
 80025b2:	e005      	b.n	80025c0 <eMBPoll+0x28>
        switch ( eEvent )
 80025b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80025b8:	2a01      	cmp	r2, #1
 80025ba:	d004      	beq.n	80025c6 <eMBPoll+0x2e>
 80025bc:	2a02      	cmp	r2, #2
 80025be:	d017      	beq.n	80025f0 <eMBPoll+0x58>
}
 80025c0:	4620      	mov	r0, r4
 80025c2:	b003      	add	sp, #12
 80025c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80025c6:	4d26      	ldr	r5, [pc, #152]	; (8002660 <eMBPoll+0xc8>)
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <eMBPoll+0xcc>)
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <eMBPoll+0xd0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4927      	ldr	r1, [pc, #156]	; (800266c <eMBPoll+0xd4>)
 80025d0:	4628      	mov	r0, r5
 80025d2:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 80025d4:	4604      	mov	r4, r0
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d1ea      	bne.n	80025b0 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80025da:	4a25      	ldr	r2, [pc, #148]	; (8002670 <eMBPoll+0xd8>)
 80025dc:	782b      	ldrb	r3, [r5, #0]
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <eMBPoll+0x50>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e3      	bne.n	80025b0 <eMBPoll+0x18>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80025e8:	2002      	movs	r0, #2
 80025ea:	f000 f853 	bl	8002694 <xMBPortEventPost>
 80025ee:	e7e7      	b.n	80025c0 <eMBPoll+0x28>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80025f0:	4d1e      	ldr	r5, [pc, #120]	; (800266c <eMBPoll+0xd4>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 80025f2:	4e20      	ldr	r6, [pc, #128]	; (8002674 <eMBPoll+0xdc>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80025f4:	6828      	ldr	r0, [r5, #0]
 80025f6:	4f20      	ldr	r7, [pc, #128]	; (8002678 <eMBPoll+0xe0>)
 80025f8:	7802      	ldrb	r2, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80025fa:	7033      	strb	r3, [r6, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <eMBPoll+0xe4>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80025fe:	703a      	strb	r2, [r7, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002600:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8002604:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 8002608:	b131      	cbz	r1, 8002618 <eMBPoll+0x80>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800260a:	428a      	cmp	r2, r1
 800260c:	d11f      	bne.n	800264e <eMBPoll+0xb6>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800260e:	4473      	add	r3, lr
 8002610:	4915      	ldr	r1, [pc, #84]	; (8002668 <eMBPoll+0xd0>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4798      	blx	r3
 8002616:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <eMBPoll+0xc8>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0c7      	beq.n	80025b0 <eMBPoll+0x18>
                if( eException != MB_EX_NONE )
 8002620:	7831      	ldrb	r1, [r6, #0]
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <eMBPoll+0xd0>)
 8002624:	b159      	cbz	r1, 800263e <eMBPoll+0xa6>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8002626:	2201      	movs	r2, #1
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	783a      	ldrb	r2, [r7, #0]
 800262c:	6828      	ldr	r0, [r5, #0]
 800262e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002632:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	6828      	ldr	r0, [r5, #0]
 8002638:	1c54      	adds	r4, r2, #1
 800263a:	801c      	strh	r4, [r3, #0]
 800263c:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <eMBPoll+0xe8>)
 8002640:	6829      	ldr	r1, [r5, #0]
 8002642:	6814      	ldr	r4, [r2, #0]
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <eMBPoll+0xd8>)
 8002648:	7818      	ldrb	r0, [r3, #0]
 800264a:	47a0      	blx	r4
 800264c:	e7b0      	b.n	80025b0 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800264e:	3401      	adds	r4, #1
 8002650:	2c10      	cmp	r4, #16
 8002652:	d1d5      	bne.n	8002600 <eMBPoll+0x68>
 8002654:	e7e0      	b.n	8002618 <eMBPoll+0x80>
        return MB_EILLSTATE;
 8002656:	2406      	movs	r4, #6
 8002658:	e7b2      	b.n	80025c0 <eMBPoll+0x28>
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008
 8002660:	20003e9c 	.word	0x20003e9c
 8002664:	20003e80 	.word	0x20003e80
 8002668:	20003e9e 	.word	0x20003e9e
 800266c:	20003e98 	.word	0x20003e98
 8002670:	20003e95 	.word	0x20003e95
 8002674:	20003e7e 	.word	0x20003e7e
 8002678:	20003e94 	.word	0x20003e94
 800267c:	2000000c 	.word	0x2000000c
 8002680:	20003e84 	.word	0x20003e84

08002684 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <xMBPortEventInit+0xc>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 800268a:	2001      	movs	r0, #1
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20003ea1 	.word	0x20003ea1

08002694 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <xMBPortEventPost+0x10>)
 8002696:	2301      	movs	r3, #1
 8002698:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 800269a:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <xMBPortEventPost+0x14>)
 800269c:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 800269e:	4618      	mov	r0, r3
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20003ea1 	.word	0x20003ea1
 80026a8:	20003ea0 	.word	0x20003ea0

080026ac <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 80026ac:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <xMBPortEventGet+0x18>)
 80026ae:	7813      	ldrb	r3, [r2, #0]
 80026b0:	b12b      	cbz	r3, 80026be <xMBPortEventGet+0x12>
    {
        *eEvent = eQueuedEvent;
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <xMBPortEventGet+0x1c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 80026bc:	2301      	movs	r3, #1
    }
    return xEventHappened;
}
 80026be:	4618      	mov	r0, r3
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20003ea1 	.word	0x20003ea1
 80026c8:	20003ea0 	.word	0x20003ea0

080026cc <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <vMBPortSerialEnable+0x2c>)
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 80026ce:	b158      	cbz	r0, 80026e8 <vMBPortSerialEnable+0x1c>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	68c2      	ldr	r2, [r0, #12]
 80026d4:	f042 0220 	orr.w	r2, r2, #32
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80026d8:	60c2      	str	r2, [r0, #12]
  }
  
  if (xTxEnable) {    
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68d3      	ldr	r3, [r2, #12]
  if (xTxEnable) {    
 80026de:	b141      	cbz	r1, 80026f2 <vMBPortSerialEnable+0x26>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 80026e4:	60d3      	str	r3, [r2, #12]
 80026e6:	4770      	bx	lr
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	68c2      	ldr	r2, [r0, #12]
 80026ec:	f022 0220 	bic.w	r2, r2, #32
 80026f0:	e7f2      	b.n	80026d8 <vMBPortSerialEnable+0xc>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 80026f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f6:	e7f5      	b.n	80026e4 <vMBPortSerialEnable+0x18>
 80026f8:	20003fe8 	.word	0x20003fe8

080026fc <xMBPortSerialInit>:
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
}
 80026fc:	2001      	movs	r0, #1
 80026fe:	4770      	bx	lr

08002700 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8002700:	b507      	push	{r0, r1, r2, lr}
 8002702:	a902      	add	r1, sp, #8
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 8002704:	230a      	movs	r3, #10
{
 8002706:	f801 0d01 	strb.w	r0, [r1, #-1]!
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 800270a:	2201      	movs	r2, #1
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <xMBPortSerialPutByte+0x20>)
 800270e:	f7fe fe1f 	bl	8001350 <HAL_UART_Transmit>
}
 8002712:	fab0 f080 	clz	r0, r0
 8002716:	0940      	lsrs	r0, r0, #5
 8002718:	b003      	add	sp, #12
 800271a:	f85d fb04 	ldr.w	pc, [sp], #4
 800271e:	bf00      	nop
 8002720:	20003fe8 	.word	0x20003fe8

08002724 <xMBPortSerialGetByte>:
xMBPortSerialGetByte( CHAR * pucByte )
{
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);  
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <xMBPortSerialGetByte+0xc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	7003      	strb	r3, [r0, #0]
  return TRUE;
}
 800272c:	2001      	movs	r0, #1
 800272e:	4770      	bx	lr
 8002730:	20003fe8 	.word	0x20003fe8

08002734 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8002734:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim7.Instance = TIM7;
 8002736:	4d11      	ldr	r5, [pc, #68]	; (800277c <xMBPortTimersInit+0x48>)
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <xMBPortTimersInit+0x4c>)
 800273a:	602b      	str	r3, [r5, #0]
{
 800273c:	4606      	mov	r6, r0
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800273e:	f7fe fae3 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <xMBPortTimersInit+0x50>)
 8002744:	fbb0 f0f3 	udiv	r0, r0, r3
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 50 - 1;
 8002748:	2331      	movs	r3, #49	; 0x31
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800274a:	3801      	subs	r0, #1
  htim7.Init.Period = 50 - 1;
 800274c:	60eb      	str	r3, [r5, #12]
  
  timeout = usTim1Timerout50us;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <xMBPortTimersInit+0x54>)
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8002750:	6068      	str	r0, [r5, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002752:	2400      	movs	r4, #0
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002754:	4628      	mov	r0, r5
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	60ac      	str	r4, [r5, #8]
  timeout = usTim1Timerout50us;
 8002758:	801e      	strh	r6, [r3, #0]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800275a:	f7fe fc3d 	bl	8000fd8 <HAL_TIM_Base_Init>
 800275e:	b958      	cbnz	r0, 8002778 <xMBPortTimersInit+0x44>
  {
    return FALSE;
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002760:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	9001      	str	r0, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002764:	4669      	mov	r1, sp
 8002766:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002768:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800276a:	f7fe fc4f 	bl	800100c <HAL_TIMEx_MasterConfigSynchronization>
    return FALSE;
 800276e:	fab0 f080 	clz	r0, r0
 8002772:	0940      	lsrs	r0, r0, #5
  {
    return FALSE;
  }
  
  return TRUE;
}
 8002774:	b002      	add	sp, #8
 8002776:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 8002778:	4620      	mov	r0, r4
 800277a:	e7fb      	b.n	8002774 <xMBPortTimersInit+0x40>
 800277c:	20004028 	.word	0x20004028
 8002780:	40001400 	.word	0x40001400
 8002784:	000f4240 	.word	0x000f4240
 8002788:	20003ea4 	.word	0x20003ea4

0800278c <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <vMBPortTimersEnable+0x10>)
  HAL_TIM_Base_Start_IT(&htim7);
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <vMBPortTimersEnable+0x14>)
  downcounter = timeout;
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <vMBPortTimersEnable+0x18>)
 8002794:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 8002796:	f7fe baf5 	b.w	8000d84 <HAL_TIM_Base_Start_IT>
 800279a:	bf00      	nop
 800279c:	20003ea4 	.word	0x20003ea4
 80027a0:	20004028 	.word	0x20004028
 80027a4:	20003ea2 	.word	0x20003ea2

080027a8 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <vMBPortTimersDisable+0x8>)
 80027aa:	f7fe baf6 	b.w	8000d9a <HAL_TIM_Base_Stop_IT>
 80027ae:	bf00      	nop
 80027b0:	20004028 	.word	0x20004028

080027b4 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80027b4:	b570      	push	{r4, r5, r6, lr}
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 80027b6:	23ff      	movs	r3, #255	; 0xff
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80027b8:	4d07      	ldr	r5, [pc, #28]	; (80027d8 <usMBCRC16+0x24>)
        ucCRCHi = aucCRCLo[iIndex];
 80027ba:	4e08      	ldr	r6, [pc, #32]	; (80027dc <usMBCRC16+0x28>)
 80027bc:	4401      	add	r1, r0
    UCHAR           ucCRCHi = 0xFF;
 80027be:	461c      	mov	r4, r3
    while( usLen-- )
 80027c0:	4288      	cmp	r0, r1
 80027c2:	d102      	bne.n	80027ca <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 80027c4:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80027ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027ce:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80027d0:	5cab      	ldrb	r3, [r5, r2]
 80027d2:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 80027d4:	5cb4      	ldrb	r4, [r6, r2]
 80027d6:	e7f3      	b.n	80027c0 <usMBCRC16+0xc>
 80027d8:	08004170 	.word	0x08004170
 80027dc:	08004270 	.word	0x08004270

080027e0 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80027e0:	b510      	push	{r4, lr}
 80027e2:	4608      	mov	r0, r1
 80027e4:	4614      	mov	r4, r2
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e6:	b672      	cpsid	i

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80027e8:	2208      	movs	r2, #8
 80027ea:	4621      	mov	r1, r4
 80027ec:	f7ff ff86 	bl	80026fc <xMBPortSerialInit>
 80027f0:	2801      	cmp	r0, #1
 80027f2:	d10c      	bne.n	800280e <eMBRTUInit+0x2e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80027f4:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80027f8:	bf97      	itett	ls
 80027fa:	4807      	ldrls	r0, [pc, #28]	; (8002818 <eMBRTUInit+0x38>)
            usTimerT35_50us = 35;       /* 1800us. */
 80027fc:	2023      	movhi	r0, #35	; 0x23
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80027fe:	0064      	lslls	r4, r4, #1
 8002800:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8002804:	b280      	uxth	r0, r0
 8002806:	f7ff ff95 	bl	8002734 <xMBPortTimersInit>
 800280a:	2801      	cmp	r0, #1
 800280c:	d002      	beq.n	8002814 <eMBRTUInit+0x34>
        {
            eStatus = MB_EPORTERR;
 800280e:	2003      	movs	r0, #3
  __ASM volatile ("cpsie i" : : : "memory");
 8002810:	b662      	cpsie	i
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
}
 8002812:	bd10      	pop	{r4, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 8002814:	2000      	movs	r0, #0
 8002816:	e7fb      	b.n	8002810 <eMBRTUInit+0x30>
 8002818:	00177fa0 	.word	0x00177fa0

0800281c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800281c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800281e:	b672      	cpsid	i
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <eMBRTUStart+0x18>)
 8002822:	2100      	movs	r1, #0
    vMBPortSerialEnable( TRUE, FALSE );
 8002824:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 8002826:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8002828:	f7ff ff50 	bl	80026cc <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800282c:	f7ff ffae 	bl	800278c <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8002830:	b662      	cpsie	i
 8002832:	bd08      	pop	{r3, pc}
 8002834:	20003ea6 	.word	0x20003ea6

08002838 <eMBRTUStop>:
    EXIT_CRITICAL_SECTION(  );
}

void
eMBRTUStop( void )
{
 8002838:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800283a:	b672      	cpsid	i
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 800283c:	2100      	movs	r1, #0
 800283e:	4608      	mov	r0, r1
 8002840:	f7ff ff44 	bl	80026cc <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8002844:	f7ff ffb0 	bl	80027a8 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8002848:	b662      	cpsie	i
 800284a:	bd08      	pop	{r3, pc}

0800284c <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002850:	4680      	mov	r8, r0
 8002852:	460e      	mov	r6, r1
 8002854:	4617      	mov	r7, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8002856:	b672      	cpsid	i
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8002858:	4d11      	ldr	r5, [pc, #68]	; (80028a0 <eMBRTUReceive+0x54>)
 800285a:	882b      	ldrh	r3, [r5, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	2bff      	cmp	r3, #255	; 0xff
 8002860:	d905      	bls.n	800286e <eMBRTUReceive+0x22>
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <eMBRTUReceive+0x58>)
 8002864:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <eMBRTUReceive+0x5c>)
 8002866:	4811      	ldr	r0, [pc, #68]	; (80028ac <eMBRTUReceive+0x60>)
 8002868:	21a1      	movs	r1, #161	; 0xa1
 800286a:	f000 fc79 	bl	8003160 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800286e:	882b      	ldrh	r3, [r5, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b03      	cmp	r3, #3
 8002874:	d803      	bhi.n	800287e <eMBRTUReceive+0x32>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 8002876:	2005      	movs	r0, #5
  __ASM volatile ("cpsie i" : : : "memory");
 8002878:	b662      	cpsie	i
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 800287a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800287e:	8829      	ldrh	r1, [r5, #0]
 8002880:	4c0b      	ldr	r4, [pc, #44]	; (80028b0 <eMBRTUReceive+0x64>)
 8002882:	b289      	uxth	r1, r1
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff ff95 	bl	80027b4 <usMBCRC16>
 800288a:	2800      	cmp	r0, #0
 800288c:	d1f3      	bne.n	8002876 <eMBRTUReceive+0x2a>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800288e:	f814 2b01 	ldrb.w	r2, [r4], #1
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8002892:	8829      	ldrh	r1, [r5, #0]
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8002894:	f888 2000 	strb.w	r2, [r8]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8002898:	3903      	subs	r1, #3
 800289a:	8039      	strh	r1, [r7, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800289c:	6034      	str	r4, [r6, #0]
        xFrameReceived = TRUE;
 800289e:	e7eb      	b.n	8002878 <eMBRTUReceive+0x2c>
 80028a0:	20003eac 	.word	0x20003eac
 80028a4:	080043b7 	.word	0x080043b7
 80028a8:	08004370 	.word	0x08004370
 80028ac:	080043dc 	.word	0x080043dc
 80028b0:	20003ee4 	.word	0x20003ee4

080028b4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80028ba:	4818      	ldr	r0, [pc, #96]	; (800291c <eMBRTUSend+0x68>)
 80028bc:	7805      	ldrb	r5, [r0, #0]
 80028be:	b2ed      	uxtb	r5, r5
 80028c0:	2d01      	cmp	r5, #1
 80028c2:	d128      	bne.n	8002916 <eMBRTUSend+0x62>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80028c4:	4c16      	ldr	r4, [pc, #88]	; (8002920 <eMBRTUSend+0x6c>)
 80028c6:	1e48      	subs	r0, r1, #1
 80028c8:	6020      	str	r0, [r4, #0]
        usSndBufferCount = 1;
 80028ca:	4c16      	ldr	r4, [pc, #88]	; (8002924 <eMBRTUSend+0x70>)
 80028cc:	8025      	strh	r5, [r4, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80028ce:	f801 3c01 	strb.w	r3, [r1, #-1]
        usSndBufferCount += usLength;
 80028d2:	8823      	ldrh	r3, [r4, #0]
 80028d4:	fa12 f283 	uxtah	r2, r2, r3
 80028d8:	b292      	uxth	r2, r2
 80028da:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 80028dc:	8821      	ldrh	r1, [r4, #0]
 80028de:	b289      	uxth	r1, r1
 80028e0:	f7ff ff68 	bl	80027b4 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80028e4:	8823      	ldrh	r3, [r4, #0]
 80028e6:	4910      	ldr	r1, [pc, #64]	; (8002928 <eMBRTUSend+0x74>)
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	b292      	uxth	r2, r2
 80028ee:	8022      	strh	r2, [r4, #0]
 80028f0:	b2c2      	uxtb	r2, r0
 80028f2:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80028f4:	8823      	ldrh	r3, [r4, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	b292      	uxth	r2, r2
 80028fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002900:	8022      	strh	r2, [r4, #0]
 8002902:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <eMBRTUSend+0x78>)
        vMBPortSerialEnable( FALSE, TRUE );
 8002906:	2000      	movs	r0, #0
 8002908:	4629      	mov	r1, r5
        eSndState = STATE_TX_XMIT;
 800290a:	701d      	strb	r5, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800290c:	f7ff fede 	bl	80026cc <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 8002910:	2000      	movs	r0, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002912:	b662      	cpsie	i
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 8002914:	bd38      	pop	{r3, r4, r5, pc}
        eStatus = MB_EIO;
 8002916:	2005      	movs	r0, #5
 8002918:	e7fb      	b.n	8002912 <eMBRTUSend+0x5e>
 800291a:	bf00      	nop
 800291c:	20003ea6 	.word	0x20003ea6
 8002920:	20003ea8 	.word	0x20003ea8
 8002924:	20003eae 	.word	0x20003eae
 8002928:	20003ee4 	.word	0x20003ee4
 800292c:	20003ea7 	.word	0x20003ea7

08002930 <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <xMBRTUReceiveFSM+0x78>)
 8002932:	781b      	ldrb	r3, [r3, #0]
{
 8002934:	b507      	push	{r0, r1, r2, lr}
    assert( eSndState == STATE_TX_IDLE );
 8002936:	b12b      	cbz	r3, 8002944 <xMBRTUReceiveFSM+0x14>
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <xMBRTUReceiveFSM+0x7c>)
 800293a:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <xMBRTUReceiveFSM+0x80>)
 800293c:	481d      	ldr	r0, [pc, #116]	; (80029b4 <xMBRTUReceiveFSM+0x84>)
 800293e:	21eb      	movs	r1, #235	; 0xeb
 8002940:	f000 fc0e 	bl	8003160 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8002944:	f10d 0007 	add.w	r0, sp, #7
 8002948:	f7ff feec 	bl	8002724 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <xMBRTUReceiveFSM+0x88>)
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	2a03      	cmp	r2, #3
 8002952:	d822      	bhi.n	800299a <xMBRTUReceiveFSM+0x6a>
 8002954:	e8df f002 	tbb	[pc, r2]
 8002958:	1f11021f 	.word	0x1f11021f
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800295c:	4917      	ldr	r1, [pc, #92]	; (80029bc <xMBRTUReceiveFSM+0x8c>)
 800295e:	2200      	movs	r2, #0
 8002960:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002962:	880a      	ldrh	r2, [r1, #0]
 8002964:	b292      	uxth	r2, r2
 8002966:	1c50      	adds	r0, r2, #1
 8002968:	b280      	uxth	r0, r0
 800296a:	8008      	strh	r0, [r1, #0]
 800296c:	4914      	ldr	r1, [pc, #80]	; (80029c0 <xMBRTUReceiveFSM+0x90>)
 800296e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002972:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 8002974:	2202      	movs	r2, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e00d      	b.n	8002996 <xMBRTUReceiveFSM+0x66>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <xMBRTUReceiveFSM+0x8c>)
 800297c:	8811      	ldrh	r1, [r2, #0]
 800297e:	b289      	uxth	r1, r1
 8002980:	29ff      	cmp	r1, #255	; 0xff
 8002982:	d80e      	bhi.n	80029a2 <xMBRTUReceiveFSM+0x72>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002984:	8813      	ldrh	r3, [r2, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	1c59      	adds	r1, r3, #1
 800298a:	b289      	uxth	r1, r1
 800298c:	8011      	strh	r1, [r2, #0]
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <xMBRTUReceiveFSM+0x90>)
 8002990:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002994:	54d1      	strb	r1, [r2, r3]
        }
        vMBPortTimersEnable(  );
 8002996:	f7ff fef9 	bl	800278c <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 800299a:	2000      	movs	r0, #0
 800299c:	b003      	add	sp, #12
 800299e:	f85d fb04 	ldr.w	pc, [sp], #4
            eRcvState = STATE_RX_ERROR;
 80029a2:	2203      	movs	r2, #3
 80029a4:	e7e7      	b.n	8002976 <xMBRTUReceiveFSM+0x46>
 80029a6:	bf00      	nop
 80029a8:	20003ea7 	.word	0x20003ea7
 80029ac:	0800440a 	.word	0x0800440a
 80029b0:	0800437e 	.word	0x0800437e
 80029b4:	080043dc 	.word	0x080043dc
 80029b8:	20003ea6 	.word	0x20003ea6
 80029bc:	20003eac 	.word	0x20003eac
 80029c0:	20003ee4 	.word	0x20003ee4

080029c4 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <xMBRTUTransmitFSM+0x6c>)
 80029c8:	7818      	ldrb	r0, [r3, #0]
 80029ca:	b2c0      	uxtb	r0, r0
 80029cc:	2801      	cmp	r0, #1
 80029ce:	d006      	beq.n	80029de <xMBRTUTransmitFSM+0x1a>
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <xMBRTUTransmitFSM+0x70>)
 80029d2:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <xMBRTUTransmitFSM+0x74>)
 80029d4:	4819      	ldr	r0, [pc, #100]	; (8002a3c <xMBRTUTransmitFSM+0x78>)
 80029d6:	f44f 7193 	mov.w	r1, #294	; 0x126
 80029da:	f000 fbc1 	bl	8003160 <__assert_func>

    switch ( eSndState )
 80029de:	4f18      	ldr	r7, [pc, #96]	; (8002a40 <xMBRTUTransmitFSM+0x7c>)
 80029e0:	783b      	ldrb	r3, [r7, #0]
 80029e2:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80029e6:	b11b      	cbz	r3, 80029f0 <xMBRTUTransmitFSM+0x2c>
 80029e8:	2e01      	cmp	r6, #1
 80029ea:	d005      	beq.n	80029f8 <xMBRTUTransmitFSM+0x34>
    BOOL            xNeedPoll = FALSE;
 80029ec:	2500      	movs	r5, #0
 80029ee:	e01d      	b.n	8002a2c <xMBRTUTransmitFSM+0x68>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80029f0:	4631      	mov	r1, r6
 80029f2:	f7ff fe6b 	bl	80026cc <vMBPortSerialEnable>
 80029f6:	e7f9      	b.n	80029ec <xMBRTUTransmitFSM+0x28>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80029f8:	4d12      	ldr	r5, [pc, #72]	; (8002a44 <xMBRTUTransmitFSM+0x80>)
 80029fa:	882c      	ldrh	r4, [r5, #0]
 80029fc:	b2a4      	uxth	r4, r4
 80029fe:	b164      	cbz	r4, 8002a1a <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8002a00:	4c11      	ldr	r4, [pc, #68]	; (8002a48 <xMBRTUTransmitFSM+0x84>)
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	7818      	ldrb	r0, [r3, #0]
 8002a06:	f7ff fe7b 	bl	8002700 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 8002a10:	882b      	ldrh	r3, [r5, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	802b      	strh	r3, [r5, #0]
 8002a18:	e7e8      	b.n	80029ec <xMBRTUTransmitFSM+0x28>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f7ff fe3a 	bl	8002694 <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 8002a20:	4621      	mov	r1, r4
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8002a22:	4605      	mov	r5, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8002a24:	4630      	mov	r0, r6
 8002a26:	f7ff fe51 	bl	80026cc <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8002a2a:	703c      	strb	r4, [r7, #0]
        }
        break;
    }

    return xNeedPoll;
}
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a30:	20003ea6 	.word	0x20003ea6
 8002a34:	08004488 	.word	0x08004488
 8002a38:	0800438f 	.word	0x0800438f
 8002a3c:	080043dc 	.word	0x080043dc
 8002a40:	20003ea7 	.word	0x20003ea7
 8002a44:	20003eae 	.word	0x20003eae
 8002a48:	20003ea8 	.word	0x20003ea8

08002a4c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8002a4c:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <xMBRTUTimerT35Expired+0x54>)
 8002a50:	7818      	ldrb	r0, [r3, #0]
 8002a52:	b2c0      	uxtb	r0, r0
 8002a54:	2802      	cmp	r0, #2
 8002a56:	461d      	mov	r5, r3
 8002a58:	d00b      	beq.n	8002a72 <xMBRTUTimerT35Expired+0x26>
 8002a5a:	2803      	cmp	r0, #3
 8002a5c:	d01d      	beq.n	8002a9a <xMBRTUTimerT35Expired+0x4e>
 8002a5e:	b950      	cbnz	r0, 8002a76 <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8002a60:	f7ff fe18 	bl	8002694 <xMBPortEventPost>
 8002a64:	4604      	mov	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8002a66:	f7ff fe9f 	bl	80027a8 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	702b      	strb	r3, [r5, #0]

    return xNeedPoll;
}
 8002a6e:	4620      	mov	r0, r4
 8002a70:	bd38      	pop	{r3, r4, r5, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8002a72:	2001      	movs	r0, #1
 8002a74:	e7f4      	b.n	8002a60 <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d0f2      	beq.n	8002a66 <xMBRTUTimerT35Expired+0x1a>
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	2a02      	cmp	r2, #2
 8002a84:	d009      	beq.n	8002a9a <xMBRTUTimerT35Expired+0x4e>
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d006      	beq.n	8002a9a <xMBRTUTimerT35Expired+0x4e>
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <xMBRTUTimerT35Expired+0x58>)
 8002a8e:	4a06      	ldr	r2, [pc, #24]	; (8002aa8 <xMBRTUTimerT35Expired+0x5c>)
 8002a90:	4806      	ldr	r0, [pc, #24]	; (8002aac <xMBRTUTimerT35Expired+0x60>)
 8002a92:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002a96:	f000 fb63 	bl	8003160 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 8002a9a:	2400      	movs	r4, #0
 8002a9c:	e7e3      	b.n	8002a66 <xMBRTUTimerT35Expired+0x1a>
 8002a9e:	bf00      	nop
 8002aa0:	20003ea6 	.word	0x20003ea6
 8002aa4:	08004425 	.word	0x08004425
 8002aa8:	080043a1 	.word	0x080043a1
 8002aac:	080043dc 	.word	0x080043dc

08002ab0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN 5 */
	osThreadDef(ModbusRTUTask, ModbusRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8002ab2:	4d07      	ldr	r5, [pc, #28]	; (8002ad0 <StartDefaultTask+0x20>)
 8002ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab6:	ac01      	add	r4, sp, #4
 8002ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(ModbusRTUTask), NULL); 
 8002abe:	2100      	movs	r1, #0
 8002ac0:	a801      	add	r0, sp, #4
 8002ac2:	f7fe fd8c 	bl	80015de <osThreadCreate>
	
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7fe fda1 	bl	800160e <osDelay>
 8002acc:	e7fb      	b.n	8002ac6 <StartDefaultTask+0x16>
 8002ace:	bf00      	nop
 8002ad0:	08004140 	.word	0x08004140

08002ad4 <SystemClock_Config>:
{
 8002ad4:	b530      	push	{r4, r5, lr}
 8002ad6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad8:	2230      	movs	r2, #48	; 0x30
 8002ada:	2100      	movs	r1, #0
 8002adc:	a808      	add	r0, sp, #32
 8002ade:	f000 fb9e 	bl	800321e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2214      	movs	r2, #20
 8002ae6:	a803      	add	r0, sp, #12
 8002ae8:	f000 fb99 	bl	800321e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	2400      	movs	r4, #0
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <SystemClock_Config+0x90>)
 8002af0:	9401      	str	r4, [sp, #4]
 8002af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <SystemClock_Config+0x94>)
 8002b06:	9402      	str	r4, [sp, #8]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	9302      	str	r3, [sp, #8]
 8002b18:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b22:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b28:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b2e:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b30:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b32:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b34:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b36:	2307      	movs	r3, #7
 8002b38:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b3c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b3e:	f7fd fe99 	bl	8000874 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b42:	230f      	movs	r3, #15
 8002b44:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b4a:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b4c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b52:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b54:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b56:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b58:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b5a:	f7fe f83b 	bl	8000bd4 <HAL_RCC_ClockConfig>
}
 8002b5e:	b015      	add	sp, #84	; 0x54
 8002b60:	bd30      	pop	{r4, r5, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40007000 	.word	0x40007000

08002b6c <main>:
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002b70:	f7fd fd06 	bl	8000580 <HAL_Init>
  SystemClock_Config();
 8002b74:	f7ff ffae 	bl	8002ad4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	2214      	movs	r2, #20
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b7e:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f000 fb4d 	bl	800321e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b84:	4b8b      	ldr	r3, [pc, #556]	; (8002db4 <main+0x248>)
 8002b86:	9401      	str	r4, [sp, #4]
 8002b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002b8a:	488b      	ldr	r0, [pc, #556]	; (8002db8 <main+0x24c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b8c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8002de4 <main+0x278>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b90:	f042 0210 	orr.w	r2, r2, #16
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
 8002b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b98:	f002 0210 	and.w	r2, r2, #16
 8002b9c:	9201      	str	r2, [sp, #4]
 8002b9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	9402      	str	r4, [sp, #8]
 8002ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba4:	f042 0204 	orr.w	r2, r2, #4
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8002baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bac:	f002 0204 	and.w	r2, r2, #4
 8002bb0:	9202      	str	r2, [sp, #8]
 8002bb2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb4:	9403      	str	r4, [sp, #12]
 8002bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002bc4:	9203      	str	r2, [sp, #12]
 8002bc6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	9404      	str	r4, [sp, #16]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	f002 0201 	and.w	r2, r2, #1
 8002bd8:	9204      	str	r2, [sp, #16]
 8002bda:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	9405      	str	r4, [sp, #20]
 8002bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be0:	f042 0202 	orr.w	r2, r2, #2
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
 8002be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be8:	f002 0202 	and.w	r2, r2, #2
 8002bec:	9205      	str	r2, [sp, #20]
 8002bee:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf0:	9406      	str	r4, [sp, #24]
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf4:	f042 0208 	orr.w	r2, r2, #8
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002c02:	4622      	mov	r2, r4
 8002c04:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c06:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002c08:	f7fd fe2a 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	486a      	ldr	r0, [pc, #424]	; (8002dbc <main+0x250>)
 8002c12:	f7fd fe25 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002c16:	4622      	mov	r2, r4
 8002c18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002c1c:	4868      	ldr	r0, [pc, #416]	; (8002dc0 <main+0x254>)
 8002c1e:	f7fd fe1f 	bl	8000860 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c22:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002c24:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002c26:	a907      	add	r1, sp, #28
 8002c28:	4863      	ldr	r0, [pc, #396]	; (8002db8 <main+0x24c>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002c2a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f7fd fd35 	bl	80006a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c36:	a907      	add	r1, sp, #28
 8002c38:	4860      	ldr	r0, [pc, #384]	; (8002dbc <main+0x250>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002c3a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c3c:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f7fd fd2c 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002c48:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	485b      	ldr	r0, [pc, #364]	; (8002dbc <main+0x250>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c52:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f7fd fd22 	bl	80006a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	a907      	add	r1, sp, #28
 8002c5e:	4859      	ldr	r0, [pc, #356]	; (8002dc4 <main+0x258>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002c60:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c62:	f04f 0a06 	mov.w	sl, #6
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c66:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c6c:	f7fd fd18 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002c70:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002c72:	a907      	add	r1, sp, #28
 8002c74:	4853      	ldr	r0, [pc, #332]	; (8002dc4 <main+0x258>)
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002c76:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c7e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002c82:	f7fd fd0d 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002c86:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	a907      	add	r1, sp, #28
 8002c8a:	484e      	ldr	r0, [pc, #312]	; (8002dc4 <main+0x258>)
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002c8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c90:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002c92:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f7fd fd01 	bl	80006a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	a907      	add	r1, sp, #28
 8002ca0:	4849      	ldr	r0, [pc, #292]	; (8002dc8 <main+0x25c>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002ca2:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f7fd fcf9 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	a907      	add	r1, sp, #28
 8002cb4:	4844      	ldr	r0, [pc, #272]	; (8002dc8 <main+0x25c>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002cb6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cba:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	f7fd fcee 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002cc4:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc8:	a907      	add	r1, sp, #28
 8002cca:	483d      	ldr	r0, [pc, #244]	; (8002dc0 <main+0x254>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002ccc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd4:	f7fd fce4 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002cd8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cdc:	a907      	add	r1, sp, #28
 8002cde:	4837      	ldr	r0, [pc, #220]	; (8002dbc <main+0x250>)
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002ce0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ce8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cec:	f7fd fcd8 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	a907      	add	r1, sp, #28
 8002cf6:	4833      	ldr	r0, [pc, #204]	; (8002dc4 <main+0x258>)
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002cf8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfa:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f7fd fccf 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002d02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d06:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d0a:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	482d      	ldr	r0, [pc, #180]	; (8002dc4 <main+0x258>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d0e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002d12:	2720      	movs	r7, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f7fd fcc2 	bl	80006a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	a907      	add	r1, sp, #28
 8002d1e:	4828      	ldr	r0, [pc, #160]	; (8002dc0 <main+0x254>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002d20:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d22:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d26:	f7fd fcbb 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d2e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d30:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d32:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	4824      	ldr	r0, [pc, #144]	; (8002dc8 <main+0x25c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d36:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d38:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d3c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f7fd fcae 	bl	80006a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002d44:	a907      	add	r1, sp, #28
 8002d46:	481c      	ldr	r0, [pc, #112]	; (8002db8 <main+0x24c>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002d48:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d4a:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002d50:	f7fd fca6 	bl	80006a0 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002d54:	481d      	ldr	r0, [pc, #116]	; (8002dcc <main+0x260>)
  huart2.Init.BaudRate = 19200;
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <main+0x264>)
  htim7.Instance = TIM7;
 8002d58:	4d1e      	ldr	r5, [pc, #120]	; (8002dd4 <main+0x268>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5a:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 19200;
 8002d5c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8002d60:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d64:	230c      	movs	r3, #12
 8002d66:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d68:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d6a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d70:	f7fe fac0 	bl	80012f4 <HAL_UART_Init>
  htim7.Instance = TIM7;
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <main+0x26c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002d76:	4e19      	ldr	r6, [pc, #100]	; (8002ddc <main+0x270>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d78:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d7a:	4628      	mov	r0, r5
  htim7.Init.Prescaler = 0;
 8002d7c:	e885 0018 	stmia.w	r5, {r3, r4}
  htim7.Init.Period = 0;
 8002d80:	60ec      	str	r4, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d82:	9407      	str	r4, [sp, #28]
 8002d84:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d86:	f7fe f927 	bl	8000fd8 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d8a:	a907      	add	r1, sp, #28
 8002d8c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d8e:	9707      	str	r7, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d90:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d92:	f7fe f93b 	bl	800100c <HAL_TIMEx_MasterConfigSynchronization>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002d96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d98:	ad07      	add	r5, sp, #28
 8002d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002da0:	4621      	mov	r1, r4
 8002da2:	a807      	add	r0, sp, #28
 8002da4:	f7fe fc1b 	bl	80015de <osThreadCreate>
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <main+0x274>)
 8002daa:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002dac:	f7fe fc12 	bl	80015d4 <osKernelStart>
 8002db0:	e7fe      	b.n	8002db0 <main+0x244>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	40020c00 	.word	0x40020c00
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	20003fe8 	.word	0x20003fe8
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	20004028 	.word	0x20004028
 8002dd8:	40001400 	.word	0x40001400
 8002ddc:	08004154 	.word	0x08004154
 8002de0:	20003fe4 	.word	0x20003fe4
 8002de4:	10120000 	.word	0x10120000

08002de8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002de8:	6802      	ldr	r2, [r0, #0]
 8002dea:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002df0:	f7fd bbe0 	b.w	80005b4 <HAL_IncTick>
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40001000 	.word	0x40001000

08002dfc <ModbusRTUTask>:
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void ModbusRTUTask(void const * argument)
{ 
  /* ABCDEF */
  usRegInputBuf[0] = 11;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <ModbusRTUTask+0x40>)
{ 
 8002dfe:	b507      	push	{r0, r1, r2, lr}
  usRegInputBuf[0] = 11;
 8002e00:	220b      	movs	r2, #11
 8002e02:	801a      	strh	r2, [r3, #0]
  usRegInputBuf[1] = 22;
 8002e04:	2216      	movs	r2, #22
 8002e06:	805a      	strh	r2, [r3, #2]
  usRegInputBuf[2] = 33;
 8002e08:	2221      	movs	r2, #33	; 0x21
 8002e0a:	809a      	strh	r2, [r3, #4]
  usRegInputBuf[3] = 44;
 8002e0c:	222c      	movs	r2, #44	; 0x2c
 8002e0e:	80da      	strh	r2, [r3, #6]
  usRegInputBuf[4] = 55;
 8002e10:	2237      	movs	r2, #55	; 0x37
 8002e12:	811a      	strh	r2, [r3, #8]
  usRegInputBuf[5] = 66;
 8002e14:	2242      	movs	r2, #66	; 0x42
 8002e16:	815a      	strh	r2, [r3, #10]
  usRegInputBuf[6] = 77;
 8002e18:	224d      	movs	r2, #77	; 0x4d
 8002e1a:	819a      	strh	r2, [r3, #12]
  usRegInputBuf[7] = 88;  
  
  eMBErrorCode eStatus = eMBInit( MB_RTU, 1, 3, 19200, MB_PAR_NONE );
 8002e1c:	2000      	movs	r0, #0
  usRegInputBuf[7] = 88;  
 8002e1e:	2258      	movs	r2, #88	; 0x58
 8002e20:	81da      	strh	r2, [r3, #14]
  eMBErrorCode eStatus = eMBInit( MB_RTU, 1, 3, 19200, MB_PAR_NONE );
 8002e22:	2101      	movs	r1, #1
 8002e24:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8002e28:	2203      	movs	r2, #3
 8002e2a:	9000      	str	r0, [sp, #0]
 8002e2c:	f7ff fb4a 	bl	80024c4 <eMBInit>
  eStatus = eMBEnable();
 8002e30:	f7ff fba0 	bl	8002574 <eMBEnable>
  (void)eStatus;
  
  while(1) {
    eMBPoll();           
 8002e34:	f7ff fbb0 	bl	8002598 <eMBPoll>
 8002e38:	e7fc      	b.n	8002e34 <ModbusRTUTask+0x38>
 8002e3a:	bf00      	nop
 8002e3c:	20003eb0 	.word	0x20003eb0

08002e40 <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8002e40:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
{
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4614      	mov	r4, r2
    if( ( usAddress >= REG_INPUT_START )
 8002e48:	d31b      	bcc.n	8002e82 <eMBRegInputCB+0x42>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8002e4a:	188b      	adds	r3, r1, r2
 8002e4c:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8002e50:	dc17      	bgt.n	8002e82 <eMBRegInputCB+0x42>
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <eMBRegInputCB+0x50>)
 8002e54:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8002e58:	f2a1 71d2 	subw	r1, r1, #2002	; 0x7d2
 8002e5c:	3002      	adds	r0, #2
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
 8002e5e:	b934      	cbnz	r4, 8002e6e <eMBRegInputCB+0x2e>
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
            iRegIndex++;
            usNRegs--;
        }
				
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e64:	480b      	ldr	r0, [pc, #44]	; (8002e94 <eMBRegInputCB+0x54>)
 8002e66:	f7fd fd00 	bl	800086a <HAL_GPIO_TogglePin>
    eMBErrorCode    eStatus = MB_ENOERR;
 8002e6a:	4620      	mov	r0, r4
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002e6c:	bd10      	pop	{r4, pc}
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8002e6e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8002e72:	f800 3c01 	strb.w	r3, [r0, #-1]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8002e76:	0a1a      	lsrs	r2, r3, #8
            usNRegs--;
 8002e78:	3c01      	subs	r4, #1
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8002e7a:	f800 2c02 	strb.w	r2, [r0, #-2]
            usNRegs--;
 8002e7e:	b2a4      	uxth	r4, r4
 8002e80:	e7ec      	b.n	8002e5c <eMBRegInputCB+0x1c>
    }
    else
    {
			  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8002e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <eMBRegInputCB+0x54>)
 8002e88:	f7fd fcef 	bl	800086a <HAL_GPIO_TogglePin>
        eStatus = MB_ENOREG;			
 8002e8c:	2001      	movs	r0, #1
    }

    return eStatus;
}
 8002e8e:	bd10      	pop	{r4, pc}
 8002e90:	20003eb0 	.word	0x20003eb0
 8002e94:	40020c00 	.word	0x40020c00

08002e98 <eMBRegHoldingCB>:
 8002e98:	2001      	movs	r0, #1
 8002e9a:	4770      	bx	lr

08002e9c <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	4770      	bx	lr

08002ea0 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_MspInit+0x40>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002eae:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002eb2:	6459      	str	r1, [r3, #68]	; 0x44
 8002eb4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002eb6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002eba:	9100      	str	r1, [sp, #0]
 8002ebc:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	9201      	str	r2, [sp, #4]
 8002ec0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ec2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002ec6:	6419      	str	r1, [r3, #64]	; 0x40
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ed0:	210f      	movs	r1, #15
 8002ed2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ed8:	f7fd fb90 	bl	80005fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	b003      	add	sp, #12
 8002ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ee8:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_TIM_Base_MspInit+0x38>)
 8002eec:	6802      	ldr	r2, [r0, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d113      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ef2:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	9201      	str	r2, [sp, #4]
 8002efa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002efc:	f041 0120 	orr.w	r1, r1, #32
 8002f00:	6419      	str	r1, [r3, #64]	; 0x40
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002f0a:	2037      	movs	r0, #55	; 0x37
 8002f0c:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f0e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002f10:	f7fd fb74 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f14:	2037      	movs	r0, #55	; 0x37
 8002f16:	f7fd fba5 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002f1a:	b003      	add	sp, #12
 8002f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f20:	40001400 	.word	0x40001400

08002f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4604      	mov	r4, r0
 8002f28:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	2214      	movs	r2, #20
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	a803      	add	r0, sp, #12
 8002f30:	f000 f975 	bl	800321e <memset>
  if(huart->Instance==USART2)
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_UART_MspInit+0x78>)
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d12c      	bne.n	8002f96 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002f40:	2400      	movs	r4, #0
 8002f42:	9401      	str	r4, [sp, #4]
 8002f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	4816      	ldr	r0, [pc, #88]	; (8002fa0 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f50:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002f54:	9201      	str	r2, [sp, #4]
 8002f56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	9402      	str	r4, [sp, #8]
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	9302      	str	r3, [sp, #8]
 8002f6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f7e:	2307      	movs	r3, #7
 8002f80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f7fd fb8d 	bl	80006a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f86:	2026      	movs	r0, #38	; 0x26
 8002f88:	4622      	mov	r2, r4
 8002f8a:	2105      	movs	r1, #5
 8002f8c:	f7fd fb36 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f90:	2026      	movs	r0, #38	; 0x26
 8002f92:	f7fd fb67 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f96:	b008      	add	sp, #32
 8002f98:	bd10      	pop	{r4, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	40020000 	.word	0x40020000

08002fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002fa6:	4601      	mov	r1, r0
{
 8002fa8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002faa:	2200      	movs	r2, #0
 8002fac:	2036      	movs	r0, #54	; 0x36
 8002fae:	f7fd fb25 	bl	80005fc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002fb2:	2036      	movs	r0, #54	; 0x36
 8002fb4:	f7fd fb56 	bl	8000664 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fb8:	2500      	movs	r5, #0
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_InitTick+0x6c>)
 8002fbc:	9502      	str	r5, [sp, #8]
 8002fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fc0:	4c14      	ldr	r4, [pc, #80]	; (8003014 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fc2:	f042 0210 	orr.w	r2, r2, #16
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fd0:	a901      	add	r1, sp, #4
 8002fd2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fd4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fd6:	f7fd feb7 	bl	8000d48 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fda:	f7fd fe95 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_InitTick+0x74>)
 8002fe0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002fe2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002fe6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fe8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_InitTick+0x78>)
 8002fec:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ff0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ff2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ff4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002ff6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ffa:	f7fd ffed 	bl	8000fd8 <HAL_TIM_Base_Init>
 8002ffe:	b920      	cbnz	r0, 800300a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003000:	4620      	mov	r0, r4
 8003002:	f7fd febf 	bl	8000d84 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003006:	b009      	add	sp, #36	; 0x24
 8003008:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800300a:	2001      	movs	r0, #1
 800300c:	e7fb      	b.n	8003006 <HAL_InitTick+0x62>
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	20004064 	.word	0x20004064
 8003018:	40001000 	.word	0x40001000
 800301c:	000f4240 	.word	0x000f4240

08003020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003020:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8003022:	4c11      	ldr	r4, [pc, #68]	; (8003068 <USART2_IRQHandler+0x48>)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	6819      	ldr	r1, [r3, #0]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8003028:	68da      	ldr	r2, [r3, #12]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 800302a:	0688      	lsls	r0, r1, #26
 800302c:	d50e      	bpl.n	800304c <USART2_IRQHandler+0x2c>
 800302e:	0691      	lsls	r1, r2, #26
 8003030:	d50c      	bpl.n	800304c <USART2_IRQHandler+0x2c>
    pxMBFrameCBByteReceived();
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <USART2_IRQHandler+0x4c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 8003038:	2300      	movs	r3, #0
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	9201      	str	r2, [sp, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003048:	b002      	add	sp, #8
 800304a:	bd10      	pop	{r4, pc}
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	0612      	lsls	r2, r2, #24
 8003050:	d506      	bpl.n	8003060 <USART2_IRQHandler+0x40>
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	d503      	bpl.n	8003060 <USART2_IRQHandler+0x40>
    pxMBFrameCBTransmitterEmpty();    
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <USART2_IRQHandler+0x50>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4798      	blx	r3
    return ;
 800305e:	e7f3      	b.n	8003048 <USART2_IRQHandler+0x28>
  HAL_UART_IRQHandler(&huart2);
 8003060:	4801      	ldr	r0, [pc, #4]	; (8003068 <USART2_IRQHandler+0x48>)
 8003062:	f7fe fa0f 	bl	8001484 <HAL_UART_IRQHandler>
 8003066:	e7ef      	b.n	8003048 <USART2_IRQHandler+0x28>
 8003068:	20003fe8 	.word	0x20003fe8
 800306c:	20003ed8 	.word	0x20003ed8
 8003070:	20003ed0 	.word	0x20003ed0

08003074 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003074:	4801      	ldr	r0, [pc, #4]	; (800307c <TIM6_DAC_IRQHandler+0x8>)
 8003076:	f7fd bea9 	b.w	8000dcc <HAL_TIM_IRQHandler>
 800307a:	bf00      	nop
 800307c:	20004064 	.word	0x20004064

08003080 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <TIM7_IRQHandler+0x34>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	07d1      	lsls	r1, r2, #31
 800308a:	d50e      	bpl.n	80030aa <TIM7_IRQHandler+0x2a>
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	07d2      	lsls	r2, r2, #31
 8003090:	d50b      	bpl.n	80030aa <TIM7_IRQHandler+0x2a>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8003092:	f06f 0201 	mvn.w	r2, #1
 8003096:	611a      	str	r2, [r3, #16]
    if (!--downcounter)
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <TIM7_IRQHandler+0x38>)
 800309a:	8813      	ldrh	r3, [r2, #0]
 800309c:	3b01      	subs	r3, #1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	8013      	strh	r3, [r2, #0]
 80030a2:	b913      	cbnz	r3, 80030aa <TIM7_IRQHandler+0x2a>
      pxMBPortCBTimerExpired();
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <TIM7_IRQHandler+0x3c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4798      	blx	r3
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030aa:	4802      	ldr	r0, [pc, #8]	; (80030b4 <TIM7_IRQHandler+0x34>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 80030b0:	f7fd be8c 	b.w	8000dcc <HAL_TIM_IRQHandler>
 80030b4:	20004028 	.word	0x20004028
 80030b8:	20003ea2 	.word	0x20003ea2
 80030bc:	20003ed4 	.word	0x20003ed4

080030c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c0:	490f      	ldr	r1, [pc, #60]	; (8003100 <SystemInit+0x40>)
 80030c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <SystemInit+0x44>)
 80030d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030d2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80030da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <SystemInit+0x48>)
 80030ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030f4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030fa:	608b      	str	r3, [r1, #8]
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00
 8003104:	40023800 	.word	0x40023800
 8003108:	24003010 	.word	0x24003010

0800310c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800310c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003112:	e003      	b.n	800311c <LoopCopyDataInit>

08003114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800311a:	3104      	adds	r1, #4

0800311c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800311c:	480b      	ldr	r0, [pc, #44]	; (800314c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003124:	d3f6      	bcc.n	8003114 <CopyDataInit>
  ldr  r2, =_sbss
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003128:	e002      	b.n	8003130 <LoopFillZerobss>

0800312a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800312a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800312c:	f842 3b04 	str.w	r3, [r2], #4

08003130 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003134:	d3f9      	bcc.n	800312a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003136:	f7ff ffc3 	bl	80030c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800313a:	f000 f841 	bl	80031c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800313e:	f7ff fd15 	bl	8002b6c <main>
  bx  lr    
 8003142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003144:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003148:	080045bc 	.word	0x080045bc
  ldr  r0, =_sdata
 800314c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003150:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 8003154:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8003158:	200040a4 	.word	0x200040a4

0800315c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800315c:	e7fe      	b.n	800315c <ADC_IRQHandler>
	...

08003160 <__assert_func>:
 8003160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003162:	461c      	mov	r4, r3
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <__assert_func+0x2c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4605      	mov	r5, r0
 800316a:	68d8      	ldr	r0, [r3, #12]
 800316c:	b152      	cbz	r2, 8003184 <__assert_func+0x24>
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <__assert_func+0x30>)
 8003170:	9202      	str	r2, [sp, #8]
 8003172:	e88d 000a 	stmia.w	sp, {r1, r3}
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	4906      	ldr	r1, [pc, #24]	; (8003194 <__assert_func+0x34>)
 800317c:	f000 f80e 	bl	800319c <fiprintf>
 8003180:	f000 fbec 	bl	800395c <abort>
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__assert_func+0x38>)
 8003186:	461a      	mov	r2, r3
 8003188:	e7f2      	b.n	8003170 <__assert_func+0x10>
 800318a:	bf00      	nop
 800318c:	20000090 	.word	0x20000090
 8003190:	080044d5 	.word	0x080044d5
 8003194:	080044e2 	.word	0x080044e2
 8003198:	08004510 	.word	0x08004510

0800319c <fiprintf>:
 800319c:	b40e      	push	{r1, r2, r3}
 800319e:	b503      	push	{r0, r1, lr}
 80031a0:	4601      	mov	r1, r0
 80031a2:	ab03      	add	r3, sp, #12
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <fiprintf+0x20>)
 80031a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80031aa:	6800      	ldr	r0, [r0, #0]
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	f000 f869 	bl	8003284 <_vfiprintf_r>
 80031b2:	b002      	add	sp, #8
 80031b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b8:	b003      	add	sp, #12
 80031ba:	4770      	bx	lr
 80031bc:	20000090 	.word	0x20000090

080031c0 <__libc_init_array>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	4e0d      	ldr	r6, [pc, #52]	; (80031f8 <__libc_init_array+0x38>)
 80031c4:	4c0d      	ldr	r4, [pc, #52]	; (80031fc <__libc_init_array+0x3c>)
 80031c6:	1ba4      	subs	r4, r4, r6
 80031c8:	10a4      	asrs	r4, r4, #2
 80031ca:	2500      	movs	r5, #0
 80031cc:	42a5      	cmp	r5, r4
 80031ce:	d109      	bne.n	80031e4 <__libc_init_array+0x24>
 80031d0:	4e0b      	ldr	r6, [pc, #44]	; (8003200 <__libc_init_array+0x40>)
 80031d2:	4c0c      	ldr	r4, [pc, #48]	; (8003204 <__libc_init_array+0x44>)
 80031d4:	f000 ffa8 	bl	8004128 <_init>
 80031d8:	1ba4      	subs	r4, r4, r6
 80031da:	10a4      	asrs	r4, r4, #2
 80031dc:	2500      	movs	r5, #0
 80031de:	42a5      	cmp	r5, r4
 80031e0:	d105      	bne.n	80031ee <__libc_init_array+0x2e>
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e8:	4798      	blx	r3
 80031ea:	3501      	adds	r5, #1
 80031ec:	e7ee      	b.n	80031cc <__libc_init_array+0xc>
 80031ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031f2:	4798      	blx	r3
 80031f4:	3501      	adds	r5, #1
 80031f6:	e7f2      	b.n	80031de <__libc_init_array+0x1e>
 80031f8:	080045b4 	.word	0x080045b4
 80031fc:	080045b4 	.word	0x080045b4
 8003200:	080045b4 	.word	0x080045b4
 8003204:	080045b8 	.word	0x080045b8

08003208 <memcpy>:
 8003208:	b510      	push	{r4, lr}
 800320a:	1e43      	subs	r3, r0, #1
 800320c:	440a      	add	r2, r1
 800320e:	4291      	cmp	r1, r2
 8003210:	d100      	bne.n	8003214 <memcpy+0xc>
 8003212:	bd10      	pop	{r4, pc}
 8003214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800321c:	e7f7      	b.n	800320e <memcpy+0x6>

0800321e <memset>:
 800321e:	4402      	add	r2, r0
 8003220:	4603      	mov	r3, r0
 8003222:	4293      	cmp	r3, r2
 8003224:	d100      	bne.n	8003228 <memset+0xa>
 8003226:	4770      	bx	lr
 8003228:	f803 1b01 	strb.w	r1, [r3], #1
 800322c:	e7f9      	b.n	8003222 <memset+0x4>

0800322e <__sfputc_r>:
 800322e:	6893      	ldr	r3, [r2, #8]
 8003230:	3b01      	subs	r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	b410      	push	{r4}
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	da09      	bge.n	800324e <__sfputc_r+0x20>
 800323a:	6994      	ldr	r4, [r2, #24]
 800323c:	42a3      	cmp	r3, r4
 800323e:	db02      	blt.n	8003246 <__sfputc_r+0x18>
 8003240:	b2cb      	uxtb	r3, r1
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d103      	bne.n	800324e <__sfputc_r+0x20>
 8003246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800324a:	f000 bac7 	b.w	80037dc <__swbuf_r>
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	1c58      	adds	r0, r3, #1
 8003252:	6010      	str	r0, [r2, #0]
 8003254:	7019      	strb	r1, [r3, #0]
 8003256:	b2c8      	uxtb	r0, r1
 8003258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800325c:	4770      	bx	lr

0800325e <__sfputs_r>:
 800325e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003260:	4606      	mov	r6, r0
 8003262:	460f      	mov	r7, r1
 8003264:	4614      	mov	r4, r2
 8003266:	18d5      	adds	r5, r2, r3
 8003268:	42ac      	cmp	r4, r5
 800326a:	d101      	bne.n	8003270 <__sfputs_r+0x12>
 800326c:	2000      	movs	r0, #0
 800326e:	e007      	b.n	8003280 <__sfputs_r+0x22>
 8003270:	463a      	mov	r2, r7
 8003272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003276:	4630      	mov	r0, r6
 8003278:	f7ff ffd9 	bl	800322e <__sfputc_r>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d1f3      	bne.n	8003268 <__sfputs_r+0xa>
 8003280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003284 <_vfiprintf_r>:
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	b09d      	sub	sp, #116	; 0x74
 800328a:	460c      	mov	r4, r1
 800328c:	4617      	mov	r7, r2
 800328e:	9303      	str	r3, [sp, #12]
 8003290:	4606      	mov	r6, r0
 8003292:	b118      	cbz	r0, 800329c <_vfiprintf_r+0x18>
 8003294:	6983      	ldr	r3, [r0, #24]
 8003296:	b90b      	cbnz	r3, 800329c <_vfiprintf_r+0x18>
 8003298:	f000 fc5a 	bl	8003b50 <__sinit>
 800329c:	4b7c      	ldr	r3, [pc, #496]	; (8003490 <_vfiprintf_r+0x20c>)
 800329e:	429c      	cmp	r4, r3
 80032a0:	d157      	bne.n	8003352 <_vfiprintf_r+0xce>
 80032a2:	6874      	ldr	r4, [r6, #4]
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	0718      	lsls	r0, r3, #28
 80032a8:	d55d      	bpl.n	8003366 <_vfiprintf_r+0xe2>
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d05a      	beq.n	8003366 <_vfiprintf_r+0xe2>
 80032b0:	2300      	movs	r3, #0
 80032b2:	9309      	str	r3, [sp, #36]	; 0x24
 80032b4:	2320      	movs	r3, #32
 80032b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ba:	2330      	movs	r3, #48	; 0x30
 80032bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c0:	f04f 0b01 	mov.w	fp, #1
 80032c4:	46b8      	mov	r8, r7
 80032c6:	4645      	mov	r5, r8
 80032c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d155      	bne.n	800337c <_vfiprintf_r+0xf8>
 80032d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80032d4:	d00b      	beq.n	80032ee <_vfiprintf_r+0x6a>
 80032d6:	4653      	mov	r3, sl
 80032d8:	463a      	mov	r2, r7
 80032da:	4621      	mov	r1, r4
 80032dc:	4630      	mov	r0, r6
 80032de:	f7ff ffbe 	bl	800325e <__sfputs_r>
 80032e2:	3001      	adds	r0, #1
 80032e4:	f000 80c4 	beq.w	8003470 <_vfiprintf_r+0x1ec>
 80032e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ea:	4453      	add	r3, sl
 80032ec:	9309      	str	r3, [sp, #36]	; 0x24
 80032ee:	f898 3000 	ldrb.w	r3, [r8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80bc 	beq.w	8003470 <_vfiprintf_r+0x1ec>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032fe:	9304      	str	r3, [sp, #16]
 8003300:	9307      	str	r3, [sp, #28]
 8003302:	9205      	str	r2, [sp, #20]
 8003304:	9306      	str	r3, [sp, #24]
 8003306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800330a:	931a      	str	r3, [sp, #104]	; 0x68
 800330c:	2205      	movs	r2, #5
 800330e:	7829      	ldrb	r1, [r5, #0]
 8003310:	4860      	ldr	r0, [pc, #384]	; (8003494 <_vfiprintf_r+0x210>)
 8003312:	f7fc ff5d 	bl	80001d0 <memchr>
 8003316:	f105 0801 	add.w	r8, r5, #1
 800331a:	9b04      	ldr	r3, [sp, #16]
 800331c:	2800      	cmp	r0, #0
 800331e:	d131      	bne.n	8003384 <_vfiprintf_r+0x100>
 8003320:	06d9      	lsls	r1, r3, #27
 8003322:	bf44      	itt	mi
 8003324:	2220      	movmi	r2, #32
 8003326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800332a:	071a      	lsls	r2, r3, #28
 800332c:	bf44      	itt	mi
 800332e:	222b      	movmi	r2, #43	; 0x2b
 8003330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003334:	782a      	ldrb	r2, [r5, #0]
 8003336:	2a2a      	cmp	r2, #42	; 0x2a
 8003338:	d02c      	beq.n	8003394 <_vfiprintf_r+0x110>
 800333a:	9a07      	ldr	r2, [sp, #28]
 800333c:	2100      	movs	r1, #0
 800333e:	200a      	movs	r0, #10
 8003340:	46a8      	mov	r8, r5
 8003342:	3501      	adds	r5, #1
 8003344:	f898 3000 	ldrb.w	r3, [r8]
 8003348:	3b30      	subs	r3, #48	; 0x30
 800334a:	2b09      	cmp	r3, #9
 800334c:	d96d      	bls.n	800342a <_vfiprintf_r+0x1a6>
 800334e:	b371      	cbz	r1, 80033ae <_vfiprintf_r+0x12a>
 8003350:	e026      	b.n	80033a0 <_vfiprintf_r+0x11c>
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <_vfiprintf_r+0x214>)
 8003354:	429c      	cmp	r4, r3
 8003356:	d101      	bne.n	800335c <_vfiprintf_r+0xd8>
 8003358:	68b4      	ldr	r4, [r6, #8]
 800335a:	e7a3      	b.n	80032a4 <_vfiprintf_r+0x20>
 800335c:	4b4f      	ldr	r3, [pc, #316]	; (800349c <_vfiprintf_r+0x218>)
 800335e:	429c      	cmp	r4, r3
 8003360:	bf08      	it	eq
 8003362:	68f4      	ldreq	r4, [r6, #12]
 8003364:	e79e      	b.n	80032a4 <_vfiprintf_r+0x20>
 8003366:	4621      	mov	r1, r4
 8003368:	4630      	mov	r0, r6
 800336a:	f000 fa89 	bl	8003880 <__swsetup_r>
 800336e:	2800      	cmp	r0, #0
 8003370:	d09e      	beq.n	80032b0 <_vfiprintf_r+0x2c>
 8003372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003376:	b01d      	add	sp, #116	; 0x74
 8003378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337c:	2b25      	cmp	r3, #37	; 0x25
 800337e:	d0a7      	beq.n	80032d0 <_vfiprintf_r+0x4c>
 8003380:	46a8      	mov	r8, r5
 8003382:	e7a0      	b.n	80032c6 <_vfiprintf_r+0x42>
 8003384:	4a43      	ldr	r2, [pc, #268]	; (8003494 <_vfiprintf_r+0x210>)
 8003386:	1a80      	subs	r0, r0, r2
 8003388:	fa0b f000 	lsl.w	r0, fp, r0
 800338c:	4318      	orrs	r0, r3
 800338e:	9004      	str	r0, [sp, #16]
 8003390:	4645      	mov	r5, r8
 8003392:	e7bb      	b.n	800330c <_vfiprintf_r+0x88>
 8003394:	9a03      	ldr	r2, [sp, #12]
 8003396:	1d11      	adds	r1, r2, #4
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	9103      	str	r1, [sp, #12]
 800339c:	2a00      	cmp	r2, #0
 800339e:	db01      	blt.n	80033a4 <_vfiprintf_r+0x120>
 80033a0:	9207      	str	r2, [sp, #28]
 80033a2:	e004      	b.n	80033ae <_vfiprintf_r+0x12a>
 80033a4:	4252      	negs	r2, r2
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	9207      	str	r2, [sp, #28]
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	f898 3000 	ldrb.w	r3, [r8]
 80033b2:	2b2e      	cmp	r3, #46	; 0x2e
 80033b4:	d110      	bne.n	80033d8 <_vfiprintf_r+0x154>
 80033b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80033ba:	2b2a      	cmp	r3, #42	; 0x2a
 80033bc:	f108 0101 	add.w	r1, r8, #1
 80033c0:	d137      	bne.n	8003432 <_vfiprintf_r+0x1ae>
 80033c2:	9b03      	ldr	r3, [sp, #12]
 80033c4:	1d1a      	adds	r2, r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	9203      	str	r2, [sp, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfb8      	it	lt
 80033ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033d2:	f108 0802 	add.w	r8, r8, #2
 80033d6:	9305      	str	r3, [sp, #20]
 80033d8:	4d31      	ldr	r5, [pc, #196]	; (80034a0 <_vfiprintf_r+0x21c>)
 80033da:	f898 1000 	ldrb.w	r1, [r8]
 80033de:	2203      	movs	r2, #3
 80033e0:	4628      	mov	r0, r5
 80033e2:	f7fc fef5 	bl	80001d0 <memchr>
 80033e6:	b140      	cbz	r0, 80033fa <_vfiprintf_r+0x176>
 80033e8:	2340      	movs	r3, #64	; 0x40
 80033ea:	1b40      	subs	r0, r0, r5
 80033ec:	fa03 f000 	lsl.w	r0, r3, r0
 80033f0:	9b04      	ldr	r3, [sp, #16]
 80033f2:	4303      	orrs	r3, r0
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	f108 0801 	add.w	r8, r8, #1
 80033fa:	f898 1000 	ldrb.w	r1, [r8]
 80033fe:	4829      	ldr	r0, [pc, #164]	; (80034a4 <_vfiprintf_r+0x220>)
 8003400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003404:	2206      	movs	r2, #6
 8003406:	f108 0701 	add.w	r7, r8, #1
 800340a:	f7fc fee1 	bl	80001d0 <memchr>
 800340e:	2800      	cmp	r0, #0
 8003410:	d034      	beq.n	800347c <_vfiprintf_r+0x1f8>
 8003412:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <_vfiprintf_r+0x224>)
 8003414:	bb03      	cbnz	r3, 8003458 <_vfiprintf_r+0x1d4>
 8003416:	9b03      	ldr	r3, [sp, #12]
 8003418:	3307      	adds	r3, #7
 800341a:	f023 0307 	bic.w	r3, r3, #7
 800341e:	3308      	adds	r3, #8
 8003420:	9303      	str	r3, [sp, #12]
 8003422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003424:	444b      	add	r3, r9
 8003426:	9309      	str	r3, [sp, #36]	; 0x24
 8003428:	e74c      	b.n	80032c4 <_vfiprintf_r+0x40>
 800342a:	fb00 3202 	mla	r2, r0, r2, r3
 800342e:	2101      	movs	r1, #1
 8003430:	e786      	b.n	8003340 <_vfiprintf_r+0xbc>
 8003432:	2300      	movs	r3, #0
 8003434:	9305      	str	r3, [sp, #20]
 8003436:	4618      	mov	r0, r3
 8003438:	250a      	movs	r5, #10
 800343a:	4688      	mov	r8, r1
 800343c:	3101      	adds	r1, #1
 800343e:	f898 2000 	ldrb.w	r2, [r8]
 8003442:	3a30      	subs	r2, #48	; 0x30
 8003444:	2a09      	cmp	r2, #9
 8003446:	d903      	bls.n	8003450 <_vfiprintf_r+0x1cc>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0c5      	beq.n	80033d8 <_vfiprintf_r+0x154>
 800344c:	9005      	str	r0, [sp, #20]
 800344e:	e7c3      	b.n	80033d8 <_vfiprintf_r+0x154>
 8003450:	fb05 2000 	mla	r0, r5, r0, r2
 8003454:	2301      	movs	r3, #1
 8003456:	e7f0      	b.n	800343a <_vfiprintf_r+0x1b6>
 8003458:	ab03      	add	r3, sp, #12
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4622      	mov	r2, r4
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <_vfiprintf_r+0x228>)
 8003460:	a904      	add	r1, sp, #16
 8003462:	4630      	mov	r0, r6
 8003464:	f3af 8000 	nop.w
 8003468:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800346c:	4681      	mov	r9, r0
 800346e:	d1d8      	bne.n	8003422 <_vfiprintf_r+0x19e>
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	065b      	lsls	r3, r3, #25
 8003474:	f53f af7d 	bmi.w	8003372 <_vfiprintf_r+0xee>
 8003478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800347a:	e77c      	b.n	8003376 <_vfiprintf_r+0xf2>
 800347c:	ab03      	add	r3, sp, #12
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4622      	mov	r2, r4
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <_vfiprintf_r+0x228>)
 8003484:	a904      	add	r1, sp, #16
 8003486:	4630      	mov	r0, r6
 8003488:	f000 f888 	bl	800359c <_printf_i>
 800348c:	e7ec      	b.n	8003468 <_vfiprintf_r+0x1e4>
 800348e:	bf00      	nop
 8003490:	0800456c 	.word	0x0800456c
 8003494:	08004518 	.word	0x08004518
 8003498:	0800458c 	.word	0x0800458c
 800349c:	0800454c 	.word	0x0800454c
 80034a0:	0800451e 	.word	0x0800451e
 80034a4:	08004522 	.word	0x08004522
 80034a8:	00000000 	.word	0x00000000
 80034ac:	0800325f 	.word	0x0800325f

080034b0 <_printf_common>:
 80034b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b4:	4691      	mov	r9, r2
 80034b6:	461f      	mov	r7, r3
 80034b8:	688a      	ldr	r2, [r1, #8]
 80034ba:	690b      	ldr	r3, [r1, #16]
 80034bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bfb8      	it	lt
 80034c4:	4613      	movlt	r3, r2
 80034c6:	f8c9 3000 	str.w	r3, [r9]
 80034ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034ce:	4606      	mov	r6, r0
 80034d0:	460c      	mov	r4, r1
 80034d2:	b112      	cbz	r2, 80034da <_printf_common+0x2a>
 80034d4:	3301      	adds	r3, #1
 80034d6:	f8c9 3000 	str.w	r3, [r9]
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	0699      	lsls	r1, r3, #26
 80034de:	bf42      	ittt	mi
 80034e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034e4:	3302      	addmi	r3, #2
 80034e6:	f8c9 3000 	strmi.w	r3, [r9]
 80034ea:	6825      	ldr	r5, [r4, #0]
 80034ec:	f015 0506 	ands.w	r5, r5, #6
 80034f0:	d107      	bne.n	8003502 <_printf_common+0x52>
 80034f2:	f104 0a19 	add.w	sl, r4, #25
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	f8d9 2000 	ldr.w	r2, [r9]
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	429d      	cmp	r5, r3
 8003500:	db29      	blt.n	8003556 <_printf_common+0xa6>
 8003502:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	3300      	adds	r3, #0
 800350a:	bf18      	it	ne
 800350c:	2301      	movne	r3, #1
 800350e:	0692      	lsls	r2, r2, #26
 8003510:	d42e      	bmi.n	8003570 <_printf_common+0xc0>
 8003512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003516:	4639      	mov	r1, r7
 8003518:	4630      	mov	r0, r6
 800351a:	47c0      	blx	r8
 800351c:	3001      	adds	r0, #1
 800351e:	d021      	beq.n	8003564 <_printf_common+0xb4>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	68e5      	ldr	r5, [r4, #12]
 8003524:	f8d9 2000 	ldr.w	r2, [r9]
 8003528:	f003 0306 	and.w	r3, r3, #6
 800352c:	2b04      	cmp	r3, #4
 800352e:	bf08      	it	eq
 8003530:	1aad      	subeq	r5, r5, r2
 8003532:	68a3      	ldr	r3, [r4, #8]
 8003534:	6922      	ldr	r2, [r4, #16]
 8003536:	bf0c      	ite	eq
 8003538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800353c:	2500      	movne	r5, #0
 800353e:	4293      	cmp	r3, r2
 8003540:	bfc4      	itt	gt
 8003542:	1a9b      	subgt	r3, r3, r2
 8003544:	18ed      	addgt	r5, r5, r3
 8003546:	f04f 0900 	mov.w	r9, #0
 800354a:	341a      	adds	r4, #26
 800354c:	454d      	cmp	r5, r9
 800354e:	d11b      	bne.n	8003588 <_printf_common+0xd8>
 8003550:	2000      	movs	r0, #0
 8003552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003556:	2301      	movs	r3, #1
 8003558:	4652      	mov	r2, sl
 800355a:	4639      	mov	r1, r7
 800355c:	4630      	mov	r0, r6
 800355e:	47c0      	blx	r8
 8003560:	3001      	adds	r0, #1
 8003562:	d103      	bne.n	800356c <_printf_common+0xbc>
 8003564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356c:	3501      	adds	r5, #1
 800356e:	e7c2      	b.n	80034f6 <_printf_common+0x46>
 8003570:	18e1      	adds	r1, r4, r3
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	2030      	movs	r0, #48	; 0x30
 8003576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800357a:	4422      	add	r2, r4
 800357c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003584:	3302      	adds	r3, #2
 8003586:	e7c4      	b.n	8003512 <_printf_common+0x62>
 8003588:	2301      	movs	r3, #1
 800358a:	4622      	mov	r2, r4
 800358c:	4639      	mov	r1, r7
 800358e:	4630      	mov	r0, r6
 8003590:	47c0      	blx	r8
 8003592:	3001      	adds	r0, #1
 8003594:	d0e6      	beq.n	8003564 <_printf_common+0xb4>
 8003596:	f109 0901 	add.w	r9, r9, #1
 800359a:	e7d7      	b.n	800354c <_printf_common+0x9c>

0800359c <_printf_i>:
 800359c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035a0:	4617      	mov	r7, r2
 80035a2:	7e0a      	ldrb	r2, [r1, #24]
 80035a4:	b085      	sub	sp, #20
 80035a6:	2a6e      	cmp	r2, #110	; 0x6e
 80035a8:	4698      	mov	r8, r3
 80035aa:	4606      	mov	r6, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035b0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80035b4:	f000 80bc 	beq.w	8003730 <_printf_i+0x194>
 80035b8:	d81a      	bhi.n	80035f0 <_printf_i+0x54>
 80035ba:	2a63      	cmp	r2, #99	; 0x63
 80035bc:	d02e      	beq.n	800361c <_printf_i+0x80>
 80035be:	d80a      	bhi.n	80035d6 <_printf_i+0x3a>
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	f000 80c8 	beq.w	8003756 <_printf_i+0x1ba>
 80035c6:	2a58      	cmp	r2, #88	; 0x58
 80035c8:	f000 808a 	beq.w	80036e0 <_printf_i+0x144>
 80035cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80035d4:	e02a      	b.n	800362c <_printf_i+0x90>
 80035d6:	2a64      	cmp	r2, #100	; 0x64
 80035d8:	d001      	beq.n	80035de <_printf_i+0x42>
 80035da:	2a69      	cmp	r2, #105	; 0x69
 80035dc:	d1f6      	bne.n	80035cc <_printf_i+0x30>
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80035e6:	d023      	beq.n	8003630 <_printf_i+0x94>
 80035e8:	1d11      	adds	r1, r2, #4
 80035ea:	6019      	str	r1, [r3, #0]
 80035ec:	6813      	ldr	r3, [r2, #0]
 80035ee:	e027      	b.n	8003640 <_printf_i+0xa4>
 80035f0:	2a73      	cmp	r2, #115	; 0x73
 80035f2:	f000 80b4 	beq.w	800375e <_printf_i+0x1c2>
 80035f6:	d808      	bhi.n	800360a <_printf_i+0x6e>
 80035f8:	2a6f      	cmp	r2, #111	; 0x6f
 80035fa:	d02a      	beq.n	8003652 <_printf_i+0xb6>
 80035fc:	2a70      	cmp	r2, #112	; 0x70
 80035fe:	d1e5      	bne.n	80035cc <_printf_i+0x30>
 8003600:	680a      	ldr	r2, [r1, #0]
 8003602:	f042 0220 	orr.w	r2, r2, #32
 8003606:	600a      	str	r2, [r1, #0]
 8003608:	e003      	b.n	8003612 <_printf_i+0x76>
 800360a:	2a75      	cmp	r2, #117	; 0x75
 800360c:	d021      	beq.n	8003652 <_printf_i+0xb6>
 800360e:	2a78      	cmp	r2, #120	; 0x78
 8003610:	d1dc      	bne.n	80035cc <_printf_i+0x30>
 8003612:	2278      	movs	r2, #120	; 0x78
 8003614:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003618:	496e      	ldr	r1, [pc, #440]	; (80037d4 <_printf_i+0x238>)
 800361a:	e064      	b.n	80036e6 <_printf_i+0x14a>
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003622:	1d11      	adds	r1, r2, #4
 8003624:	6019      	str	r1, [r3, #0]
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800362c:	2301      	movs	r3, #1
 800362e:	e0a3      	b.n	8003778 <_printf_i+0x1dc>
 8003630:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003634:	f102 0104 	add.w	r1, r2, #4
 8003638:	6019      	str	r1, [r3, #0]
 800363a:	d0d7      	beq.n	80035ec <_printf_i+0x50>
 800363c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003640:	2b00      	cmp	r3, #0
 8003642:	da03      	bge.n	800364c <_printf_i+0xb0>
 8003644:	222d      	movs	r2, #45	; 0x2d
 8003646:	425b      	negs	r3, r3
 8003648:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800364c:	4962      	ldr	r1, [pc, #392]	; (80037d8 <_printf_i+0x23c>)
 800364e:	220a      	movs	r2, #10
 8003650:	e017      	b.n	8003682 <_printf_i+0xe6>
 8003652:	6820      	ldr	r0, [r4, #0]
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	f010 0f80 	tst.w	r0, #128	; 0x80
 800365a:	d003      	beq.n	8003664 <_printf_i+0xc8>
 800365c:	1d08      	adds	r0, r1, #4
 800365e:	6018      	str	r0, [r3, #0]
 8003660:	680b      	ldr	r3, [r1, #0]
 8003662:	e006      	b.n	8003672 <_printf_i+0xd6>
 8003664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003668:	f101 0004 	add.w	r0, r1, #4
 800366c:	6018      	str	r0, [r3, #0]
 800366e:	d0f7      	beq.n	8003660 <_printf_i+0xc4>
 8003670:	880b      	ldrh	r3, [r1, #0]
 8003672:	4959      	ldr	r1, [pc, #356]	; (80037d8 <_printf_i+0x23c>)
 8003674:	2a6f      	cmp	r2, #111	; 0x6f
 8003676:	bf14      	ite	ne
 8003678:	220a      	movne	r2, #10
 800367a:	2208      	moveq	r2, #8
 800367c:	2000      	movs	r0, #0
 800367e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003682:	6865      	ldr	r5, [r4, #4]
 8003684:	60a5      	str	r5, [r4, #8]
 8003686:	2d00      	cmp	r5, #0
 8003688:	f2c0 809c 	blt.w	80037c4 <_printf_i+0x228>
 800368c:	6820      	ldr	r0, [r4, #0]
 800368e:	f020 0004 	bic.w	r0, r0, #4
 8003692:	6020      	str	r0, [r4, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d13f      	bne.n	8003718 <_printf_i+0x17c>
 8003698:	2d00      	cmp	r5, #0
 800369a:	f040 8095 	bne.w	80037c8 <_printf_i+0x22c>
 800369e:	4675      	mov	r5, lr
 80036a0:	2a08      	cmp	r2, #8
 80036a2:	d10b      	bne.n	80036bc <_printf_i+0x120>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	07da      	lsls	r2, r3, #31
 80036a8:	d508      	bpl.n	80036bc <_printf_i+0x120>
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	6862      	ldr	r2, [r4, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	bfde      	ittt	le
 80036b2:	2330      	movle	r3, #48	; 0x30
 80036b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036bc:	ebae 0305 	sub.w	r3, lr, r5
 80036c0:	6123      	str	r3, [r4, #16]
 80036c2:	f8cd 8000 	str.w	r8, [sp]
 80036c6:	463b      	mov	r3, r7
 80036c8:	aa03      	add	r2, sp, #12
 80036ca:	4621      	mov	r1, r4
 80036cc:	4630      	mov	r0, r6
 80036ce:	f7ff feef 	bl	80034b0 <_printf_common>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d155      	bne.n	8003782 <_printf_i+0x1e6>
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036da:	b005      	add	sp, #20
 80036dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80036e4:	493c      	ldr	r1, [pc, #240]	; (80037d8 <_printf_i+0x23c>)
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80036ee:	f100 0504 	add.w	r5, r0, #4
 80036f2:	601d      	str	r5, [r3, #0]
 80036f4:	d001      	beq.n	80036fa <_printf_i+0x15e>
 80036f6:	6803      	ldr	r3, [r0, #0]
 80036f8:	e002      	b.n	8003700 <_printf_i+0x164>
 80036fa:	0655      	lsls	r5, r2, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0x15a>
 80036fe:	8803      	ldrh	r3, [r0, #0]
 8003700:	07d0      	lsls	r0, r2, #31
 8003702:	bf44      	itt	mi
 8003704:	f042 0220 	orrmi.w	r2, r2, #32
 8003708:	6022      	strmi	r2, [r4, #0]
 800370a:	b91b      	cbnz	r3, 8003714 <_printf_i+0x178>
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	f022 0220 	bic.w	r2, r2, #32
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	e7b1      	b.n	800367c <_printf_i+0xe0>
 8003718:	4675      	mov	r5, lr
 800371a:	fbb3 f0f2 	udiv	r0, r3, r2
 800371e:	fb02 3310 	mls	r3, r2, r0, r3
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003728:	4603      	mov	r3, r0
 800372a:	2800      	cmp	r0, #0
 800372c:	d1f5      	bne.n	800371a <_printf_i+0x17e>
 800372e:	e7b7      	b.n	80036a0 <_printf_i+0x104>
 8003730:	6808      	ldr	r0, [r1, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	6949      	ldr	r1, [r1, #20]
 8003736:	f010 0f80 	tst.w	r0, #128	; 0x80
 800373a:	d004      	beq.n	8003746 <_printf_i+0x1aa>
 800373c:	1d10      	adds	r0, r2, #4
 800373e:	6018      	str	r0, [r3, #0]
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	6019      	str	r1, [r3, #0]
 8003744:	e007      	b.n	8003756 <_printf_i+0x1ba>
 8003746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800374a:	f102 0004 	add.w	r0, r2, #4
 800374e:	6018      	str	r0, [r3, #0]
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	d0f6      	beq.n	8003742 <_printf_i+0x1a6>
 8003754:	8019      	strh	r1, [r3, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	6123      	str	r3, [r4, #16]
 800375a:	4675      	mov	r5, lr
 800375c:	e7b1      	b.n	80036c2 <_printf_i+0x126>
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	1d11      	adds	r1, r2, #4
 8003762:	6019      	str	r1, [r3, #0]
 8003764:	6815      	ldr	r5, [r2, #0]
 8003766:	6862      	ldr	r2, [r4, #4]
 8003768:	2100      	movs	r1, #0
 800376a:	4628      	mov	r0, r5
 800376c:	f7fc fd30 	bl	80001d0 <memchr>
 8003770:	b108      	cbz	r0, 8003776 <_printf_i+0x1da>
 8003772:	1b40      	subs	r0, r0, r5
 8003774:	6060      	str	r0, [r4, #4]
 8003776:	6863      	ldr	r3, [r4, #4]
 8003778:	6123      	str	r3, [r4, #16]
 800377a:	2300      	movs	r3, #0
 800377c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003780:	e79f      	b.n	80036c2 <_printf_i+0x126>
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	462a      	mov	r2, r5
 8003786:	4639      	mov	r1, r7
 8003788:	4630      	mov	r0, r6
 800378a:	47c0      	blx	r8
 800378c:	3001      	adds	r0, #1
 800378e:	d0a2      	beq.n	80036d6 <_printf_i+0x13a>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	079b      	lsls	r3, r3, #30
 8003794:	d507      	bpl.n	80037a6 <_printf_i+0x20a>
 8003796:	2500      	movs	r5, #0
 8003798:	f104 0919 	add.w	r9, r4, #25
 800379c:	68e3      	ldr	r3, [r4, #12]
 800379e:	9a03      	ldr	r2, [sp, #12]
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	429d      	cmp	r5, r3
 80037a4:	db05      	blt.n	80037b2 <_printf_i+0x216>
 80037a6:	68e0      	ldr	r0, [r4, #12]
 80037a8:	9b03      	ldr	r3, [sp, #12]
 80037aa:	4298      	cmp	r0, r3
 80037ac:	bfb8      	it	lt
 80037ae:	4618      	movlt	r0, r3
 80037b0:	e793      	b.n	80036da <_printf_i+0x13e>
 80037b2:	2301      	movs	r3, #1
 80037b4:	464a      	mov	r2, r9
 80037b6:	4639      	mov	r1, r7
 80037b8:	4630      	mov	r0, r6
 80037ba:	47c0      	blx	r8
 80037bc:	3001      	adds	r0, #1
 80037be:	d08a      	beq.n	80036d6 <_printf_i+0x13a>
 80037c0:	3501      	adds	r5, #1
 80037c2:	e7eb      	b.n	800379c <_printf_i+0x200>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1a7      	bne.n	8003718 <_printf_i+0x17c>
 80037c8:	780b      	ldrb	r3, [r1, #0]
 80037ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d2:	e765      	b.n	80036a0 <_printf_i+0x104>
 80037d4:	0800453a 	.word	0x0800453a
 80037d8:	08004529 	.word	0x08004529

080037dc <__swbuf_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	4614      	mov	r4, r2
 80037e2:	4605      	mov	r5, r0
 80037e4:	b118      	cbz	r0, 80037ee <__swbuf_r+0x12>
 80037e6:	6983      	ldr	r3, [r0, #24]
 80037e8:	b90b      	cbnz	r3, 80037ee <__swbuf_r+0x12>
 80037ea:	f000 f9b1 	bl	8003b50 <__sinit>
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <__swbuf_r+0x98>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	d12a      	bne.n	800384a <__swbuf_r+0x6e>
 80037f4:	686c      	ldr	r4, [r5, #4]
 80037f6:	69a3      	ldr	r3, [r4, #24]
 80037f8:	60a3      	str	r3, [r4, #8]
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	071a      	lsls	r2, r3, #28
 80037fe:	d52e      	bpl.n	800385e <__swbuf_r+0x82>
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	b363      	cbz	r3, 800385e <__swbuf_r+0x82>
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	1ac0      	subs	r0, r0, r3
 800380a:	6963      	ldr	r3, [r4, #20]
 800380c:	b2f6      	uxtb	r6, r6
 800380e:	4298      	cmp	r0, r3
 8003810:	4637      	mov	r7, r6
 8003812:	db04      	blt.n	800381e <__swbuf_r+0x42>
 8003814:	4621      	mov	r1, r4
 8003816:	4628      	mov	r0, r5
 8003818:	f000 f930 	bl	8003a7c <_fflush_r>
 800381c:	bb28      	cbnz	r0, 800386a <__swbuf_r+0x8e>
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	3b01      	subs	r3, #1
 8003822:	60a3      	str	r3, [r4, #8]
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	6022      	str	r2, [r4, #0]
 800382a:	701e      	strb	r6, [r3, #0]
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	3001      	adds	r0, #1
 8003830:	4298      	cmp	r0, r3
 8003832:	d004      	beq.n	800383e <__swbuf_r+0x62>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	07db      	lsls	r3, r3, #31
 8003838:	d519      	bpl.n	800386e <__swbuf_r+0x92>
 800383a:	2e0a      	cmp	r6, #10
 800383c:	d117      	bne.n	800386e <__swbuf_r+0x92>
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 f91b 	bl	8003a7c <_fflush_r>
 8003846:	b190      	cbz	r0, 800386e <__swbuf_r+0x92>
 8003848:	e00f      	b.n	800386a <__swbuf_r+0x8e>
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <__swbuf_r+0x9c>)
 800384c:	429c      	cmp	r4, r3
 800384e:	d101      	bne.n	8003854 <__swbuf_r+0x78>
 8003850:	68ac      	ldr	r4, [r5, #8]
 8003852:	e7d0      	b.n	80037f6 <__swbuf_r+0x1a>
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <__swbuf_r+0xa0>)
 8003856:	429c      	cmp	r4, r3
 8003858:	bf08      	it	eq
 800385a:	68ec      	ldreq	r4, [r5, #12]
 800385c:	e7cb      	b.n	80037f6 <__swbuf_r+0x1a>
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 f80d 	bl	8003880 <__swsetup_r>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0cc      	beq.n	8003804 <__swbuf_r+0x28>
 800386a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800386e:	4638      	mov	r0, r7
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003872:	bf00      	nop
 8003874:	0800456c 	.word	0x0800456c
 8003878:	0800458c 	.word	0x0800458c
 800387c:	0800454c 	.word	0x0800454c

08003880 <__swsetup_r>:
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <__swsetup_r+0xcc>)
 8003882:	b570      	push	{r4, r5, r6, lr}
 8003884:	681d      	ldr	r5, [r3, #0]
 8003886:	4606      	mov	r6, r0
 8003888:	460c      	mov	r4, r1
 800388a:	b125      	cbz	r5, 8003896 <__swsetup_r+0x16>
 800388c:	69ab      	ldr	r3, [r5, #24]
 800388e:	b913      	cbnz	r3, 8003896 <__swsetup_r+0x16>
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f95d 	bl	8003b50 <__sinit>
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <__swsetup_r+0xd0>)
 8003898:	429c      	cmp	r4, r3
 800389a:	d10f      	bne.n	80038bc <__swsetup_r+0x3c>
 800389c:	686c      	ldr	r4, [r5, #4]
 800389e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	0715      	lsls	r5, r2, #28
 80038a6:	d42c      	bmi.n	8003902 <__swsetup_r+0x82>
 80038a8:	06d0      	lsls	r0, r2, #27
 80038aa:	d411      	bmi.n	80038d0 <__swsetup_r+0x50>
 80038ac:	2209      	movs	r2, #9
 80038ae:	6032      	str	r2, [r6, #0]
 80038b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <__swsetup_r+0xd4>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	d101      	bne.n	80038c6 <__swsetup_r+0x46>
 80038c2:	68ac      	ldr	r4, [r5, #8]
 80038c4:	e7eb      	b.n	800389e <__swsetup_r+0x1e>
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <__swsetup_r+0xd8>)
 80038c8:	429c      	cmp	r4, r3
 80038ca:	bf08      	it	eq
 80038cc:	68ec      	ldreq	r4, [r5, #12]
 80038ce:	e7e6      	b.n	800389e <__swsetup_r+0x1e>
 80038d0:	0751      	lsls	r1, r2, #29
 80038d2:	d512      	bpl.n	80038fa <__swsetup_r+0x7a>
 80038d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d6:	b141      	cbz	r1, 80038ea <__swsetup_r+0x6a>
 80038d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038dc:	4299      	cmp	r1, r3
 80038de:	d002      	beq.n	80038e6 <__swsetup_r+0x66>
 80038e0:	4630      	mov	r0, r6
 80038e2:	f000 fa23 	bl	8003d2c <_free_r>
 80038e6:	2300      	movs	r3, #0
 80038e8:	6363      	str	r3, [r4, #52]	; 0x34
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b94b      	cbnz	r3, 800391a <__swsetup_r+0x9a>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d003      	beq.n	800391a <__swsetup_r+0x9a>
 8003912:	4621      	mov	r1, r4
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f9c9 	bl	8003cac <__smakebuf_r>
 800391a:	89a2      	ldrh	r2, [r4, #12]
 800391c:	f012 0301 	ands.w	r3, r2, #1
 8003920:	d00c      	beq.n	800393c <__swsetup_r+0xbc>
 8003922:	2300      	movs	r3, #0
 8003924:	60a3      	str	r3, [r4, #8]
 8003926:	6963      	ldr	r3, [r4, #20]
 8003928:	425b      	negs	r3, r3
 800392a:	61a3      	str	r3, [r4, #24]
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	b953      	cbnz	r3, 8003946 <__swsetup_r+0xc6>
 8003930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003934:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003938:	d1ba      	bne.n	80038b0 <__swsetup_r+0x30>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	0792      	lsls	r2, r2, #30
 800393e:	bf58      	it	pl
 8003940:	6963      	ldrpl	r3, [r4, #20]
 8003942:	60a3      	str	r3, [r4, #8]
 8003944:	e7f2      	b.n	800392c <__swsetup_r+0xac>
 8003946:	2000      	movs	r0, #0
 8003948:	e7f7      	b.n	800393a <__swsetup_r+0xba>
 800394a:	bf00      	nop
 800394c:	20000090 	.word	0x20000090
 8003950:	0800456c 	.word	0x0800456c
 8003954:	0800458c 	.word	0x0800458c
 8003958:	0800454c 	.word	0x0800454c

0800395c <abort>:
 800395c:	b508      	push	{r3, lr}
 800395e:	2006      	movs	r0, #6
 8003960:	f000 fac8 	bl	8003ef4 <raise>
 8003964:	2001      	movs	r0, #1
 8003966:	f000 fbdd 	bl	8004124 <_exit>
	...

0800396c <__sflush_r>:
 800396c:	898a      	ldrh	r2, [r1, #12]
 800396e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003972:	4605      	mov	r5, r0
 8003974:	0710      	lsls	r0, r2, #28
 8003976:	460c      	mov	r4, r1
 8003978:	d45a      	bmi.n	8003a30 <__sflush_r+0xc4>
 800397a:	684b      	ldr	r3, [r1, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	dc05      	bgt.n	800398c <__sflush_r+0x20>
 8003980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	dc02      	bgt.n	800398c <__sflush_r+0x20>
 8003986:	2000      	movs	r0, #0
 8003988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800398c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800398e:	2e00      	cmp	r6, #0
 8003990:	d0f9      	beq.n	8003986 <__sflush_r+0x1a>
 8003992:	2300      	movs	r3, #0
 8003994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003998:	682f      	ldr	r7, [r5, #0]
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	d033      	beq.n	8003a06 <__sflush_r+0x9a>
 800399e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	075a      	lsls	r2, r3, #29
 80039a4:	d505      	bpl.n	80039b2 <__sflush_r+0x46>
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	1ac0      	subs	r0, r0, r3
 80039aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ac:	b10b      	cbz	r3, 80039b2 <__sflush_r+0x46>
 80039ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b0:	1ac0      	subs	r0, r0, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	4602      	mov	r2, r0
 80039b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039b8:	6a21      	ldr	r1, [r4, #32]
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b0      	blx	r6
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	d106      	bne.n	80039d2 <__sflush_r+0x66>
 80039c4:	6829      	ldr	r1, [r5, #0]
 80039c6:	291d      	cmp	r1, #29
 80039c8:	d84b      	bhi.n	8003a62 <__sflush_r+0xf6>
 80039ca:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <__sflush_r+0x10c>)
 80039cc:	40ca      	lsrs	r2, r1
 80039ce:	07d6      	lsls	r6, r2, #31
 80039d0:	d547      	bpl.n	8003a62 <__sflush_r+0xf6>
 80039d2:	2200      	movs	r2, #0
 80039d4:	6062      	str	r2, [r4, #4]
 80039d6:	04d9      	lsls	r1, r3, #19
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	d504      	bpl.n	80039e8 <__sflush_r+0x7c>
 80039de:	1c42      	adds	r2, r0, #1
 80039e0:	d101      	bne.n	80039e6 <__sflush_r+0x7a>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	b903      	cbnz	r3, 80039e8 <__sflush_r+0x7c>
 80039e6:	6560      	str	r0, [r4, #84]	; 0x54
 80039e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ea:	602f      	str	r7, [r5, #0]
 80039ec:	2900      	cmp	r1, #0
 80039ee:	d0ca      	beq.n	8003986 <__sflush_r+0x1a>
 80039f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f4:	4299      	cmp	r1, r3
 80039f6:	d002      	beq.n	80039fe <__sflush_r+0x92>
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 f997 	bl	8003d2c <_free_r>
 80039fe:	2000      	movs	r0, #0
 8003a00:	6360      	str	r0, [r4, #52]	; 0x34
 8003a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a06:	6a21      	ldr	r1, [r4, #32]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	47b0      	blx	r6
 8003a0e:	1c41      	adds	r1, r0, #1
 8003a10:	d1c6      	bne.n	80039a0 <__sflush_r+0x34>
 8003a12:	682b      	ldr	r3, [r5, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0c3      	beq.n	80039a0 <__sflush_r+0x34>
 8003a18:	2b1d      	cmp	r3, #29
 8003a1a:	d001      	beq.n	8003a20 <__sflush_r+0xb4>
 8003a1c:	2b16      	cmp	r3, #22
 8003a1e:	d101      	bne.n	8003a24 <__sflush_r+0xb8>
 8003a20:	602f      	str	r7, [r5, #0]
 8003a22:	e7b0      	b.n	8003986 <__sflush_r+0x1a>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a30:	690f      	ldr	r7, [r1, #16]
 8003a32:	2f00      	cmp	r7, #0
 8003a34:	d0a7      	beq.n	8003986 <__sflush_r+0x1a>
 8003a36:	0793      	lsls	r3, r2, #30
 8003a38:	680e      	ldr	r6, [r1, #0]
 8003a3a:	bf08      	it	eq
 8003a3c:	694b      	ldreq	r3, [r1, #20]
 8003a3e:	600f      	str	r7, [r1, #0]
 8003a40:	bf18      	it	ne
 8003a42:	2300      	movne	r3, #0
 8003a44:	eba6 0807 	sub.w	r8, r6, r7
 8003a48:	608b      	str	r3, [r1, #8]
 8003a4a:	f1b8 0f00 	cmp.w	r8, #0
 8003a4e:	dd9a      	ble.n	8003986 <__sflush_r+0x1a>
 8003a50:	4643      	mov	r3, r8
 8003a52:	463a      	mov	r2, r7
 8003a54:	6a21      	ldr	r1, [r4, #32]
 8003a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a58:	4628      	mov	r0, r5
 8003a5a:	47b0      	blx	r6
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	dc07      	bgt.n	8003a70 <__sflush_r+0x104>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a70:	4407      	add	r7, r0
 8003a72:	eba8 0800 	sub.w	r8, r8, r0
 8003a76:	e7e8      	b.n	8003a4a <__sflush_r+0xde>
 8003a78:	20400001 	.word	0x20400001

08003a7c <_fflush_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	690b      	ldr	r3, [r1, #16]
 8003a80:	4605      	mov	r5, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	b1db      	cbz	r3, 8003abe <_fflush_r+0x42>
 8003a86:	b118      	cbz	r0, 8003a90 <_fflush_r+0x14>
 8003a88:	6983      	ldr	r3, [r0, #24]
 8003a8a:	b90b      	cbnz	r3, 8003a90 <_fflush_r+0x14>
 8003a8c:	f000 f860 	bl	8003b50 <__sinit>
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <_fflush_r+0x48>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d109      	bne.n	8003aaa <_fflush_r+0x2e>
 8003a96:	686c      	ldr	r4, [r5, #4]
 8003a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9c:	b17b      	cbz	r3, 8003abe <_fflush_r+0x42>
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa6:	f7ff bf61 	b.w	800396c <__sflush_r>
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <_fflush_r+0x4c>)
 8003aac:	429c      	cmp	r4, r3
 8003aae:	d101      	bne.n	8003ab4 <_fflush_r+0x38>
 8003ab0:	68ac      	ldr	r4, [r5, #8]
 8003ab2:	e7f1      	b.n	8003a98 <_fflush_r+0x1c>
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <_fflush_r+0x50>)
 8003ab6:	429c      	cmp	r4, r3
 8003ab8:	bf08      	it	eq
 8003aba:	68ec      	ldreq	r4, [r5, #12]
 8003abc:	e7ec      	b.n	8003a98 <_fflush_r+0x1c>
 8003abe:	2000      	movs	r0, #0
 8003ac0:	bd38      	pop	{r3, r4, r5, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0800456c 	.word	0x0800456c
 8003ac8:	0800458c 	.word	0x0800458c
 8003acc:	0800454c 	.word	0x0800454c

08003ad0 <_cleanup_r>:
 8003ad0:	4901      	ldr	r1, [pc, #4]	; (8003ad8 <_cleanup_r+0x8>)
 8003ad2:	f000 b8a9 	b.w	8003c28 <_fwalk_reent>
 8003ad6:	bf00      	nop
 8003ad8:	08003a7d 	.word	0x08003a7d

08003adc <std.isra.0>:
 8003adc:	2300      	movs	r3, #0
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	6003      	str	r3, [r0, #0]
 8003ae4:	6043      	str	r3, [r0, #4]
 8003ae6:	6083      	str	r3, [r0, #8]
 8003ae8:	8181      	strh	r1, [r0, #12]
 8003aea:	6643      	str	r3, [r0, #100]	; 0x64
 8003aec:	81c2      	strh	r2, [r0, #14]
 8003aee:	6103      	str	r3, [r0, #16]
 8003af0:	6143      	str	r3, [r0, #20]
 8003af2:	6183      	str	r3, [r0, #24]
 8003af4:	4619      	mov	r1, r3
 8003af6:	2208      	movs	r2, #8
 8003af8:	305c      	adds	r0, #92	; 0x5c
 8003afa:	f7ff fb90 	bl	800321e <memset>
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <std.isra.0+0x38>)
 8003b00:	6263      	str	r3, [r4, #36]	; 0x24
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <std.isra.0+0x3c>)
 8003b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <std.isra.0+0x40>)
 8003b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <std.isra.0+0x44>)
 8003b0c:	6224      	str	r4, [r4, #32]
 8003b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b10:	bd10      	pop	{r4, pc}
 8003b12:	bf00      	nop
 8003b14:	08003f2d 	.word	0x08003f2d
 8003b18:	08003f4f 	.word	0x08003f4f
 8003b1c:	08003f87 	.word	0x08003f87
 8003b20:	08003fab 	.word	0x08003fab

08003b24 <__sfmoreglue>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	1e4a      	subs	r2, r1, #1
 8003b28:	2568      	movs	r5, #104	; 0x68
 8003b2a:	4355      	muls	r5, r2
 8003b2c:	460e      	mov	r6, r1
 8003b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b32:	f000 f949 	bl	8003dc8 <_malloc_r>
 8003b36:	4604      	mov	r4, r0
 8003b38:	b140      	cbz	r0, 8003b4c <__sfmoreglue+0x28>
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	e880 0042 	stmia.w	r0, {r1, r6}
 8003b40:	300c      	adds	r0, #12
 8003b42:	60a0      	str	r0, [r4, #8]
 8003b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b48:	f7ff fb69 	bl	800321e <memset>
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}

08003b50 <__sinit>:
 8003b50:	6983      	ldr	r3, [r0, #24]
 8003b52:	b510      	push	{r4, lr}
 8003b54:	4604      	mov	r4, r0
 8003b56:	bb33      	cbnz	r3, 8003ba6 <__sinit+0x56>
 8003b58:	6483      	str	r3, [r0, #72]	; 0x48
 8003b5a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003b5c:	6503      	str	r3, [r0, #80]	; 0x50
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <__sinit+0x58>)
 8003b60:	4a12      	ldr	r2, [pc, #72]	; (8003bac <__sinit+0x5c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6282      	str	r2, [r0, #40]	; 0x28
 8003b66:	4298      	cmp	r0, r3
 8003b68:	bf04      	itt	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	6183      	streq	r3, [r0, #24]
 8003b6e:	f000 f81f 	bl	8003bb0 <__sfp>
 8003b72:	6060      	str	r0, [r4, #4]
 8003b74:	4620      	mov	r0, r4
 8003b76:	f000 f81b 	bl	8003bb0 <__sfp>
 8003b7a:	60a0      	str	r0, [r4, #8]
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 f817 	bl	8003bb0 <__sfp>
 8003b82:	2200      	movs	r2, #0
 8003b84:	60e0      	str	r0, [r4, #12]
 8003b86:	2104      	movs	r1, #4
 8003b88:	6860      	ldr	r0, [r4, #4]
 8003b8a:	f7ff ffa7 	bl	8003adc <std.isra.0>
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2109      	movs	r1, #9
 8003b92:	68a0      	ldr	r0, [r4, #8]
 8003b94:	f7ff ffa2 	bl	8003adc <std.isra.0>
 8003b98:	2202      	movs	r2, #2
 8003b9a:	2112      	movs	r1, #18
 8003b9c:	68e0      	ldr	r0, [r4, #12]
 8003b9e:	f7ff ff9d 	bl	8003adc <std.isra.0>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61a3      	str	r3, [r4, #24]
 8003ba6:	bd10      	pop	{r4, pc}
 8003ba8:	08004514 	.word	0x08004514
 8003bac:	08003ad1 	.word	0x08003ad1

08003bb0 <__sfp>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <__sfp+0x74>)
 8003bb4:	681e      	ldr	r6, [r3, #0]
 8003bb6:	69b3      	ldr	r3, [r6, #24]
 8003bb8:	4607      	mov	r7, r0
 8003bba:	b913      	cbnz	r3, 8003bc2 <__sfp+0x12>
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f7ff ffc7 	bl	8003b50 <__sinit>
 8003bc2:	3648      	adds	r6, #72	; 0x48
 8003bc4:	68b4      	ldr	r4, [r6, #8]
 8003bc6:	6873      	ldr	r3, [r6, #4]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	d503      	bpl.n	8003bd4 <__sfp+0x24>
 8003bcc:	6833      	ldr	r3, [r6, #0]
 8003bce:	b133      	cbz	r3, 8003bde <__sfp+0x2e>
 8003bd0:	6836      	ldr	r6, [r6, #0]
 8003bd2:	e7f7      	b.n	8003bc4 <__sfp+0x14>
 8003bd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bd8:	b16d      	cbz	r5, 8003bf6 <__sfp+0x46>
 8003bda:	3468      	adds	r4, #104	; 0x68
 8003bdc:	e7f4      	b.n	8003bc8 <__sfp+0x18>
 8003bde:	2104      	movs	r1, #4
 8003be0:	4638      	mov	r0, r7
 8003be2:	f7ff ff9f 	bl	8003b24 <__sfmoreglue>
 8003be6:	6030      	str	r0, [r6, #0]
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d1f1      	bne.n	8003bd0 <__sfp+0x20>
 8003bec:	230c      	movs	r3, #12
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfa:	81e3      	strh	r3, [r4, #14]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	6665      	str	r5, [r4, #100]	; 0x64
 8003c02:	6025      	str	r5, [r4, #0]
 8003c04:	60a5      	str	r5, [r4, #8]
 8003c06:	6065      	str	r5, [r4, #4]
 8003c08:	6125      	str	r5, [r4, #16]
 8003c0a:	6165      	str	r5, [r4, #20]
 8003c0c:	61a5      	str	r5, [r4, #24]
 8003c0e:	2208      	movs	r2, #8
 8003c10:	4629      	mov	r1, r5
 8003c12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c16:	f7ff fb02 	bl	800321e <memset>
 8003c1a:	6365      	str	r5, [r4, #52]	; 0x34
 8003c1c:	63a5      	str	r5, [r4, #56]	; 0x38
 8003c1e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003c20:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003c22:	e7e6      	b.n	8003bf2 <__sfp+0x42>
 8003c24:	08004514 	.word	0x08004514

08003c28 <_fwalk_reent>:
 8003c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	4689      	mov	r9, r1
 8003c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c34:	2600      	movs	r6, #0
 8003c36:	b914      	cbnz	r4, 8003c3e <_fwalk_reent+0x16>
 8003c38:	4630      	mov	r0, r6
 8003c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c3e:	68a5      	ldr	r5, [r4, #8]
 8003c40:	6867      	ldr	r7, [r4, #4]
 8003c42:	3f01      	subs	r7, #1
 8003c44:	d501      	bpl.n	8003c4a <_fwalk_reent+0x22>
 8003c46:	6824      	ldr	r4, [r4, #0]
 8003c48:	e7f5      	b.n	8003c36 <_fwalk_reent+0xe>
 8003c4a:	89ab      	ldrh	r3, [r5, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d907      	bls.n	8003c60 <_fwalk_reent+0x38>
 8003c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c54:	3301      	adds	r3, #1
 8003c56:	d003      	beq.n	8003c60 <_fwalk_reent+0x38>
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	47c8      	blx	r9
 8003c5e:	4306      	orrs	r6, r0
 8003c60:	3568      	adds	r5, #104	; 0x68
 8003c62:	e7ee      	b.n	8003c42 <_fwalk_reent+0x1a>

08003c64 <__swhatbuf_r>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	460e      	mov	r6, r1
 8003c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	b090      	sub	sp, #64	; 0x40
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	da07      	bge.n	8003c86 <__swhatbuf_r+0x22>
 8003c76:	2300      	movs	r3, #0
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	89b3      	ldrh	r3, [r6, #12]
 8003c7c:	061a      	lsls	r2, r3, #24
 8003c7e:	d410      	bmi.n	8003ca2 <__swhatbuf_r+0x3e>
 8003c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c84:	e00e      	b.n	8003ca4 <__swhatbuf_r+0x40>
 8003c86:	aa01      	add	r2, sp, #4
 8003c88:	f000 f9b6 	bl	8003ff8 <_fstat_r>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	dbf2      	blt.n	8003c76 <__swhatbuf_r+0x12>
 8003c90:	9a02      	ldr	r2, [sp, #8]
 8003c92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c9a:	425a      	negs	r2, r3
 8003c9c:	415a      	adcs	r2, r3
 8003c9e:	602a      	str	r2, [r5, #0]
 8003ca0:	e7ee      	b.n	8003c80 <__swhatbuf_r+0x1c>
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	b010      	add	sp, #64	; 0x40
 8003caa:	bd70      	pop	{r4, r5, r6, pc}

08003cac <__smakebuf_r>:
 8003cac:	898b      	ldrh	r3, [r1, #12]
 8003cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cb0:	079d      	lsls	r5, r3, #30
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	d507      	bpl.n	8003cc8 <__smakebuf_r+0x1c>
 8003cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	6163      	str	r3, [r4, #20]
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	ab01      	add	r3, sp, #4
 8003cca:	466a      	mov	r2, sp
 8003ccc:	f7ff ffca 	bl	8003c64 <__swhatbuf_r>
 8003cd0:	9900      	ldr	r1, [sp, #0]
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 f877 	bl	8003dc8 <_malloc_r>
 8003cda:	b948      	cbnz	r0, 8003cf0 <__smakebuf_r+0x44>
 8003cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce0:	059a      	lsls	r2, r3, #22
 8003ce2:	d4ef      	bmi.n	8003cc4 <__smakebuf_r+0x18>
 8003ce4:	f023 0303 	bic.w	r3, r3, #3
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	81a3      	strh	r3, [r4, #12]
 8003cee:	e7e3      	b.n	8003cb8 <__smakebuf_r+0xc>
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <__smakebuf_r+0x7c>)
 8003cf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	6020      	str	r0, [r4, #0]
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	9b00      	ldr	r3, [sp, #0]
 8003d00:	6163      	str	r3, [r4, #20]
 8003d02:	9b01      	ldr	r3, [sp, #4]
 8003d04:	6120      	str	r0, [r4, #16]
 8003d06:	b15b      	cbz	r3, 8003d20 <__smakebuf_r+0x74>
 8003d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f000 f985 	bl	800401c <_isatty_r>
 8003d12:	b128      	cbz	r0, 8003d20 <__smakebuf_r+0x74>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	431d      	orrs	r5, r3
 8003d24:	81a5      	strh	r5, [r4, #12]
 8003d26:	e7cd      	b.n	8003cc4 <__smakebuf_r+0x18>
 8003d28:	08003ad1 	.word	0x08003ad1

08003d2c <_free_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4605      	mov	r5, r0
 8003d30:	2900      	cmp	r1, #0
 8003d32:	d045      	beq.n	8003dc0 <_free_r+0x94>
 8003d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d38:	1f0c      	subs	r4, r1, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bfb8      	it	lt
 8003d3e:	18e4      	addlt	r4, r4, r3
 8003d40:	f000 f98e 	bl	8004060 <__malloc_lock>
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <_free_r+0x98>)
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	4610      	mov	r0, r2
 8003d4a:	b933      	cbnz	r3, 8003d5a <_free_r+0x2e>
 8003d4c:	6063      	str	r3, [r4, #4]
 8003d4e:	6014      	str	r4, [r2, #0]
 8003d50:	4628      	mov	r0, r5
 8003d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d56:	f000 b984 	b.w	8004062 <__malloc_unlock>
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	d90c      	bls.n	8003d78 <_free_r+0x4c>
 8003d5e:	6821      	ldr	r1, [r4, #0]
 8003d60:	1862      	adds	r2, r4, r1
 8003d62:	4293      	cmp	r3, r2
 8003d64:	bf04      	itt	eq
 8003d66:	681a      	ldreq	r2, [r3, #0]
 8003d68:	685b      	ldreq	r3, [r3, #4]
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	bf04      	itt	eq
 8003d6e:	1852      	addeq	r2, r2, r1
 8003d70:	6022      	streq	r2, [r4, #0]
 8003d72:	6004      	str	r4, [r0, #0]
 8003d74:	e7ec      	b.n	8003d50 <_free_r+0x24>
 8003d76:	4613      	mov	r3, r2
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	b10a      	cbz	r2, 8003d80 <_free_r+0x54>
 8003d7c:	42a2      	cmp	r2, r4
 8003d7e:	d9fa      	bls.n	8003d76 <_free_r+0x4a>
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	1858      	adds	r0, r3, r1
 8003d84:	42a0      	cmp	r0, r4
 8003d86:	d10b      	bne.n	8003da0 <_free_r+0x74>
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	4401      	add	r1, r0
 8003d8c:	1858      	adds	r0, r3, r1
 8003d8e:	4282      	cmp	r2, r0
 8003d90:	6019      	str	r1, [r3, #0]
 8003d92:	d1dd      	bne.n	8003d50 <_free_r+0x24>
 8003d94:	6810      	ldr	r0, [r2, #0]
 8003d96:	6852      	ldr	r2, [r2, #4]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	4401      	add	r1, r0
 8003d9c:	6019      	str	r1, [r3, #0]
 8003d9e:	e7d7      	b.n	8003d50 <_free_r+0x24>
 8003da0:	d902      	bls.n	8003da8 <_free_r+0x7c>
 8003da2:	230c      	movs	r3, #12
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	e7d3      	b.n	8003d50 <_free_r+0x24>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	1821      	adds	r1, r4, r0
 8003dac:	428a      	cmp	r2, r1
 8003dae:	bf04      	itt	eq
 8003db0:	6811      	ldreq	r1, [r2, #0]
 8003db2:	6852      	ldreq	r2, [r2, #4]
 8003db4:	6062      	str	r2, [r4, #4]
 8003db6:	bf04      	itt	eq
 8003db8:	1809      	addeq	r1, r1, r0
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	605c      	str	r4, [r3, #4]
 8003dbe:	e7c7      	b.n	8003d50 <_free_r+0x24>
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20003ec0 	.word	0x20003ec0

08003dc8 <_malloc_r>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	1ccd      	adds	r5, r1, #3
 8003dcc:	f025 0503 	bic.w	r5, r5, #3
 8003dd0:	3508      	adds	r5, #8
 8003dd2:	2d0c      	cmp	r5, #12
 8003dd4:	bf38      	it	cc
 8003dd6:	250c      	movcc	r5, #12
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	4606      	mov	r6, r0
 8003ddc:	db01      	blt.n	8003de2 <_malloc_r+0x1a>
 8003dde:	42a9      	cmp	r1, r5
 8003de0:	d903      	bls.n	8003dea <_malloc_r+0x22>
 8003de2:	230c      	movs	r3, #12
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	2000      	movs	r0, #0
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
 8003dea:	f000 f939 	bl	8004060 <__malloc_lock>
 8003dee:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <_malloc_r+0xb4>)
 8003df0:	6814      	ldr	r4, [r2, #0]
 8003df2:	4621      	mov	r1, r4
 8003df4:	b991      	cbnz	r1, 8003e1c <_malloc_r+0x54>
 8003df6:	4c22      	ldr	r4, [pc, #136]	; (8003e80 <_malloc_r+0xb8>)
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	b91b      	cbnz	r3, 8003e04 <_malloc_r+0x3c>
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f000 f841 	bl	8003e84 <_sbrk_r>
 8003e02:	6020      	str	r0, [r4, #0]
 8003e04:	4629      	mov	r1, r5
 8003e06:	4630      	mov	r0, r6
 8003e08:	f000 f83c 	bl	8003e84 <_sbrk_r>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d126      	bne.n	8003e5e <_malloc_r+0x96>
 8003e10:	230c      	movs	r3, #12
 8003e12:	6033      	str	r3, [r6, #0]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f924 	bl	8004062 <__malloc_unlock>
 8003e1a:	e7e4      	b.n	8003de6 <_malloc_r+0x1e>
 8003e1c:	680b      	ldr	r3, [r1, #0]
 8003e1e:	1b5b      	subs	r3, r3, r5
 8003e20:	d41a      	bmi.n	8003e58 <_malloc_r+0x90>
 8003e22:	2b0b      	cmp	r3, #11
 8003e24:	d90f      	bls.n	8003e46 <_malloc_r+0x7e>
 8003e26:	600b      	str	r3, [r1, #0]
 8003e28:	50cd      	str	r5, [r1, r3]
 8003e2a:	18cc      	adds	r4, r1, r3
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f000 f918 	bl	8004062 <__malloc_unlock>
 8003e32:	f104 000b 	add.w	r0, r4, #11
 8003e36:	1d23      	adds	r3, r4, #4
 8003e38:	f020 0007 	bic.w	r0, r0, #7
 8003e3c:	1ac3      	subs	r3, r0, r3
 8003e3e:	d01b      	beq.n	8003e78 <_malloc_r+0xb0>
 8003e40:	425a      	negs	r2, r3
 8003e42:	50e2      	str	r2, [r4, r3]
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
 8003e46:	428c      	cmp	r4, r1
 8003e48:	bf0d      	iteet	eq
 8003e4a:	6863      	ldreq	r3, [r4, #4]
 8003e4c:	684b      	ldrne	r3, [r1, #4]
 8003e4e:	6063      	strne	r3, [r4, #4]
 8003e50:	6013      	streq	r3, [r2, #0]
 8003e52:	bf18      	it	ne
 8003e54:	460c      	movne	r4, r1
 8003e56:	e7e9      	b.n	8003e2c <_malloc_r+0x64>
 8003e58:	460c      	mov	r4, r1
 8003e5a:	6849      	ldr	r1, [r1, #4]
 8003e5c:	e7ca      	b.n	8003df4 <_malloc_r+0x2c>
 8003e5e:	1cc4      	adds	r4, r0, #3
 8003e60:	f024 0403 	bic.w	r4, r4, #3
 8003e64:	42a0      	cmp	r0, r4
 8003e66:	d005      	beq.n	8003e74 <_malloc_r+0xac>
 8003e68:	1a21      	subs	r1, r4, r0
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f000 f80a 	bl	8003e84 <_sbrk_r>
 8003e70:	3001      	adds	r0, #1
 8003e72:	d0cd      	beq.n	8003e10 <_malloc_r+0x48>
 8003e74:	6025      	str	r5, [r4, #0]
 8003e76:	e7d9      	b.n	8003e2c <_malloc_r+0x64>
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20003ec0 	.word	0x20003ec0
 8003e80:	20003ec4 	.word	0x20003ec4

08003e84 <_sbrk_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4c06      	ldr	r4, [pc, #24]	; (8003ea0 <_sbrk_r+0x1c>)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	f000 f932 	bl	80040f8 <_sbrk>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_sbrk_r+0x1a>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_sbrk_r+0x1a>
 8003e9c:	602b      	str	r3, [r5, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	200040a0 	.word	0x200040a0

08003ea4 <_raise_r>:
 8003ea4:	291f      	cmp	r1, #31
 8003ea6:	b538      	push	{r3, r4, r5, lr}
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	460d      	mov	r5, r1
 8003eac:	d904      	bls.n	8003eb8 <_raise_r+0x14>
 8003eae:	2316      	movs	r3, #22
 8003eb0:	6003      	str	r3, [r0, #0]
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003eba:	b112      	cbz	r2, 8003ec2 <_raise_r+0x1e>
 8003ebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ec0:	b94b      	cbnz	r3, 8003ed6 <_raise_r+0x32>
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f000 f830 	bl	8003f28 <_getpid_r>
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4620      	mov	r0, r4
 8003ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ed2:	f000 b817 	b.w	8003f04 <_kill_r>
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d00a      	beq.n	8003ef0 <_raise_r+0x4c>
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	d103      	bne.n	8003ee6 <_raise_r+0x42>
 8003ede:	2316      	movs	r3, #22
 8003ee0:	6003      	str	r3, [r0, #0]
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	2400      	movs	r4, #0
 8003ee8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003eec:	4628      	mov	r0, r5
 8003eee:	4798      	blx	r3
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}

08003ef4 <raise>:
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <raise+0xc>)
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	f7ff bfd3 	b.w	8003ea4 <_raise_r>
 8003efe:	bf00      	nop
 8003f00:	20000090 	.word	0x20000090

08003f04 <_kill_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4c07      	ldr	r4, [pc, #28]	; (8003f24 <_kill_r+0x20>)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	f000 f8d9 	bl	80040c8 <_kill>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d102      	bne.n	8003f20 <_kill_r+0x1c>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	b103      	cbz	r3, 8003f20 <_kill_r+0x1c>
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	bf00      	nop
 8003f24:	200040a0 	.word	0x200040a0

08003f28 <_getpid_r>:
 8003f28:	f000 b8be 	b.w	80040a8 <_getpid>

08003f2c <__sread>:
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	460c      	mov	r4, r1
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	f000 f896 	bl	8004064 <_read_r>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	bfab      	itete	ge
 8003f3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f40:	181b      	addge	r3, r3, r0
 8003f42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f46:	bfac      	ite	ge
 8003f48:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f4a:	81a3      	strhlt	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__swrite>:
 8003f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	461f      	mov	r7, r3
 8003f54:	898b      	ldrh	r3, [r1, #12]
 8003f56:	05db      	lsls	r3, r3, #23
 8003f58:	4605      	mov	r5, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4616      	mov	r6, r2
 8003f5e:	d505      	bpl.n	8003f6c <__swrite+0x1e>
 8003f60:	2302      	movs	r3, #2
 8003f62:	2200      	movs	r2, #0
 8003f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f68:	f000 f868 	bl	800403c <_lseek_r>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	4632      	mov	r2, r6
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f82:	f000 b817 	b.w	8003fb4 <_write_r>

08003f86 <__sseek>:
 8003f86:	b510      	push	{r4, lr}
 8003f88:	460c      	mov	r4, r1
 8003f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8e:	f000 f855 	bl	800403c <_lseek_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	bf15      	itete	ne
 8003f98:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fa2:	81a3      	strheq	r3, [r4, #12]
 8003fa4:	bf18      	it	ne
 8003fa6:	81a3      	strhne	r3, [r4, #12]
 8003fa8:	bd10      	pop	{r4, pc}

08003faa <__sclose>:
 8003faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fae:	f000 b813 	b.w	8003fd8 <_close_r>
	...

08003fb4 <_write_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4c07      	ldr	r4, [pc, #28]	; (8003fd4 <_write_r+0x20>)
 8003fb8:	4605      	mov	r5, r0
 8003fba:	4608      	mov	r0, r1
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	6022      	str	r2, [r4, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f000 f8a6 	bl	8004114 <_write>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_write_r+0x1e>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_write_r+0x1e>
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	200040a0 	.word	0x200040a0

08003fd8 <_close_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4c06      	ldr	r4, [pc, #24]	; (8003ff4 <_close_r+0x1c>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4605      	mov	r5, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	f000 f850 	bl	8004088 <_close>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_close_r+0x1a>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_close_r+0x1a>
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	200040a0 	.word	0x200040a0

08003ff8 <_fstat_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4c07      	ldr	r4, [pc, #28]	; (8004018 <_fstat_r+0x20>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4605      	mov	r5, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	f000 f847 	bl	8004098 <_fstat>
 800400a:	1c43      	adds	r3, r0, #1
 800400c:	d102      	bne.n	8004014 <_fstat_r+0x1c>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	b103      	cbz	r3, 8004014 <_fstat_r+0x1c>
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	bd38      	pop	{r3, r4, r5, pc}
 8004016:	bf00      	nop
 8004018:	200040a0 	.word	0x200040a0

0800401c <_isatty_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4c06      	ldr	r4, [pc, #24]	; (8004038 <_isatty_r+0x1c>)
 8004020:	2300      	movs	r3, #0
 8004022:	4605      	mov	r5, r0
 8004024:	4608      	mov	r0, r1
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	f000 f846 	bl	80040b8 <_isatty>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_isatty_r+0x1a>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	b103      	cbz	r3, 8004036 <_isatty_r+0x1a>
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	200040a0 	.word	0x200040a0

0800403c <_lseek_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4c07      	ldr	r4, [pc, #28]	; (800405c <_lseek_r+0x20>)
 8004040:	4605      	mov	r5, r0
 8004042:	4608      	mov	r0, r1
 8004044:	4611      	mov	r1, r2
 8004046:	2200      	movs	r2, #0
 8004048:	6022      	str	r2, [r4, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 f844 	bl	80040d8 <_lseek>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_lseek_r+0x1e>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	b103      	cbz	r3, 800405a <_lseek_r+0x1e>
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	200040a0 	.word	0x200040a0

08004060 <__malloc_lock>:
 8004060:	4770      	bx	lr

08004062 <__malloc_unlock>:
 8004062:	4770      	bx	lr

08004064 <_read_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4c07      	ldr	r4, [pc, #28]	; (8004084 <_read_r+0x20>)
 8004068:	4605      	mov	r5, r0
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	2200      	movs	r2, #0
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 f838 	bl	80040e8 <_read>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_read_r+0x1e>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	b103      	cbz	r3, 8004082 <_read_r+0x1e>
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200040a0 	.word	0x200040a0

08004088 <_close>:
 8004088:	4b02      	ldr	r3, [pc, #8]	; (8004094 <_close+0xc>)
 800408a:	2258      	movs	r2, #88	; 0x58
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004092:	4770      	bx	lr
 8004094:	200040a0 	.word	0x200040a0

08004098 <_fstat>:
 8004098:	4b02      	ldr	r3, [pc, #8]	; (80040a4 <_fstat+0xc>)
 800409a:	2258      	movs	r2, #88	; 0x58
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a2:	4770      	bx	lr
 80040a4:	200040a0 	.word	0x200040a0

080040a8 <_getpid>:
 80040a8:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <_getpid+0xc>)
 80040aa:	2258      	movs	r2, #88	; 0x58
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b2:	4770      	bx	lr
 80040b4:	200040a0 	.word	0x200040a0

080040b8 <_isatty>:
 80040b8:	4b02      	ldr	r3, [pc, #8]	; (80040c4 <_isatty+0xc>)
 80040ba:	2258      	movs	r2, #88	; 0x58
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	2000      	movs	r0, #0
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200040a0 	.word	0x200040a0

080040c8 <_kill>:
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <_kill+0xc>)
 80040ca:	2258      	movs	r2, #88	; 0x58
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d2:	4770      	bx	lr
 80040d4:	200040a0 	.word	0x200040a0

080040d8 <_lseek>:
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <_lseek+0xc>)
 80040da:	2258      	movs	r2, #88	; 0x58
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e2:	4770      	bx	lr
 80040e4:	200040a0 	.word	0x200040a0

080040e8 <_read>:
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <_read+0xc>)
 80040ea:	2258      	movs	r2, #88	; 0x58
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f2:	4770      	bx	lr
 80040f4:	200040a0 	.word	0x200040a0

080040f8 <_sbrk>:
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <_sbrk+0x14>)
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	4602      	mov	r2, r0
 80040fe:	b909      	cbnz	r1, 8004104 <_sbrk+0xc>
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <_sbrk+0x18>)
 8004102:	6019      	str	r1, [r3, #0]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	4402      	add	r2, r0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4770      	bx	lr
 800410c:	20003ec8 	.word	0x20003ec8
 8004110:	200040a4 	.word	0x200040a4

08004114 <_write>:
 8004114:	4b02      	ldr	r3, [pc, #8]	; (8004120 <_write+0xc>)
 8004116:	2258      	movs	r2, #88	; 0x58
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800411e:	4770      	bx	lr
 8004120:	200040a0 	.word	0x200040a0

08004124 <_exit>:
 8004124:	e7fe      	b.n	8004124 <_exit>
	...

08004128 <_init>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr

08004134 <_fini>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr
